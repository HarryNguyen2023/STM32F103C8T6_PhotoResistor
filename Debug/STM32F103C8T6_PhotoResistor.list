
STM32F103C8T6_PhotoResistor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007258  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007368  08007368  00017368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800779c  0800779c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800779c  0800779c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800779c  0800779c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080077a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200001dc  08007980  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08007980  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e926  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232c  00000000  00000000  0002eb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00030e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00031cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019248  00000000  00000000  00032a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001036c  00000000  00000000  0004bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ea8  00000000  00000000  0005c004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eceac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e50  00000000  00000000  000ecefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007350 	.word	0x08007350

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007350 	.word	0x08007350

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2uiz>:
 8000e0c:	0042      	lsls	r2, r0, #1
 8000e0e:	d20e      	bcs.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e14:	d30b      	bcc.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d409      	bmi.n	8000e34 <__aeabi_f2uiz+0x28>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e28:	fa23 f002 	lsr.w	r0, r3, r2
 8000e2c:	4770      	bx	lr
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	4770      	bx	lr
 8000e34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e38:	d101      	bne.n	8000e3e <__aeabi_f2uiz+0x32>
 8000e3a:	0242      	lsls	r2, r0, #9
 8000e3c:	d102      	bne.n	8000e44 <__aeabi_f2uiz+0x38>
 8000e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e42:	4770      	bx	lr
 8000e44:	f04f 0000 	mov.w	r0, #0
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <AmbientIntensity>:
uint8_t first = 0;
char msg[25];

// Function to get the light intensity respective to the ADC voltage divider value
uint16_t AmbientIntensity(uint16_t PRes)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
	float scale = 65535 / (ADC_RES - Vamb);
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <AmbientIntensity+0x50>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff7c 	bl	8000d64 <__aeabi_i2f>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60fb      	str	r3, [r7, #12]
	return (PRes - Vamb) * scale;
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <AmbientIntensity+0x50>)
 8000e74:	8812      	ldrh	r2, [r2, #0]
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff73 	bl	8000d64 <__aeabi_i2f>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	68f9      	ldr	r1, [r7, #12]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff f96c 	bl	8000160 <__aeabi_fmul>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ffbe 	bl	8000e0c <__aeabi_f2uiz>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29b      	uxth	r3, r3
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000348 	.word	0x20000348

08000ea0 <main>:

int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  // System initialization /
  HAL_Init();
 8000ea4:	f000 fc8c 	bl	80017c0 <HAL_Init>
  SystemClock_Config();
 8000ea8:	f000 f868 	bl	8000f7c <SystemClock_Config>
  MX_GPIO_Init();
 8000eac:	f000 fa0c 	bl	80012c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb0:	f000 f9ec 	bl	800128c <MX_DMA_Init>
  MX_ADC1_Init();
 8000eb4:	f000 f8be 	bl	8001034 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000eb8:	f000 f970 	bl	800119c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ebc:	f000 f9bc 	bl	8001238 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000ec0:	f000 f8f6 	bl	80010b0 <MX_TIM2_Init>

  // Start and calibrate the ADC module
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <main+0x44>)
 8000ec6:	f001 f89f 	bl	8002008 <HAL_ADCEx_Calibration_Start>
  // Initiate the TIMER 3 trigger source
  HAL_TIM_Base_Start(&htim3);
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <main+0x48>)
 8000ecc:	f002 fb96 	bl	80035fc <HAL_TIM_Base_Start>
  // Initiate the DMA transfer of the ADC module
  HAL_ADC_Start_DMA(&hadc1, &photores, 1);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4906      	ldr	r1, [pc, #24]	; (8000eec <main+0x4c>)
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <main+0x44>)
 8000ed6:	f000 fdad 	bl	8001a34 <HAL_ADC_Start_DMA>
  // Initiate the PWM module
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eda:	2100      	movs	r1, #0
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <main+0x50>)
 8000ede:	f002 fc2f 	bl	8003740 <HAL_TIM_PWM_Start>

  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <main+0x42>
 8000ee4:	200001f8 	.word	0x200001f8
 8000ee8:	200002b4 	.word	0x200002b4
 8000eec:	20000344 	.word	0x20000344
 8000ef0:	2000026c 	.word	0x2000026c

08000ef4 <HAL_ADC_ConvCpltCallback>:
  return 0;
}

// Function to handle ADC interrupt callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	// Get the initial ambient light intensity
	if(first == 0)
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10a      	bne.n	8000f1a <HAL_ADC_ConvCpltCallback+0x26>
	{
		Vamb = photores;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f06:	881a      	ldrh	r2, [r3, #0]
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f0a:	801a      	strh	r2, [r3, #0]
		first++;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f16:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = pwm_val;
		// Send the signal to the computer via UART
		sprintf(msg, "Light intensity: %u\r\n", pwm_val);
		HAL_UART_Transmit(&huart1, msg, strlen(msg), 100);
	}
}
 8000f18:	e01e      	b.n	8000f58 <HAL_ADC_ConvCpltCallback+0x64>
		pwm_val = AmbientIntensity(photores);
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff94 	bl	8000e4c <AmbientIntensity>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x78>)
 8000f2a:	801a      	strh	r2, [r3, #0]
		TIM2->CCR1 = pwm_val;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x78>)
 8000f2e:	881a      	ldrh	r2, [r3, #0]
 8000f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
		sprintf(msg, "Light intensity: %u\r\n", pwm_val);
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x78>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f40:	f003 ff8e 	bl	8004e60 <siprintf>
		HAL_UART_Transmit(&huart1, msg, strlen(msg), 100);
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f46:	f7ff f903 	bl	8000150 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	2364      	movs	r3, #100	; 0x64
 8000f50:	4908      	ldr	r1, [pc, #32]	; (8000f74 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f54:	f003 f972 	bl	800423c <HAL_UART_Transmit>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000034a 	.word	0x2000034a
 8000f64:	20000344 	.word	0x20000344
 8000f68:	20000348 	.word	0x20000348
 8000f6c:	20000346 	.word	0x20000346
 8000f70:	08007368 	.word	0x08007368
 8000f74:	2000034c 	.word	0x2000034c
 8000f78:	200002fc 	.word	0x200002fc

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f86:	2228      	movs	r2, #40	; 0x28
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fb00 	bl	8004590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fd46 	bl	8002a64 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fde:	f000 f995 	bl	800130c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 ffb2 	bl	8002f68 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800100a:	f000 f97f 	bl	800130c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800100e:	2302      	movs	r3, #2
 8001010:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001016:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f932 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001026:	f000 f971 	bl	800130c <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3750      	adds	r7, #80	; 0x50
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_ADC1_Init+0x74>)
 8001046:	4a19      	ldr	r2, [pc, #100]	; (80010ac <MX_ADC1_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_ADC1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_ADC1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_ADC1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_ADC1_Init+0x74>)
 800105e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001062:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_ADC1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_ADC1_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_ADC1_Init+0x74>)
 8001072:	f000 fc07 	bl	8001884 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 f946 	bl	800130c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001080:	2307      	movs	r3, #7
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001084:	2301      	movs	r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_ADC1_Init+0x74>)
 8001092:	f000 fdbf 	bl	8001c14 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800109c:	f000 f936 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200001f8 	.word	0x200001f8
 80010ac:	40012400 	.word	0x40012400

080010b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	615a      	str	r2, [r3, #20]
 80010de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001108:	4823      	ldr	r0, [pc, #140]	; (8001198 <MX_TIM2_Init+0xe8>)
 800110a:	f002 fa27 	bl	800355c <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001114:	f000 f8fa 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001122:	4619      	mov	r1, r3
 8001124:	481c      	ldr	r0, [pc, #112]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001126:	f002 fc6f 	bl	8003a08 <HAL_TIM_ConfigClockSource>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001130:	f000 f8ec 	bl	800130c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001134:	4818      	ldr	r0, [pc, #96]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001136:	f002 faab 	bl	8003690 <HAL_TIM_PWM_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001140:	f000 f8e4 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4619      	mov	r1, r3
 8001152:	4811      	ldr	r0, [pc, #68]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001154:	f002 ffc4 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800115e:	f000 f8d5 	bl	800130c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM2_Init+0xe8>)
 800117a:	f002 fb83 	bl	8003884 <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001184:	f000 f8c2 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <MX_TIM2_Init+0xe8>)
 800118a:	f000 f97f 	bl	800148c <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	; 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000026c 	.word	0x2000026c

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM3_Init+0x94>)
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <MX_TIM3_Init+0x98>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_TIM3_Init+0x94>)
 80011c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_TIM3_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_TIM3_Init+0x94>)
 80011ce:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80011d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_TIM3_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM3_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <MX_TIM3_Init+0x94>)
 80011e2:	f002 f9bb 	bl	800355c <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011ec:	f000 f88e 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_TIM3_Init+0x94>)
 80011fe:	f002 fc03 	bl	8003a08 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001208:	f000 f880 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800120c:	2320      	movs	r3, #32
 800120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_TIM3_Init+0x94>)
 800121a:	f002 ff61 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001224:	f000 f872 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200002b4 	.word	0x200002b4
 8001234:	40000400 	.word	0x40000400

08001238 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_USART1_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001244:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART1_UART_Init+0x4c>)
 8001270:	f002 ff94 	bl	800419c <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f847 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002fc 	.word	0x200002fc
 8001288:	40013800 	.word	0x40013800

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DMA_Init+0x38>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MX_DMA_Init+0x38>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6153      	str	r3, [r2, #20]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x38>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	200b      	movs	r0, #11
 80012b0:	f001 f82f 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012b4:	200b      	movs	r0, #11
 80012b6:	f001 f848 	bl	800234a <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_GPIO_Init+0x40>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <MX_GPIO_Init+0x40>)
 80012d4:	f043 0320 	orr.w	r3, r3, #32
 80012d8:	6193      	str	r3, [r2, #24]
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_GPIO_Init+0x40>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 0320 	and.w	r3, r3, #32
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_GPIO_Init+0x40>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <MX_GPIO_Init+0x40>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <MX_GPIO_Init+0x40>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001314:	e7fe      	b.n	8001314 <Error_Handler+0x8>
	...

08001318 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_MspInit+0x40>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_MspInit+0x40>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_MspInit+0x40>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_MspInit+0x40>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_MspInit+0x40>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_MspInit+0x40>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_ADC_MspInit+0xbc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d149      	bne.n	8001410 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_ADC_MspInit+0xc0>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_ADC_MspInit+0xc0>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_ADC_MspInit+0xc0>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b0:	2303      	movs	r3, #3
 80013b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4819      	ldr	r0, [pc, #100]	; (8001420 <HAL_ADC_MspInit+0xc4>)
 80013bc:	f001 f9ce 	bl	800275c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_ADC_MspInit+0xcc>)
 80013c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013ea:	2220      	movs	r2, #32
 80013ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 80013f6:	f000 ffc3 	bl	8002380 <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001400:	f7ff ff84 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 8001408:	621a      	str	r2, [r3, #32]
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_ADC_MspInit+0xc8>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40012400 	.word	0x40012400
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800
 8001424:	20000228 	.word	0x20000228
 8001428:	40020008 	.word	0x40020008

0800142c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800143c:	d10c      	bne.n	8001458 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_TIM_Base_MspInit+0x58>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_TIM_Base_MspInit+0x58>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_TIM_Base_MspInit+0x58>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001456:	e010      	b.n	800147a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_TIM_Base_MspInit+0x5c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10b      	bne.n	800147a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_TIM_Base_MspInit+0x58>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_TIM_Base_MspInit+0x58>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_TIM_Base_MspInit+0x58>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000
 8001488:	40000400 	.word	0x40000400

0800148c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014aa:	d117      	bne.n	80014dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_TIM_MspPostInit+0x58>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <HAL_TIM_MspPostInit+0x58>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_TIM_MspPostInit+0x58>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014c4:	2301      	movs	r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4804      	ldr	r0, [pc, #16]	; (80014e8 <HAL_TIM_MspPostInit+0x5c>)
 80014d8:	f001 f940 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800

080014ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <HAL_UART_MspInit+0x8c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d131      	bne.n	8001570 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_UART_MspInit+0x90>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a1a      	ldr	r2, [pc, #104]	; (800157c <HAL_UART_MspInit+0x90>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_UART_MspInit+0x90>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_UART_MspInit+0x90>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_UART_MspInit+0x90>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_UART_MspInit+0x90>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800153c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <HAL_UART_MspInit+0x94>)
 8001552:	f001 f903 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_UART_MspInit+0x94>)
 800156c:	f001 f8f6 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40013800 	.word	0x40013800
 800157c:	40021000 	.word	0x40021000
 8001580:	40010800 	.word	0x40010800

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ca:	f000 f93f 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <DMA1_Channel1_IRQHandler+0x10>)
 80015da:	f000 ff8b 	bl	80024f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000228 	.word	0x20000228

080015e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return 1;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <_kill>:

int _kill(int pid, int sig)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001600:	f002 ff9c 	bl	800453c <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	2216      	movs	r2, #22
 8001608:	601a      	str	r2, [r3, #0]
  return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_exit>:

void _exit (int status)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800161e:	f04f 31ff 	mov.w	r1, #4294967295
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffe7 	bl	80015f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001628:	e7fe      	b.n	8001628 <_exit+0x12>

0800162a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00a      	b.n	8001652 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800163c:	f3af 8000 	nop.w
 8001640:	4601      	mov	r1, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	b2ca      	uxtb	r2, r1
 800164a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf0      	blt.n	800163c <_read+0x12>
  }

  return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e009      	b.n	800168a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	60ba      	str	r2, [r7, #8]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbf1      	blt.n	8001676 <_write+0x12>
  }
  return len;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_close>:

int _close(int file)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c2:	605a      	str	r2, [r3, #4]
  return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <_isatty>:

int _isatty(int file)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f002 ff06 	bl	800453c <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20005000 	.word	0x20005000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000368 	.word	0x20000368
 8001764:	20000380 	.word	0x20000380

08001768 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001774:	f7ff fff8 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800177a:	490c      	ldr	r1, [pc, #48]	; (80017ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001790:	4c09      	ldr	r4, [pc, #36]	; (80017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179e:	f002 fed3 	bl	8004548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a2:	f7ff fb7d 	bl	8000ea0 <main>
  bx lr
 80017a6:	4770      	bx	lr
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017b0:	080077a4 	.word	0x080077a4
  ldr r2, =_sbss
 80017b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017b8:	20000380 	.word	0x20000380

080017bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC1_2_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_Init+0x28>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_Init+0x28>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 fd93 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	200f      	movs	r0, #15
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fd9c 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fdab 	bl	8002366 <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 fd73 	bl	8002312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	20000008 	.word	0x20000008
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x1c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_IncTick+0x20>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <HAL_IncTick+0x20>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000008 	.word	0x20000008
 800186c:	2000036c 	.word	0x2000036c

08001870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b02      	ldr	r3, [pc, #8]	; (8001880 <HAL_GetTick+0x10>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	2000036c 	.word	0x2000036c

08001884 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0be      	b.n	8001a24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fd4a 	bl	800135c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 faf5 	bl	8001eb8 <ADC_ConversionStop_Disable>
 80018ce:	4603      	mov	r3, r0
 80018d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 8099 	bne.w	8001a12 <HAL_ADC_Init+0x18e>
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 8095 	bne.w	8001a12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018f0:	f023 0302 	bic.w	r3, r3, #2
 80018f4:	f043 0202 	orr.w	r2, r3, #2
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001904:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7b1b      	ldrb	r3, [r3, #12]
 800190a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800190c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	4313      	orrs	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800191c:	d003      	beq.n	8001926 <HAL_ADC_Init+0xa2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d102      	bne.n	800192c <HAL_ADC_Init+0xa8>
 8001926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192a:	e000      	b.n	800192e <HAL_ADC_Init+0xaa>
 800192c:	2300      	movs	r3, #0
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7d1b      	ldrb	r3, [r3, #20]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d119      	bne.n	8001970 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7b1b      	ldrb	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	3b01      	subs	r3, #1
 800194a:	035a      	lsls	r2, r3, #13
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e00b      	b.n	8001970 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_ADC_Init+0x1a8>)
 800198c:	4013      	ands	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	430b      	orrs	r3, r1
 8001996:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a0:	d003      	beq.n	80019aa <HAL_ADC_Init+0x126>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d104      	bne.n	80019b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	051b      	lsls	r3, r3, #20
 80019b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_ADC_Init+0x1ac>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10b      	bne.n	80019f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	f043 0201 	orr.w	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ee:	e018      	b.n	8001a22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f023 0312 	bic.w	r3, r3, #18
 80019f8:	f043 0210 	orr.w	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a10:	e007      	b.n	8001a22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a30:	ff1f0efe 	.word	0xff1f0efe

08001a34 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a64      	ldr	r2, [pc, #400]	; (8001bdc <HAL_ADC_Start_DMA+0x1a8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <HAL_ADC_Start_DMA+0x24>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_ADC_Start_DMA+0x1ac>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d106      	bne.n	8001a66 <HAL_ADC_Start_DMA+0x32>
 8001a58:	4b60      	ldr	r3, [pc, #384]	; (8001bdc <HAL_ADC_Start_DMA+0x1a8>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f040 80b3 	bne.w	8001bcc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_Start_DMA+0x40>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0ae      	b.n	8001bd2 <HAL_ADC_Start_DMA+0x19e>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f9c1 	bl	8001e04 <ADC_Enable>
 8001a82:	4603      	mov	r3, r0
 8001a84:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 809a 	bne.w	8001bc2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <HAL_ADC_Start_DMA+0x1ac>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_Start_DMA+0x84>
 8001aac:	4b4b      	ldr	r3, [pc, #300]	; (8001bdc <HAL_ADC_Start_DMA+0x1a8>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d115      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d026      	beq.n	8001b20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ada:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae2:	e01d      	b.n	8001b20 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <HAL_ADC_Start_DMA+0x1a8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d004      	beq.n	8001b04 <HAL_ADC_Start_DMA+0xd0>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <HAL_ADC_Start_DMA+0x1ac>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d10d      	bne.n	8001b20 <HAL_ADC_Start_DMA+0xec>
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_ADC_Start_DMA+0x1a8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	f023 0206 	bic.w	r2, r3, #6
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b38:	e002      	b.n	8001b40 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a25      	ldr	r2, [pc, #148]	; (8001be4 <HAL_ADC_Start_DMA+0x1b0>)
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <HAL_ADC_Start_DMA+0x1b4>)
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_ADC_Start_DMA+0x1b8>)
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0202 	mvn.w	r2, #2
 8001b68:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b78:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a18      	ldr	r0, [r3, #32]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	334c      	adds	r3, #76	; 0x4c
 8001b84:	4619      	mov	r1, r3
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f000 fc53 	bl	8002434 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b9c:	d108      	bne.n	8001bb0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001bac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bae:	e00f      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bbe:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bc0:	e006      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001bca:	e001      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40012400 	.word	0x40012400
 8001be0:	40012800 	.word	0x40012800
 8001be4:	08001f3b 	.word	0x08001f3b
 8001be8:	08001fb7 	.word	0x08001fb7
 8001bec:	08001fd3 	.word	0x08001fd3

08001bf0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x20>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0dc      	b.n	8001dee <HAL_ADC_ConfigChannel+0x1da>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b06      	cmp	r3, #6
 8001c42:	d81c      	bhi.n	8001c7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b05      	subs	r3, #5
 8001c56:	221f      	movs	r2, #31
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b05      	subs	r3, #5
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7c:	e03c      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d81c      	bhi.n	8001cc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	3b23      	subs	r3, #35	; 0x23
 8001c98:	221f      	movs	r2, #31
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4019      	ands	r1, r3
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b23      	subs	r3, #35	; 0x23
 8001cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cbe:	e01b      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b41      	subs	r3, #65	; 0x41
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4019      	ands	r1, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b41      	subs	r3, #65	; 0x41
 8001cec:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	d91c      	bls.n	8001d3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b1e      	subs	r3, #30
 8001d12:	2207      	movs	r2, #7
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4019      	ands	r1, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6898      	ldr	r0, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b1e      	subs	r3, #30
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	e019      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6919      	ldr	r1, [r3, #16]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4019      	ands	r1, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6898      	ldr	r0, [r3, #8]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	fa00 f203 	lsl.w	r2, r0, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d003      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d7a:	2b11      	cmp	r3, #17
 8001d7c:	d132      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d125      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d126      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001da4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d11a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_ADC_ConfigChannel+0x1e8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_ADC_ConfigChannel+0x1ec>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	0c9a      	lsrs	r2, r3, #18
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f9      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x1b2>
 8001dd2:	e007      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40012400 	.word	0x40012400
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	431bde83 	.word	0x431bde83

08001e04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d040      	beq.n	8001ea4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <ADC_Enable+0xac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <ADC_Enable+0xb0>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	0c9b      	lsrs	r3, r3, #18
 8001e3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e40:	e002      	b.n	8001e48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f9      	bne.n	8001e42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e4e:	f7ff fd0f 	bl	8001870 <HAL_GetTick>
 8001e52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e54:	e01f      	b.n	8001e96 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e56:	f7ff fd0b 	bl	8001870 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d918      	bls.n	8001e96 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d011      	beq.n	8001e96 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e007      	b.n	8001ea6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d1d8      	bne.n	8001e56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	431bde83 	.word	0x431bde83

08001eb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d12e      	bne.n	8001f30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ee2:	f7ff fcc5 	bl	8001870 <HAL_GetTick>
 8001ee6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ee8:	e01b      	b.n	8001f22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eea:	f7ff fcc1 	bl	8001870 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d914      	bls.n	8001f22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10d      	bne.n	8001f22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	f043 0210 	orr.w	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e007      	b.n	8001f32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d0dc      	beq.n	8001eea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d127      	bne.n	8001fa4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f6e:	d115      	bne.n	8001f9c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d111      	bne.n	8001f9c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7fe ffa9 	bl	8000ef4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fa2:	e004      	b.n	8001fae <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff fe13 	bl	8001bf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	f043 0204 	orr.w	r2, r3, #4
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff fe02 	bl	8001c02 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADCEx_Calibration_Start+0x1e>
 8002022:	2302      	movs	r3, #2
 8002024:	e097      	b.n	8002156 <HAL_ADCEx_Calibration_Start+0x14e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff42 	bl	8001eb8 <ADC_ConversionStop_Disable>
 8002034:	4603      	mov	r3, r0
 8002036:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fee3 	bl	8001e04 <ADC_Enable>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 8081 	bne.w	800214c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002052:	f023 0302 	bic.w	r3, r3, #2
 8002056:	f043 0202 	orr.w	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800205e:	4b40      	ldr	r3, [pc, #256]	; (8002160 <HAL_ADCEx_Calibration_Start+0x158>)
 8002060:	681c      	ldr	r4, [r3, #0]
 8002062:	2002      	movs	r0, #2
 8002064:	f001 f9c4 	bl	80033f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002068:	4603      	mov	r3, r0
 800206a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800206e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002070:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002072:	e002      	b.n	800207a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3b01      	subs	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f9      	bne.n	8002074 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002090:	f7ff fbee 	bl	8001870 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002096:	e01b      	b.n	80020d0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002098:	f7ff fbea 	bl	8001870 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d914      	bls.n	80020d0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f023 0312 	bic.w	r3, r3, #18
 80020bc:	f043 0210 	orr.w	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e042      	b.n	8002156 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1dc      	bne.n	8002098 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0204 	orr.w	r2, r2, #4
 80020ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80020ee:	f7ff fbbf 	bl	8001870 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80020f4:	e01b      	b.n	800212e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020f6:	f7ff fbbb 	bl	8001870 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b0a      	cmp	r3, #10
 8002102:	d914      	bls.n	800212e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f023 0312 	bic.w	r3, r3, #18
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e013      	b.n	8002156 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1dc      	bne.n	80020f6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	f023 0303 	bic.w	r3, r3, #3
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002154:	7dfb      	ldrb	r3, [r7, #23]
}
 8002156:	4618      	mov	r0, r3
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4906      	ldr	r1, [pc, #24]	; (80021fc <__NVIC_EnableIRQ+0x34>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	; (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff90 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff2d 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff42 	bl	80021ac <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff90 	bl	8002254 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5f 	bl	8002200 <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff35 	bl	80021c8 <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa2 	bl	80022b8 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e043      	b.n	800241e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_DMA_Init+0xa8>)
 800239e:	4413      	add	r3, r2
 80023a0:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_DMA_Init+0xac>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	009a      	lsls	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <HAL_DMA_Init+0xb0>)
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	bffdfff8 	.word	0xbffdfff8
 800242c:	cccccccd 	.word	0xcccccccd
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_DMA_Start_IT+0x20>
 8002450:	2302      	movs	r3, #2
 8002452:	e04b      	b.n	80024ec <HAL_DMA_Start_IT+0xb8>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d13a      	bne.n	80024de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f937 	bl	8002700 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 020e 	orr.w	r2, r2, #14
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e00f      	b.n	80024cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0204 	bic.w	r2, r2, #4
 80024ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 020a 	orr.w	r2, r2, #10
 80024ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e005      	b.n	80024ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	2204      	movs	r2, #4
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d04f      	beq.n	80025bc <HAL_DMA_IRQHandler+0xc8>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d04a      	beq.n	80025bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0204 	bic.w	r2, r2, #4
 8002542:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a66      	ldr	r2, [pc, #408]	; (80026e4 <HAL_DMA_IRQHandler+0x1f0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d029      	beq.n	80025a2 <HAL_DMA_IRQHandler+0xae>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_DMA_IRQHandler+0x1f4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d022      	beq.n	800259e <HAL_DMA_IRQHandler+0xaa>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a63      	ldr	r2, [pc, #396]	; (80026ec <HAL_DMA_IRQHandler+0x1f8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01a      	beq.n	8002598 <HAL_DMA_IRQHandler+0xa4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a62      	ldr	r2, [pc, #392]	; (80026f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d012      	beq.n	8002592 <HAL_DMA_IRQHandler+0x9e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a60      	ldr	r2, [pc, #384]	; (80026f4 <HAL_DMA_IRQHandler+0x200>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00a      	beq.n	800258c <HAL_DMA_IRQHandler+0x98>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a5f      	ldr	r2, [pc, #380]	; (80026f8 <HAL_DMA_IRQHandler+0x204>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_DMA_IRQHandler+0x92>
 8002580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002584:	e00e      	b.n	80025a4 <HAL_DMA_IRQHandler+0xb0>
 8002586:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800258a:	e00b      	b.n	80025a4 <HAL_DMA_IRQHandler+0xb0>
 800258c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002590:	e008      	b.n	80025a4 <HAL_DMA_IRQHandler+0xb0>
 8002592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002596:	e005      	b.n	80025a4 <HAL_DMA_IRQHandler+0xb0>
 8002598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259c:	e002      	b.n	80025a4 <HAL_DMA_IRQHandler+0xb0>
 800259e:	2340      	movs	r3, #64	; 0x40
 80025a0:	e000      	b.n	80025a4 <HAL_DMA_IRQHandler+0xb0>
 80025a2:	2304      	movs	r3, #4
 80025a4:	4a55      	ldr	r2, [pc, #340]	; (80026fc <HAL_DMA_IRQHandler+0x208>)
 80025a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8094 	beq.w	80026da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025ba:	e08e      	b.n	80026da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2202      	movs	r2, #2
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d056      	beq.n	800267a <HAL_DMA_IRQHandler+0x186>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d051      	beq.n	800267a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 020a 	bic.w	r2, r2, #10
 80025f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_DMA_IRQHandler+0x1f0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d029      	beq.n	800265a <HAL_DMA_IRQHandler+0x166>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <HAL_DMA_IRQHandler+0x1f4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d022      	beq.n	8002656 <HAL_DMA_IRQHandler+0x162>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a35      	ldr	r2, [pc, #212]	; (80026ec <HAL_DMA_IRQHandler+0x1f8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01a      	beq.n	8002650 <HAL_DMA_IRQHandler+0x15c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d012      	beq.n	800264a <HAL_DMA_IRQHandler+0x156>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a32      	ldr	r2, [pc, #200]	; (80026f4 <HAL_DMA_IRQHandler+0x200>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00a      	beq.n	8002644 <HAL_DMA_IRQHandler+0x150>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a31      	ldr	r2, [pc, #196]	; (80026f8 <HAL_DMA_IRQHandler+0x204>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <HAL_DMA_IRQHandler+0x14a>
 8002638:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800263c:	e00e      	b.n	800265c <HAL_DMA_IRQHandler+0x168>
 800263e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002642:	e00b      	b.n	800265c <HAL_DMA_IRQHandler+0x168>
 8002644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002648:	e008      	b.n	800265c <HAL_DMA_IRQHandler+0x168>
 800264a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264e:	e005      	b.n	800265c <HAL_DMA_IRQHandler+0x168>
 8002650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002654:	e002      	b.n	800265c <HAL_DMA_IRQHandler+0x168>
 8002656:	2320      	movs	r3, #32
 8002658:	e000      	b.n	800265c <HAL_DMA_IRQHandler+0x168>
 800265a:	2302      	movs	r3, #2
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <HAL_DMA_IRQHandler+0x208>)
 800265e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d034      	beq.n	80026da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002678:	e02f      	b.n	80026da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2208      	movs	r2, #8
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d028      	beq.n	80026dc <HAL_DMA_IRQHandler+0x1e8>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d023      	beq.n	80026dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020e 	bic.w	r2, r2, #14
 80026a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	2101      	movs	r1, #1
 80026ae:	fa01 f202 	lsl.w	r2, r1, r2
 80026b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d004      	beq.n	80026dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
    }
  }
  return;
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
}
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40020008 	.word	0x40020008
 80026e8:	4002001c 	.word	0x4002001c
 80026ec:	40020030 	.word	0x40020030
 80026f0:	40020044 	.word	0x40020044
 80026f4:	40020058 	.word	0x40020058
 80026f8:	4002006c 	.word	0x4002006c
 80026fc:	40020000 	.word	0x40020000

08002700 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b10      	cmp	r3, #16
 800272c:	d108      	bne.n	8002740 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800273e:	e007      	b.n	8002750 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
	...

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b08b      	sub	sp, #44	; 0x2c
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	e169      	b.n	8002a44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002770:	2201      	movs	r2, #1
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8158 	bne.w	8002a3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a9a      	ldr	r2, [pc, #616]	; (80029fc <HAL_GPIO_Init+0x2a0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d05e      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 8002798:	4a98      	ldr	r2, [pc, #608]	; (80029fc <HAL_GPIO_Init+0x2a0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d875      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 800279e:	4a98      	ldr	r2, [pc, #608]	; (8002a00 <HAL_GPIO_Init+0x2a4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d058      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027a4:	4a96      	ldr	r2, [pc, #600]	; (8002a00 <HAL_GPIO_Init+0x2a4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d86f      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027aa:	4a96      	ldr	r2, [pc, #600]	; (8002a04 <HAL_GPIO_Init+0x2a8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d052      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027b0:	4a94      	ldr	r2, [pc, #592]	; (8002a04 <HAL_GPIO_Init+0x2a8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d869      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027b6:	4a94      	ldr	r2, [pc, #592]	; (8002a08 <HAL_GPIO_Init+0x2ac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04c      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027bc:	4a92      	ldr	r2, [pc, #584]	; (8002a08 <HAL_GPIO_Init+0x2ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d863      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027c2:	4a92      	ldr	r2, [pc, #584]	; (8002a0c <HAL_GPIO_Init+0x2b0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d046      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027c8:	4a90      	ldr	r2, [pc, #576]	; (8002a0c <HAL_GPIO_Init+0x2b0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d85d      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d82a      	bhi.n	8002828 <HAL_GPIO_Init+0xcc>
 80027d2:	2b12      	cmp	r3, #18
 80027d4:	d859      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027d6:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <HAL_GPIO_Init+0x80>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002831 	.word	0x08002831
 80027e4:	08002843 	.word	0x08002843
 80027e8:	08002885 	.word	0x08002885
 80027ec:	0800288b 	.word	0x0800288b
 80027f0:	0800288b 	.word	0x0800288b
 80027f4:	0800288b 	.word	0x0800288b
 80027f8:	0800288b 	.word	0x0800288b
 80027fc:	0800288b 	.word	0x0800288b
 8002800:	0800288b 	.word	0x0800288b
 8002804:	0800288b 	.word	0x0800288b
 8002808:	0800288b 	.word	0x0800288b
 800280c:	0800288b 	.word	0x0800288b
 8002810:	0800288b 	.word	0x0800288b
 8002814:	0800288b 	.word	0x0800288b
 8002818:	0800288b 	.word	0x0800288b
 800281c:	0800288b 	.word	0x0800288b
 8002820:	08002839 	.word	0x08002839
 8002824:	0800284d 	.word	0x0800284d
 8002828:	4a79      	ldr	r2, [pc, #484]	; (8002a10 <HAL_GPIO_Init+0x2b4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800282e:	e02c      	b.n	800288a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	623b      	str	r3, [r7, #32]
          break;
 8002836:	e029      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	3304      	adds	r3, #4
 800283e:	623b      	str	r3, [r7, #32]
          break;
 8002840:	e024      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	3308      	adds	r3, #8
 8002848:	623b      	str	r3, [r7, #32]
          break;
 800284a:	e01f      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	330c      	adds	r3, #12
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e01a      	b.n	800288c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800285e:	2304      	movs	r3, #4
 8002860:	623b      	str	r3, [r7, #32]
          break;
 8002862:	e013      	b.n	800288c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800286c:	2308      	movs	r3, #8
 800286e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	611a      	str	r2, [r3, #16]
          break;
 8002876:	e009      	b.n	800288c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002878:	2308      	movs	r3, #8
 800287a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	615a      	str	r2, [r3, #20]
          break;
 8002882:	e003      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
          break;
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x130>
          break;
 800288a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2bff      	cmp	r3, #255	; 0xff
 8002890:	d801      	bhi.n	8002896 <HAL_GPIO_Init+0x13a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	e001      	b.n	800289a <HAL_GPIO_Init+0x13e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2bff      	cmp	r3, #255	; 0xff
 80028a0:	d802      	bhi.n	80028a8 <HAL_GPIO_Init+0x14c>
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x152>
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	3b08      	subs	r3, #8
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	210f      	movs	r1, #15
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	401a      	ands	r2, r3
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80b1 	beq.w	8002a3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028dc:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028f4:	4a48      	ldr	r2, [pc, #288]	; (8002a18 <HAL_GPIO_Init+0x2bc>)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	220f      	movs	r2, #15
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a40      	ldr	r2, [pc, #256]	; (8002a1c <HAL_GPIO_Init+0x2c0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_GPIO_Init+0x1ec>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3f      	ldr	r2, [pc, #252]	; (8002a20 <HAL_GPIO_Init+0x2c4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00d      	beq.n	8002944 <HAL_GPIO_Init+0x1e8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3e      	ldr	r2, [pc, #248]	; (8002a24 <HAL_GPIO_Init+0x2c8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <HAL_GPIO_Init+0x1e4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3d      	ldr	r2, [pc, #244]	; (8002a28 <HAL_GPIO_Init+0x2cc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_GPIO_Init+0x1e0>
 8002938:	2303      	movs	r3, #3
 800293a:	e006      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 800293c:	2304      	movs	r3, #4
 800293e:	e004      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002940:	2302      	movs	r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002948:	2300      	movs	r3, #0
 800294a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294c:	f002 0203 	and.w	r2, r2, #3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4093      	lsls	r3, r2
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800295a:	492f      	ldr	r1, [pc, #188]	; (8002a18 <HAL_GPIO_Init+0x2bc>)
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	492c      	ldr	r1, [pc, #176]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	43db      	mvns	r3, r3
 800298a:	4928      	ldr	r1, [pc, #160]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 800298c:	4013      	ands	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	4922      	ldr	r1, [pc, #136]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	491e      	ldr	r1, [pc, #120]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4918      	ldr	r1, [pc, #96]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	4914      	ldr	r1, [pc, #80]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d021      	beq.n	8002a30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e021      	b.n	8002a3e <HAL_GPIO_Init+0x2e2>
 80029fa:	bf00      	nop
 80029fc:	10320000 	.word	0x10320000
 8002a00:	10310000 	.word	0x10310000
 8002a04:	10220000 	.word	0x10220000
 8002a08:	10210000 	.word	0x10210000
 8002a0c:	10120000 	.word	0x10120000
 8002a10:	10110000 	.word	0x10110000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40010800 	.word	0x40010800
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40011400 	.word	0x40011400
 8002a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_GPIO_Init+0x304>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4909      	ldr	r1, [pc, #36]	; (8002a60 <HAL_GPIO_Init+0x304>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3301      	adds	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f ae8e 	bne.w	8002770 <HAL_GPIO_Init+0x14>
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	372c      	adds	r7, #44	; 0x2c
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e272      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8087 	beq.w	8002b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a84:	4b92      	ldr	r3, [pc, #584]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d00c      	beq.n	8002aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a90:	4b8f      	ldr	r3, [pc, #572]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d112      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5e>
 8002a9c:	4b8c      	ldr	r3, [pc, #560]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aaa:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d06c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x12c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d168      	bne.n	8002b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e24c      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x76>
 8002acc:	4b80      	ldr	r3, [pc, #512]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a7f      	ldr	r2, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e02e      	b.n	8002b38 <HAL_RCC_OscConfig+0xd4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x98>
 8002ae2:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7a      	ldr	r2, [pc, #488]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b78      	ldr	r3, [pc, #480]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a77      	ldr	r2, [pc, #476]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e01d      	b.n	8002b38 <HAL_RCC_OscConfig+0xd4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0xbc>
 8002b06:	4b72      	ldr	r3, [pc, #456]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a71      	ldr	r2, [pc, #452]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0xd4>
 8002b20:	4b6b      	ldr	r3, [pc, #428]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6a      	ldr	r2, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a67      	ldr	r2, [pc, #412]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fe96 	bl	8001870 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fe92 	bl	8001870 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e200      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b5d      	ldr	r3, [pc, #372]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0xe4>
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fe82 	bl	8001870 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fe7e 	bl	8001870 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1ec      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x10c>
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d063      	beq.n	8002c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b9e:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002baa:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d11c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x18c>
 8002bb6:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d116      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_RCC_OscConfig+0x176>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e1c0      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4939      	ldr	r1, [pc, #228]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bee:	e03a      	b.n	8002c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d020      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf8:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fe37 	bl	8001870 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c06:	f7fe fe33 	bl	8001870 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e1a1      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4927      	ldr	r1, [pc, #156]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fe16 	bl	8001870 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe fe12 	bl	8001870 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e180      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d03a      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d019      	beq.n	8002cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fe fdf6 	bl	8001870 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c88:	f7fe fdf2 	bl	8001870 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e160      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f000 face 	bl	8003248 <RCC_Delay>
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fddc 	bl	8001870 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cba:	e00f      	b.n	8002cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fdd8 	bl	8001870 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d908      	bls.n	8002cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e146      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	42420000 	.word	0x42420000
 8002cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e9      	bne.n	8002cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a6 	beq.w	8002e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4a87      	ldr	r2, [pc, #540]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	61d3      	str	r3, [r2, #28]
 8002d12:	4b85      	ldr	r3, [pc, #532]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	4b82      	ldr	r3, [pc, #520]	; (8002f2c <HAL_RCC_OscConfig+0x4c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d118      	bne.n	8002d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2e:	4b7f      	ldr	r3, [pc, #508]	; (8002f2c <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7e      	ldr	r2, [pc, #504]	; (8002f2c <HAL_RCC_OscConfig+0x4c8>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe fd99 	bl	8001870 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d42:	f7fe fd95 	bl	8001870 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b64      	cmp	r3, #100	; 0x64
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e103      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <HAL_RCC_OscConfig+0x4c8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x312>
 8002d68:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	e02d      	b.n	8002dd2 <HAL_RCC_OscConfig+0x36e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x334>
 8002d7e:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4a69      	ldr	r2, [pc, #420]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	6213      	str	r3, [r2, #32]
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a66      	ldr	r2, [pc, #408]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	e01c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x36e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d10c      	bne.n	8002dba <HAL_RCC_OscConfig+0x356>
 8002da0:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a60      	ldr	r2, [pc, #384]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	f043 0304 	orr.w	r3, r3, #4
 8002daa:	6213      	str	r3, [r2, #32]
 8002dac:	4b5e      	ldr	r3, [pc, #376]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a5d      	ldr	r2, [pc, #372]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	e00b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x36e>
 8002dba:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6213      	str	r3, [r2, #32]
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a57      	ldr	r2, [pc, #348]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d015      	beq.n	8002e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fd49 	bl	8001870 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe fd45 	bl	8001870 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e0b1      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ee      	beq.n	8002de2 <HAL_RCC_OscConfig+0x37e>
 8002e04:	e014      	b.n	8002e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fd33 	bl	8001870 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe fd2f 	bl	8001870 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e09b      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ee      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e36:	4b3c      	ldr	r3, [pc, #240]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a3b      	ldr	r2, [pc, #236]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8087 	beq.w	8002f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d061      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d146      	bne.n	8002eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fe fd03 	bl	8001870 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe fcff 	bl	8001870 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e06d      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4921      	ldr	r1, [pc, #132]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a19      	ldr	r1, [r3, #32]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	491b      	ldr	r1, [pc, #108]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fcd3 	bl	8001870 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fe fccf 	bl	8001870 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e03d      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x46a>
 8002eec:	e035      	b.n	8002f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fcbc 	bl	8001870 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe fcb8 	bl	8001870 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e026      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x498>
 8002f1a:	e01e      	b.n	8002f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e019      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x500>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d106      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d001      	beq.n	8002f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0d0      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d910      	bls.n	8002fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 0207 	bic.w	r2, r3, #7
 8002f92:	4965      	ldr	r1, [pc, #404]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b8      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	494d      	ldr	r1, [pc, #308]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d040      	beq.n	8003088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d115      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07f      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e073      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06b      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4936      	ldr	r1, [pc, #216]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fe fc0a 	bl	8001870 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fe fc06 	bl	8001870 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e053      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d210      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 0207 	bic.w	r2, r3, #7
 800309e:	4922      	ldr	r1, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e032      	b.n	800311e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4916      	ldr	r1, [pc, #88]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f6:	f000 f821 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490a      	ldr	r1, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1cc>)
 8003110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1d0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fb68 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	08007380 	.word	0x08007380
 8003134:	20000000 	.word	0x20000000
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x30>
 8003166:	2b08      	cmp	r3, #8
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x36>
 800316a:	e027      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800316e:	613b      	str	r3, [r7, #16]
      break;
 8003170:	e027      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d010      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0c5b      	lsrs	r3, r3, #17
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800319e:	fb03 f202 	mul.w	r2, r3, r2
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e004      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	613b      	str	r3, [r7, #16]
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031be:	613b      	str	r3, [r7, #16]
      break;
 80031c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c2:	693b      	ldr	r3, [r7, #16]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	007a1200 	.word	0x007a1200
 80031d8:	08007398 	.word	0x08007398
 80031dc:	080073a8 	.word	0x080073a8
 80031e0:	003d0900 	.word	0x003d0900

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b02      	ldr	r3, [pc, #8]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	20000000 	.word	0x20000000

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff2 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	08007390 	.word	0x08007390

08003220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003224:	f7ff ffde 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	0adb      	lsrs	r3, r3, #11
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	08007390 	.word	0x08007390

08003248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <RCC_Delay+0x34>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <RCC_Delay+0x38>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0a5b      	lsrs	r3, r3, #9
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003264:	bf00      	nop
  }
  while (Delay --);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	60fa      	str	r2, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f9      	bne.n	8003264 <RCC_Delay+0x1c>
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	20000000 	.word	0x20000000
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d07d      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032a0:	2300      	movs	r3, #0
 80032a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a4:	4b4f      	ldr	r3, [pc, #316]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10d      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4a4b      	ldr	r2, [pc, #300]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ba:	61d3      	str	r3, [r2, #28]
 80032bc:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d118      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d8:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e4:	f7fe fac4 	bl	8001870 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	e008      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fe fac0 	bl	8001870 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e06d      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800330a:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003312:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d02e      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d027      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003328:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003338:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800333e:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d014      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334e:	f7fe fa8f 	bl	8001870 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fe fa8b 	bl	8001870 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e036      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ee      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4917      	ldr	r1, [pc, #92]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	4313      	orrs	r3, r2
 8003388:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	490b      	ldr	r1, [pc, #44]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4904      	ldr	r1, [pc, #16]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42420440 	.word	0x42420440

080033f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b10      	cmp	r3, #16
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b10      	cmp	r3, #16
 8003416:	f200 808a 	bhi.w	800352e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d045      	beq.n	80034ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d075      	beq.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003426:	e082      	b.n	800352e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800342e:	4b45      	ldr	r3, [pc, #276]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d07b      	beq.n	8003532 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	0c9b      	lsrs	r3, r3, #18
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	4a41      	ldr	r2, [pc, #260]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003444:	5cd3      	ldrb	r3, [r2, r3]
 8003446:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003452:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0c5b      	lsrs	r3, r3, #17
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	4a3b      	ldr	r2, [pc, #236]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800345e:	5cd3      	ldrb	r3, [r2, r3]
 8003460:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800346c:	4a38      	ldr	r2, [pc, #224]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	fbb2 f2f3 	udiv	r2, r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	e004      	b.n	8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4a34      	ldr	r2, [pc, #208]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003488:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003494:	d102      	bne.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	61bb      	str	r3, [r7, #24]
      break;
 800349a:	e04a      	b.n	8003532 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]
      break;
 80034aa:	e042      	b.n	8003532 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034bc:	d108      	bne.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80034c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e01f      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034da:	d109      	bne.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80034e8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e00f      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034fa:	d11c      	bne.n	8003536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d016      	beq.n	8003536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003508:	f24f 4324 	movw	r3, #62500	; 0xf424
 800350c:	61bb      	str	r3, [r7, #24]
      break;
 800350e:	e012      	b.n	8003536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003510:	e011      	b.n	8003536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003512:	f7ff fe85 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8003516:	4602      	mov	r2, r0
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	0b9b      	lsrs	r3, r3, #14
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	3301      	adds	r3, #1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	61bb      	str	r3, [r7, #24]
      break;
 800352c:	e004      	b.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800352e:	bf00      	nop
 8003530:	e002      	b.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003536:	bf00      	nop
    }
  }
  return (frequency);
 8003538:	69bb      	ldr	r3, [r7, #24]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	080073ac 	.word	0x080073ac
 800354c:	080073bc 	.word	0x080073bc
 8003550:	007a1200 	.word	0x007a1200
 8003554:	003d0900 	.word	0x003d0900
 8003558:	aaaaaaab 	.word	0xaaaaaaab

0800355c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e041      	b.n	80035f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd ff52 	bl	800142c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f000 fafc 	bl	8003b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d001      	beq.n	8003614 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e032      	b.n	800367a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_TIM_Base_Start+0x88>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_TIM_Base_Start+0x48>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362e:	d009      	beq.n	8003644 <HAL_TIM_Base_Start+0x48>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <HAL_TIM_Base_Start+0x8c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_TIM_Base_Start+0x48>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <HAL_TIM_Base_Start+0x90>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d111      	bne.n	8003668 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b06      	cmp	r3, #6
 8003654:	d010      	beq.n	8003678 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	e007      	b.n	8003678 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800

08003690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e041      	b.n	8003726 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f839 	bl	800372e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 fa62 	bl	8003b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <HAL_TIM_PWM_Start+0x24>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e022      	b.n	80037aa <HAL_TIM_PWM_Start+0x6a>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b04      	cmp	r3, #4
 8003768:	d109      	bne.n	800377e <HAL_TIM_PWM_Start+0x3e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	bf14      	ite	ne
 8003776:	2301      	movne	r3, #1
 8003778:	2300      	moveq	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	e015      	b.n	80037aa <HAL_TIM_PWM_Start+0x6a>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d109      	bne.n	8003798 <HAL_TIM_PWM_Start+0x58>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e008      	b.n	80037aa <HAL_TIM_PWM_Start+0x6a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e05e      	b.n	8003870 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x82>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c0:	e013      	b.n	80037ea <HAL_TIM_PWM_Start+0xaa>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_PWM_Start+0x92>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d0:	e00b      	b.n	80037ea <HAL_TIM_PWM_Start+0xaa>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_PWM_Start+0xa2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e0:	e003      	b.n	80037ea <HAL_TIM_PWM_Start+0xaa>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fc50 	bl	8004098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <HAL_TIM_PWM_Start+0x138>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d107      	bne.n	8003812 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_TIM_PWM_Start+0x138>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00e      	beq.n	800383a <HAL_TIM_PWM_Start+0xfa>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d009      	beq.n	800383a <HAL_TIM_PWM_Start+0xfa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a14      	ldr	r2, [pc, #80]	; (800387c <HAL_TIM_PWM_Start+0x13c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_TIM_PWM_Start+0xfa>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a12      	ldr	r2, [pc, #72]	; (8003880 <HAL_TIM_PWM_Start+0x140>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d111      	bne.n	800385e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b06      	cmp	r3, #6
 800384a:	d010      	beq.n	800386e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	e007      	b.n	800386e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800

08003884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0ae      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	f200 809f 	bhi.w	80039f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	080039f1 	.word	0x080039f1
 80038c0:	080039f1 	.word	0x080039f1
 80038c4:	080039f1 	.word	0x080039f1
 80038c8:	0800392d 	.word	0x0800392d
 80038cc:	080039f1 	.word	0x080039f1
 80038d0:	080039f1 	.word	0x080039f1
 80038d4:	080039f1 	.word	0x080039f1
 80038d8:	0800396f 	.word	0x0800396f
 80038dc:	080039f1 	.word	0x080039f1
 80038e0:	080039f1 	.word	0x080039f1
 80038e4:	080039f1 	.word	0x080039f1
 80038e8:	080039af 	.word	0x080039af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f9b2 	bl	8003c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0208 	orr.w	r2, r2, #8
 8003906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6999      	ldr	r1, [r3, #24]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	619a      	str	r2, [r3, #24]
      break;
 800392a:	e064      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f9f8 	bl	8003d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	021a      	lsls	r2, r3, #8
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
      break;
 800396c:	e043      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fa41 	bl	8003dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0208 	orr.w	r2, r2, #8
 8003988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0204 	bic.w	r2, r2, #4
 8003998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69d9      	ldr	r1, [r3, #28]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	61da      	str	r2, [r3, #28]
      break;
 80039ac:	e023      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fa8b 	bl	8003ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	021a      	lsls	r2, r3, #8
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	61da      	str	r2, [r3, #28]
      break;
 80039ee:	e002      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_TIM_ConfigClockSource+0x1c>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e0b4      	b.n	8003b8e <HAL_TIM_ConfigClockSource+0x186>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5c:	d03e      	beq.n	8003adc <HAL_TIM_ConfigClockSource+0xd4>
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a62:	f200 8087 	bhi.w	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	f000 8086 	beq.w	8003b7a <HAL_TIM_ConfigClockSource+0x172>
 8003a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a72:	d87f      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b70      	cmp	r3, #112	; 0x70
 8003a76:	d01a      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0xa6>
 8003a78:	2b70      	cmp	r3, #112	; 0x70
 8003a7a:	d87b      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a7c:	2b60      	cmp	r3, #96	; 0x60
 8003a7e:	d050      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x11a>
 8003a80:	2b60      	cmp	r3, #96	; 0x60
 8003a82:	d877      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a84:	2b50      	cmp	r3, #80	; 0x50
 8003a86:	d03c      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0xfa>
 8003a88:	2b50      	cmp	r3, #80	; 0x50
 8003a8a:	d873      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d058      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0x13a>
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d86f      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b30      	cmp	r3, #48	; 0x30
 8003a96:	d064      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x15a>
 8003a98:	2b30      	cmp	r3, #48	; 0x30
 8003a9a:	d86b      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d060      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x15a>
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d867      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d05c      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x15a>
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d05a      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x15a>
 8003aac:	e062      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6899      	ldr	r1, [r3, #8]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f000 facc 	bl	800405a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	609a      	str	r2, [r3, #8]
      break;
 8003ada:	e04f      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f000 fab5 	bl	800405a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003afe:	609a      	str	r2, [r3, #8]
      break;
 8003b00:	e03c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f000 fa2c 	bl	8003f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2150      	movs	r1, #80	; 0x50
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fa83 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003b20:	e02c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f000 fa4a 	bl	8003fc8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2160      	movs	r1, #96	; 0x60
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fa73 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003b40:	e01c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f000 fa0c 	bl	8003f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2140      	movs	r1, #64	; 0x40
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa63 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003b60:	e00c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f000 fa5a 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003b72:	e003      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	e000      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <TIM_Base_SetConfig+0xb8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_Base_SetConfig+0x30>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d007      	beq.n	8003bc8 <TIM_Base_SetConfig+0x30>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <TIM_Base_SetConfig+0xbc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0x30>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <TIM_Base_SetConfig+0xc0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <TIM_Base_SetConfig+0xb8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_Base_SetConfig+0x62>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be8:	d007      	beq.n	8003bfa <TIM_Base_SetConfig+0x62>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <TIM_Base_SetConfig+0xbc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_Base_SetConfig+0x62>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <TIM_Base_SetConfig+0xc0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d108      	bne.n	8003c0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <TIM_Base_SetConfig+0xb8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d103      	bne.n	8003c40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	615a      	str	r2, [r3, #20]
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40000800 	.word	0x40000800

08003c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f023 0201 	bic.w	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 0302 	bic.w	r3, r3, #2
 8003ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <TIM_OC1_SetConfig+0xc8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10c      	bne.n	8003cd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0308 	bic.w	r3, r3, #8
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <TIM_OC1_SetConfig+0xc8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d111      	bne.n	8003cfe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	621a      	str	r2, [r3, #32]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40012c00 	.word	0x40012c00

08003d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f023 0210 	bic.w	r2, r3, #16
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f023 0320 	bic.w	r3, r3, #32
 8003d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a1d      	ldr	r2, [pc, #116]	; (8003df8 <TIM_OC2_SetConfig+0xd0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d10d      	bne.n	8003da4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <TIM_OC2_SetConfig+0xd0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d113      	bne.n	8003dd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	40012c00 	.word	0x40012c00

08003dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0303 	bic.w	r3, r3, #3
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <TIM_OC3_SetConfig+0xd0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10d      	bne.n	8003e76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <TIM_OC3_SetConfig+0xd0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d113      	bne.n	8003ea6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00

08003ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	031b      	lsls	r3, r3, #12
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a0f      	ldr	r2, [pc, #60]	; (8003f68 <TIM_OC4_SetConfig+0x98>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d109      	bne.n	8003f44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	019b      	lsls	r3, r3, #6
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	40012c00 	.word	0x40012c00

08003f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 030a 	bic.w	r3, r3, #10
 8003fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0210 	bic.w	r2, r3, #16
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	031b      	lsls	r3, r3, #12
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004004:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	f043 0307 	orr.w	r3, r3, #7
 8004048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800405a:	b480      	push	{r7}
 800405c:	b087      	sub	sp, #28
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004074:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	021a      	lsls	r2, r3, #8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	431a      	orrs	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4313      	orrs	r3, r2
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	609a      	str	r2, [r3, #8]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2201      	movs	r2, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1a      	ldr	r2, [r3, #32]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	431a      	orrs	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e046      	b.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a16      	ldr	r2, [pc, #88]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d009      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a10      	ldr	r2, [pc, #64]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10c      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4313      	orrs	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800

0800419c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e042      	b.n	8004234 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd f992 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f91d 	bl	8004420 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b20      	cmp	r3, #32
 800425a:	d16d      	bne.n	8004338 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_UART_Transmit+0x2c>
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e066      	b.n	800433a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2221      	movs	r2, #33	; 0x21
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800427a:	f7fd faf9 	bl	8001870 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	88fa      	ldrh	r2, [r7, #6]
 800428a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004294:	d108      	bne.n	80042a8 <HAL_UART_Transmit+0x6c>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	e003      	b.n	80042b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042b0:	e02a      	b.n	8004308 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2180      	movs	r1, #128	; 0x80
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f840 	bl	8004342 <UART_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e036      	b.n	800433a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	3302      	adds	r3, #2
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	e007      	b.n	80042fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	781a      	ldrb	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3301      	adds	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1cf      	bne.n	80042b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	2140      	movs	r1, #64	; 0x40
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f810 	bl	8004342 <UART_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e006      	b.n	800433a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b090      	sub	sp, #64	; 0x40
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4613      	mov	r3, r2
 8004350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004352:	e050      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d04c      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800435c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <UART_WaitOnFlagUntilTimeout+0x30>
 8004362:	f7fd fa85 	bl	8001870 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800436e:	429a      	cmp	r2, r3
 8004370:	d241      	bcs.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004392:	637a      	str	r2, [r7, #52]	; 0x34
 8004394:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e5      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3314      	adds	r3, #20
 80043ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	613b      	str	r3, [r7, #16]
   return(result);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c6:	623a      	str	r2, [r7, #32]
 80043c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	69f9      	ldr	r1, [r7, #28]
 80043cc:	6a3a      	ldr	r2, [r7, #32]
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e5      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e00f      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	bf0c      	ite	eq
 8004406:	2301      	moveq	r3, #1
 8004408:	2300      	movne	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	429a      	cmp	r2, r3
 8004412:	d09f      	beq.n	8004354 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3740      	adds	r7, #64	; 0x40
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800445a:	f023 030c 	bic.w	r3, r3, #12
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	430b      	orrs	r3, r1
 8004466:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2c      	ldr	r2, [pc, #176]	; (8004534 <UART_SetConfig+0x114>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004488:	f7fe feca 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	e002      	b.n	8004496 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe feb2 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8004494:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	4a22      	ldr	r2, [pc, #136]	; (8004538 <UART_SetConfig+0x118>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	0119      	lsls	r1, r3, #4
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009a      	lsls	r2, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <UART_SetConfig+0x118>)
 80044ce:	fba3 0302 	umull	r0, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2064      	movs	r0, #100	; 0x64
 80044d6:	fb00 f303 	mul.w	r3, r0, r3
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	3332      	adds	r3, #50	; 0x32
 80044e0:	4a15      	ldr	r2, [pc, #84]	; (8004538 <UART_SetConfig+0x118>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ec:	4419      	add	r1, r3
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	fbb2 f2f3 	udiv	r2, r2, r3
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <UART_SetConfig+0x118>)
 8004506:	fba3 0302 	umull	r0, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2064      	movs	r0, #100	; 0x64
 800450e:	fb00 f303 	mul.w	r3, r0, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	3332      	adds	r3, #50	; 0x32
 8004518:	4a07      	ldr	r2, [pc, #28]	; (8004538 <UART_SetConfig+0x118>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	440a      	add	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40013800 	.word	0x40013800
 8004538:	51eb851f 	.word	0x51eb851f

0800453c <__errno>:
 800453c:	4b01      	ldr	r3, [pc, #4]	; (8004544 <__errno+0x8>)
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	2000000c 	.word	0x2000000c

08004548 <__libc_init_array>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	2600      	movs	r6, #0
 800454c:	4d0c      	ldr	r5, [pc, #48]	; (8004580 <__libc_init_array+0x38>)
 800454e:	4c0d      	ldr	r4, [pc, #52]	; (8004584 <__libc_init_array+0x3c>)
 8004550:	1b64      	subs	r4, r4, r5
 8004552:	10a4      	asrs	r4, r4, #2
 8004554:	42a6      	cmp	r6, r4
 8004556:	d109      	bne.n	800456c <__libc_init_array+0x24>
 8004558:	f002 fefa 	bl	8007350 <_init>
 800455c:	2600      	movs	r6, #0
 800455e:	4d0a      	ldr	r5, [pc, #40]	; (8004588 <__libc_init_array+0x40>)
 8004560:	4c0a      	ldr	r4, [pc, #40]	; (800458c <__libc_init_array+0x44>)
 8004562:	1b64      	subs	r4, r4, r5
 8004564:	10a4      	asrs	r4, r4, #2
 8004566:	42a6      	cmp	r6, r4
 8004568:	d105      	bne.n	8004576 <__libc_init_array+0x2e>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004570:	4798      	blx	r3
 8004572:	3601      	adds	r6, #1
 8004574:	e7ee      	b.n	8004554 <__libc_init_array+0xc>
 8004576:	f855 3b04 	ldr.w	r3, [r5], #4
 800457a:	4798      	blx	r3
 800457c:	3601      	adds	r6, #1
 800457e:	e7f2      	b.n	8004566 <__libc_init_array+0x1e>
 8004580:	0800779c 	.word	0x0800779c
 8004584:	0800779c 	.word	0x0800779c
 8004588:	0800779c 	.word	0x0800779c
 800458c:	080077a0 	.word	0x080077a0

08004590 <memset>:
 8004590:	4603      	mov	r3, r0
 8004592:	4402      	add	r2, r0
 8004594:	4293      	cmp	r3, r2
 8004596:	d100      	bne.n	800459a <memset+0xa>
 8004598:	4770      	bx	lr
 800459a:	f803 1b01 	strb.w	r1, [r3], #1
 800459e:	e7f9      	b.n	8004594 <memset+0x4>

080045a0 <__cvt>:
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a6:	461f      	mov	r7, r3
 80045a8:	bfbb      	ittet	lt
 80045aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80045ae:	461f      	movlt	r7, r3
 80045b0:	2300      	movge	r3, #0
 80045b2:	232d      	movlt	r3, #45	; 0x2d
 80045b4:	b088      	sub	sp, #32
 80045b6:	4614      	mov	r4, r2
 80045b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80045ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80045bc:	7013      	strb	r3, [r2, #0]
 80045be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80045c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80045c4:	f023 0820 	bic.w	r8, r3, #32
 80045c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045cc:	d005      	beq.n	80045da <__cvt+0x3a>
 80045ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045d2:	d100      	bne.n	80045d6 <__cvt+0x36>
 80045d4:	3501      	adds	r5, #1
 80045d6:	2302      	movs	r3, #2
 80045d8:	e000      	b.n	80045dc <__cvt+0x3c>
 80045da:	2303      	movs	r3, #3
 80045dc:	aa07      	add	r2, sp, #28
 80045de:	9204      	str	r2, [sp, #16]
 80045e0:	aa06      	add	r2, sp, #24
 80045e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045e6:	e9cd 3500 	strd	r3, r5, [sp]
 80045ea:	4622      	mov	r2, r4
 80045ec:	463b      	mov	r3, r7
 80045ee:	f000 fce3 	bl	8004fb8 <_dtoa_r>
 80045f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045f6:	4606      	mov	r6, r0
 80045f8:	d102      	bne.n	8004600 <__cvt+0x60>
 80045fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045fc:	07db      	lsls	r3, r3, #31
 80045fe:	d522      	bpl.n	8004646 <__cvt+0xa6>
 8004600:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004604:	eb06 0905 	add.w	r9, r6, r5
 8004608:	d110      	bne.n	800462c <__cvt+0x8c>
 800460a:	7833      	ldrb	r3, [r6, #0]
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d10a      	bne.n	8004626 <__cvt+0x86>
 8004610:	2200      	movs	r2, #0
 8004612:	2300      	movs	r3, #0
 8004614:	4620      	mov	r0, r4
 8004616:	4639      	mov	r1, r7
 8004618:	f7fc fa7a 	bl	8000b10 <__aeabi_dcmpeq>
 800461c:	b918      	cbnz	r0, 8004626 <__cvt+0x86>
 800461e:	f1c5 0501 	rsb	r5, r5, #1
 8004622:	f8ca 5000 	str.w	r5, [sl]
 8004626:	f8da 3000 	ldr.w	r3, [sl]
 800462a:	4499      	add	r9, r3
 800462c:	2200      	movs	r2, #0
 800462e:	2300      	movs	r3, #0
 8004630:	4620      	mov	r0, r4
 8004632:	4639      	mov	r1, r7
 8004634:	f7fc fa6c 	bl	8000b10 <__aeabi_dcmpeq>
 8004638:	b108      	cbz	r0, 800463e <__cvt+0x9e>
 800463a:	f8cd 901c 	str.w	r9, [sp, #28]
 800463e:	2230      	movs	r2, #48	; 0x30
 8004640:	9b07      	ldr	r3, [sp, #28]
 8004642:	454b      	cmp	r3, r9
 8004644:	d307      	bcc.n	8004656 <__cvt+0xb6>
 8004646:	4630      	mov	r0, r6
 8004648:	9b07      	ldr	r3, [sp, #28]
 800464a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800464c:	1b9b      	subs	r3, r3, r6
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	b008      	add	sp, #32
 8004652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004656:	1c59      	adds	r1, r3, #1
 8004658:	9107      	str	r1, [sp, #28]
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e7f0      	b.n	8004640 <__cvt+0xa0>

0800465e <__exponent>:
 800465e:	4603      	mov	r3, r0
 8004660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004662:	2900      	cmp	r1, #0
 8004664:	f803 2b02 	strb.w	r2, [r3], #2
 8004668:	bfb6      	itet	lt
 800466a:	222d      	movlt	r2, #45	; 0x2d
 800466c:	222b      	movge	r2, #43	; 0x2b
 800466e:	4249      	neglt	r1, r1
 8004670:	2909      	cmp	r1, #9
 8004672:	7042      	strb	r2, [r0, #1]
 8004674:	dd2b      	ble.n	80046ce <__exponent+0x70>
 8004676:	f10d 0407 	add.w	r4, sp, #7
 800467a:	46a4      	mov	ip, r4
 800467c:	270a      	movs	r7, #10
 800467e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004682:	460a      	mov	r2, r1
 8004684:	46a6      	mov	lr, r4
 8004686:	fb07 1516 	mls	r5, r7, r6, r1
 800468a:	2a63      	cmp	r2, #99	; 0x63
 800468c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004690:	4631      	mov	r1, r6
 8004692:	f104 34ff 	add.w	r4, r4, #4294967295
 8004696:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800469a:	dcf0      	bgt.n	800467e <__exponent+0x20>
 800469c:	3130      	adds	r1, #48	; 0x30
 800469e:	f1ae 0502 	sub.w	r5, lr, #2
 80046a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046a6:	4629      	mov	r1, r5
 80046a8:	1c44      	adds	r4, r0, #1
 80046aa:	4561      	cmp	r1, ip
 80046ac:	d30a      	bcc.n	80046c4 <__exponent+0x66>
 80046ae:	f10d 0209 	add.w	r2, sp, #9
 80046b2:	eba2 020e 	sub.w	r2, r2, lr
 80046b6:	4565      	cmp	r5, ip
 80046b8:	bf88      	it	hi
 80046ba:	2200      	movhi	r2, #0
 80046bc:	4413      	add	r3, r2
 80046be:	1a18      	subs	r0, r3, r0
 80046c0:	b003      	add	sp, #12
 80046c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046cc:	e7ed      	b.n	80046aa <__exponent+0x4c>
 80046ce:	2330      	movs	r3, #48	; 0x30
 80046d0:	3130      	adds	r1, #48	; 0x30
 80046d2:	7083      	strb	r3, [r0, #2]
 80046d4:	70c1      	strb	r1, [r0, #3]
 80046d6:	1d03      	adds	r3, r0, #4
 80046d8:	e7f1      	b.n	80046be <__exponent+0x60>
	...

080046dc <_printf_float>:
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	b091      	sub	sp, #68	; 0x44
 80046e2:	460c      	mov	r4, r1
 80046e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80046e8:	4616      	mov	r6, r2
 80046ea:	461f      	mov	r7, r3
 80046ec:	4605      	mov	r5, r0
 80046ee:	f001 fa51 	bl	8005b94 <_localeconv_r>
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	9309      	str	r3, [sp, #36]	; 0x24
 80046f8:	f7fb fd2a 	bl	8000150 <strlen>
 80046fc:	2300      	movs	r3, #0
 80046fe:	930e      	str	r3, [sp, #56]	; 0x38
 8004700:	f8d8 3000 	ldr.w	r3, [r8]
 8004704:	900a      	str	r0, [sp, #40]	; 0x28
 8004706:	3307      	adds	r3, #7
 8004708:	f023 0307 	bic.w	r3, r3, #7
 800470c:	f103 0208 	add.w	r2, r3, #8
 8004710:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004714:	f8d4 b000 	ldr.w	fp, [r4]
 8004718:	f8c8 2000 	str.w	r2, [r8]
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004724:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004728:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800472c:	930b      	str	r3, [sp, #44]	; 0x2c
 800472e:	f04f 32ff 	mov.w	r2, #4294967295
 8004732:	4640      	mov	r0, r8
 8004734:	4b9c      	ldr	r3, [pc, #624]	; (80049a8 <_printf_float+0x2cc>)
 8004736:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004738:	f7fc fa1c 	bl	8000b74 <__aeabi_dcmpun>
 800473c:	bb70      	cbnz	r0, 800479c <_printf_float+0xc0>
 800473e:	f04f 32ff 	mov.w	r2, #4294967295
 8004742:	4640      	mov	r0, r8
 8004744:	4b98      	ldr	r3, [pc, #608]	; (80049a8 <_printf_float+0x2cc>)
 8004746:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004748:	f7fc f9f6 	bl	8000b38 <__aeabi_dcmple>
 800474c:	bb30      	cbnz	r0, 800479c <_printf_float+0xc0>
 800474e:	2200      	movs	r2, #0
 8004750:	2300      	movs	r3, #0
 8004752:	4640      	mov	r0, r8
 8004754:	4651      	mov	r1, sl
 8004756:	f7fc f9e5 	bl	8000b24 <__aeabi_dcmplt>
 800475a:	b110      	cbz	r0, 8004762 <_printf_float+0x86>
 800475c:	232d      	movs	r3, #45	; 0x2d
 800475e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004762:	4b92      	ldr	r3, [pc, #584]	; (80049ac <_printf_float+0x2d0>)
 8004764:	4892      	ldr	r0, [pc, #584]	; (80049b0 <_printf_float+0x2d4>)
 8004766:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800476a:	bf94      	ite	ls
 800476c:	4698      	movls	r8, r3
 800476e:	4680      	movhi	r8, r0
 8004770:	2303      	movs	r3, #3
 8004772:	f04f 0a00 	mov.w	sl, #0
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	f02b 0304 	bic.w	r3, fp, #4
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	4633      	mov	r3, r6
 8004780:	4621      	mov	r1, r4
 8004782:	4628      	mov	r0, r5
 8004784:	9700      	str	r7, [sp, #0]
 8004786:	aa0f      	add	r2, sp, #60	; 0x3c
 8004788:	f000 f9d4 	bl	8004b34 <_printf_common>
 800478c:	3001      	adds	r0, #1
 800478e:	f040 8090 	bne.w	80048b2 <_printf_float+0x1d6>
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	b011      	add	sp, #68	; 0x44
 8004798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479c:	4642      	mov	r2, r8
 800479e:	4653      	mov	r3, sl
 80047a0:	4640      	mov	r0, r8
 80047a2:	4651      	mov	r1, sl
 80047a4:	f7fc f9e6 	bl	8000b74 <__aeabi_dcmpun>
 80047a8:	b148      	cbz	r0, 80047be <_printf_float+0xe2>
 80047aa:	f1ba 0f00 	cmp.w	sl, #0
 80047ae:	bfb8      	it	lt
 80047b0:	232d      	movlt	r3, #45	; 0x2d
 80047b2:	4880      	ldr	r0, [pc, #512]	; (80049b4 <_printf_float+0x2d8>)
 80047b4:	bfb8      	it	lt
 80047b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047ba:	4b7f      	ldr	r3, [pc, #508]	; (80049b8 <_printf_float+0x2dc>)
 80047bc:	e7d3      	b.n	8004766 <_printf_float+0x8a>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	d142      	bne.n	800484e <_printf_float+0x172>
 80047c8:	2306      	movs	r3, #6
 80047ca:	6063      	str	r3, [r4, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	9206      	str	r2, [sp, #24]
 80047d0:	aa0e      	add	r2, sp, #56	; 0x38
 80047d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80047d6:	aa0d      	add	r2, sp, #52	; 0x34
 80047d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80047dc:	9203      	str	r2, [sp, #12]
 80047de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80047e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	6863      	ldr	r3, [r4, #4]
 80047ea:	4642      	mov	r2, r8
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	4628      	mov	r0, r5
 80047f0:	4653      	mov	r3, sl
 80047f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80047f4:	f7ff fed4 	bl	80045a0 <__cvt>
 80047f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047fa:	4680      	mov	r8, r0
 80047fc:	2947      	cmp	r1, #71	; 0x47
 80047fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004800:	d108      	bne.n	8004814 <_printf_float+0x138>
 8004802:	1cc8      	adds	r0, r1, #3
 8004804:	db02      	blt.n	800480c <_printf_float+0x130>
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	4299      	cmp	r1, r3
 800480a:	dd40      	ble.n	800488e <_printf_float+0x1b2>
 800480c:	f1a9 0902 	sub.w	r9, r9, #2
 8004810:	fa5f f989 	uxtb.w	r9, r9
 8004814:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004818:	d81f      	bhi.n	800485a <_printf_float+0x17e>
 800481a:	464a      	mov	r2, r9
 800481c:	3901      	subs	r1, #1
 800481e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004822:	910d      	str	r1, [sp, #52]	; 0x34
 8004824:	f7ff ff1b 	bl	800465e <__exponent>
 8004828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800482a:	4682      	mov	sl, r0
 800482c:	1813      	adds	r3, r2, r0
 800482e:	2a01      	cmp	r2, #1
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	dc02      	bgt.n	800483a <_printf_float+0x15e>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	07d2      	lsls	r2, r2, #31
 8004838:	d501      	bpl.n	800483e <_printf_float+0x162>
 800483a:	3301      	adds	r3, #1
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004842:	2b00      	cmp	r3, #0
 8004844:	d09b      	beq.n	800477e <_printf_float+0xa2>
 8004846:	232d      	movs	r3, #45	; 0x2d
 8004848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484c:	e797      	b.n	800477e <_printf_float+0xa2>
 800484e:	2947      	cmp	r1, #71	; 0x47
 8004850:	d1bc      	bne.n	80047cc <_printf_float+0xf0>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ba      	bne.n	80047cc <_printf_float+0xf0>
 8004856:	2301      	movs	r3, #1
 8004858:	e7b7      	b.n	80047ca <_printf_float+0xee>
 800485a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800485e:	d118      	bne.n	8004892 <_printf_float+0x1b6>
 8004860:	2900      	cmp	r1, #0
 8004862:	6863      	ldr	r3, [r4, #4]
 8004864:	dd0b      	ble.n	800487e <_printf_float+0x1a2>
 8004866:	6121      	str	r1, [r4, #16]
 8004868:	b913      	cbnz	r3, 8004870 <_printf_float+0x194>
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	07d0      	lsls	r0, r2, #31
 800486e:	d502      	bpl.n	8004876 <_printf_float+0x19a>
 8004870:	3301      	adds	r3, #1
 8004872:	440b      	add	r3, r1
 8004874:	6123      	str	r3, [r4, #16]
 8004876:	f04f 0a00 	mov.w	sl, #0
 800487a:	65a1      	str	r1, [r4, #88]	; 0x58
 800487c:	e7df      	b.n	800483e <_printf_float+0x162>
 800487e:	b913      	cbnz	r3, 8004886 <_printf_float+0x1aa>
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	07d2      	lsls	r2, r2, #31
 8004884:	d501      	bpl.n	800488a <_printf_float+0x1ae>
 8004886:	3302      	adds	r3, #2
 8004888:	e7f4      	b.n	8004874 <_printf_float+0x198>
 800488a:	2301      	movs	r3, #1
 800488c:	e7f2      	b.n	8004874 <_printf_float+0x198>
 800488e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004894:	4299      	cmp	r1, r3
 8004896:	db05      	blt.n	80048a4 <_printf_float+0x1c8>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	6121      	str	r1, [r4, #16]
 800489c:	07d8      	lsls	r0, r3, #31
 800489e:	d5ea      	bpl.n	8004876 <_printf_float+0x19a>
 80048a0:	1c4b      	adds	r3, r1, #1
 80048a2:	e7e7      	b.n	8004874 <_printf_float+0x198>
 80048a4:	2900      	cmp	r1, #0
 80048a6:	bfcc      	ite	gt
 80048a8:	2201      	movgt	r2, #1
 80048aa:	f1c1 0202 	rsble	r2, r1, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	e7e0      	b.n	8004874 <_printf_float+0x198>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	055a      	lsls	r2, r3, #21
 80048b6:	d407      	bmi.n	80048c8 <_printf_float+0x1ec>
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	4642      	mov	r2, r8
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	d12b      	bne.n	800491e <_printf_float+0x242>
 80048c6:	e764      	b.n	8004792 <_printf_float+0xb6>
 80048c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048cc:	f240 80dd 	bls.w	8004a8a <_printf_float+0x3ae>
 80048d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048d4:	2200      	movs	r2, #0
 80048d6:	2300      	movs	r3, #0
 80048d8:	f7fc f91a 	bl	8000b10 <__aeabi_dcmpeq>
 80048dc:	2800      	cmp	r0, #0
 80048de:	d033      	beq.n	8004948 <_printf_float+0x26c>
 80048e0:	2301      	movs	r3, #1
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	4a35      	ldr	r2, [pc, #212]	; (80049bc <_printf_float+0x2e0>)
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	f43f af51 	beq.w	8004792 <_printf_float+0xb6>
 80048f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048f4:	429a      	cmp	r2, r3
 80048f6:	db02      	blt.n	80048fe <_printf_float+0x222>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	07d8      	lsls	r0, r3, #31
 80048fc:	d50f      	bpl.n	800491e <_printf_float+0x242>
 80048fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004902:	4631      	mov	r1, r6
 8004904:	4628      	mov	r0, r5
 8004906:	47b8      	blx	r7
 8004908:	3001      	adds	r0, #1
 800490a:	f43f af42 	beq.w	8004792 <_printf_float+0xb6>
 800490e:	f04f 0800 	mov.w	r8, #0
 8004912:	f104 091a 	add.w	r9, r4, #26
 8004916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004918:	3b01      	subs	r3, #1
 800491a:	4543      	cmp	r3, r8
 800491c:	dc09      	bgt.n	8004932 <_printf_float+0x256>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	079b      	lsls	r3, r3, #30
 8004922:	f100 8102 	bmi.w	8004b2a <_printf_float+0x44e>
 8004926:	68e0      	ldr	r0, [r4, #12]
 8004928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800492a:	4298      	cmp	r0, r3
 800492c:	bfb8      	it	lt
 800492e:	4618      	movlt	r0, r3
 8004930:	e731      	b.n	8004796 <_printf_float+0xba>
 8004932:	2301      	movs	r3, #1
 8004934:	464a      	mov	r2, r9
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	f43f af28 	beq.w	8004792 <_printf_float+0xb6>
 8004942:	f108 0801 	add.w	r8, r8, #1
 8004946:	e7e6      	b.n	8004916 <_printf_float+0x23a>
 8004948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	dc38      	bgt.n	80049c0 <_printf_float+0x2e4>
 800494e:	2301      	movs	r3, #1
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <_printf_float+0x2e0>)
 8004956:	47b8      	blx	r7
 8004958:	3001      	adds	r0, #1
 800495a:	f43f af1a 	beq.w	8004792 <_printf_float+0xb6>
 800495e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004962:	4313      	orrs	r3, r2
 8004964:	d102      	bne.n	800496c <_printf_float+0x290>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	07d9      	lsls	r1, r3, #31
 800496a:	d5d8      	bpl.n	800491e <_printf_float+0x242>
 800496c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f af0b 	beq.w	8004792 <_printf_float+0xb6>
 800497c:	f04f 0900 	mov.w	r9, #0
 8004980:	f104 0a1a 	add.w	sl, r4, #26
 8004984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004986:	425b      	negs	r3, r3
 8004988:	454b      	cmp	r3, r9
 800498a:	dc01      	bgt.n	8004990 <_printf_float+0x2b4>
 800498c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800498e:	e794      	b.n	80048ba <_printf_float+0x1de>
 8004990:	2301      	movs	r3, #1
 8004992:	4652      	mov	r2, sl
 8004994:	4631      	mov	r1, r6
 8004996:	4628      	mov	r0, r5
 8004998:	47b8      	blx	r7
 800499a:	3001      	adds	r0, #1
 800499c:	f43f aef9 	beq.w	8004792 <_printf_float+0xb6>
 80049a0:	f109 0901 	add.w	r9, r9, #1
 80049a4:	e7ee      	b.n	8004984 <_printf_float+0x2a8>
 80049a6:	bf00      	nop
 80049a8:	7fefffff 	.word	0x7fefffff
 80049ac:	080073c4 	.word	0x080073c4
 80049b0:	080073c8 	.word	0x080073c8
 80049b4:	080073d0 	.word	0x080073d0
 80049b8:	080073cc 	.word	0x080073cc
 80049bc:	080073d4 	.word	0x080073d4
 80049c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049c4:	429a      	cmp	r2, r3
 80049c6:	bfa8      	it	ge
 80049c8:	461a      	movge	r2, r3
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	4691      	mov	r9, r2
 80049ce:	dc37      	bgt.n	8004a40 <_printf_float+0x364>
 80049d0:	f04f 0b00 	mov.w	fp, #0
 80049d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049d8:	f104 021a 	add.w	r2, r4, #26
 80049dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049e0:	ebaa 0309 	sub.w	r3, sl, r9
 80049e4:	455b      	cmp	r3, fp
 80049e6:	dc33      	bgt.n	8004a50 <_printf_float+0x374>
 80049e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049ec:	429a      	cmp	r2, r3
 80049ee:	db3b      	blt.n	8004a68 <_printf_float+0x38c>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	07da      	lsls	r2, r3, #31
 80049f4:	d438      	bmi.n	8004a68 <_printf_float+0x38c>
 80049f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049fa:	eba3 020a 	sub.w	r2, r3, sl
 80049fe:	eba3 0901 	sub.w	r9, r3, r1
 8004a02:	4591      	cmp	r9, r2
 8004a04:	bfa8      	it	ge
 8004a06:	4691      	movge	r9, r2
 8004a08:	f1b9 0f00 	cmp.w	r9, #0
 8004a0c:	dc34      	bgt.n	8004a78 <_printf_float+0x39c>
 8004a0e:	f04f 0800 	mov.w	r8, #0
 8004a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a16:	f104 0a1a 	add.w	sl, r4, #26
 8004a1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	eba3 0309 	sub.w	r3, r3, r9
 8004a24:	4543      	cmp	r3, r8
 8004a26:	f77f af7a 	ble.w	800491e <_printf_float+0x242>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4652      	mov	r2, sl
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	f43f aeac 	beq.w	8004792 <_printf_float+0xb6>
 8004a3a:	f108 0801 	add.w	r8, r8, #1
 8004a3e:	e7ec      	b.n	8004a1a <_printf_float+0x33e>
 8004a40:	4613      	mov	r3, r2
 8004a42:	4631      	mov	r1, r6
 8004a44:	4642      	mov	r2, r8
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b8      	blx	r7
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d1c0      	bne.n	80049d0 <_printf_float+0x2f4>
 8004a4e:	e6a0      	b.n	8004792 <_printf_float+0xb6>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f ae99 	beq.w	8004792 <_printf_float+0xb6>
 8004a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a62:	f10b 0b01 	add.w	fp, fp, #1
 8004a66:	e7b9      	b.n	80049dc <_printf_float+0x300>
 8004a68:	4631      	mov	r1, r6
 8004a6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	d1bf      	bne.n	80049f6 <_printf_float+0x31a>
 8004a76:	e68c      	b.n	8004792 <_printf_float+0xb6>
 8004a78:	464b      	mov	r3, r9
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	eb08 020a 	add.w	r2, r8, sl
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	d1c2      	bne.n	8004a0e <_printf_float+0x332>
 8004a88:	e683      	b.n	8004792 <_printf_float+0xb6>
 8004a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a8c:	2a01      	cmp	r2, #1
 8004a8e:	dc01      	bgt.n	8004a94 <_printf_float+0x3b8>
 8004a90:	07db      	lsls	r3, r3, #31
 8004a92:	d537      	bpl.n	8004b04 <_printf_float+0x428>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4642      	mov	r2, r8
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	47b8      	blx	r7
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f43f ae77 	beq.w	8004792 <_printf_float+0xb6>
 8004aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b8      	blx	r7
 8004aae:	3001      	adds	r0, #1
 8004ab0:	f43f ae6f 	beq.w	8004792 <_printf_float+0xb6>
 8004ab4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2300      	movs	r3, #0
 8004abc:	f7fc f828 	bl	8000b10 <__aeabi_dcmpeq>
 8004ac0:	b9d8      	cbnz	r0, 8004afa <_printf_float+0x41e>
 8004ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ac4:	f108 0201 	add.w	r2, r8, #1
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d10e      	bne.n	8004af2 <_printf_float+0x416>
 8004ad4:	e65d      	b.n	8004792 <_printf_float+0xb6>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	464a      	mov	r2, r9
 8004ada:	4631      	mov	r1, r6
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b8      	blx	r7
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	f43f ae56 	beq.w	8004792 <_printf_float+0xb6>
 8004ae6:	f108 0801 	add.w	r8, r8, #1
 8004aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aec:	3b01      	subs	r3, #1
 8004aee:	4543      	cmp	r3, r8
 8004af0:	dcf1      	bgt.n	8004ad6 <_printf_float+0x3fa>
 8004af2:	4653      	mov	r3, sl
 8004af4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004af8:	e6e0      	b.n	80048bc <_printf_float+0x1e0>
 8004afa:	f04f 0800 	mov.w	r8, #0
 8004afe:	f104 091a 	add.w	r9, r4, #26
 8004b02:	e7f2      	b.n	8004aea <_printf_float+0x40e>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4642      	mov	r2, r8
 8004b08:	e7df      	b.n	8004aca <_printf_float+0x3ee>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	464a      	mov	r2, r9
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4628      	mov	r0, r5
 8004b12:	47b8      	blx	r7
 8004b14:	3001      	adds	r0, #1
 8004b16:	f43f ae3c 	beq.w	8004792 <_printf_float+0xb6>
 8004b1a:	f108 0801 	add.w	r8, r8, #1
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b22:	1a5b      	subs	r3, r3, r1
 8004b24:	4543      	cmp	r3, r8
 8004b26:	dcf0      	bgt.n	8004b0a <_printf_float+0x42e>
 8004b28:	e6fd      	b.n	8004926 <_printf_float+0x24a>
 8004b2a:	f04f 0800 	mov.w	r8, #0
 8004b2e:	f104 0919 	add.w	r9, r4, #25
 8004b32:	e7f4      	b.n	8004b1e <_printf_float+0x442>

08004b34 <_printf_common>:
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	4616      	mov	r6, r2
 8004b3a:	4699      	mov	r9, r3
 8004b3c:	688a      	ldr	r2, [r1, #8]
 8004b3e:	690b      	ldr	r3, [r1, #16]
 8004b40:	4607      	mov	r7, r0
 8004b42:	4293      	cmp	r3, r2
 8004b44:	bfb8      	it	lt
 8004b46:	4613      	movlt	r3, r2
 8004b48:	6033      	str	r3, [r6, #0]
 8004b4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b4e:	460c      	mov	r4, r1
 8004b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b54:	b10a      	cbz	r2, 8004b5a <_printf_common+0x26>
 8004b56:	3301      	adds	r3, #1
 8004b58:	6033      	str	r3, [r6, #0]
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	0699      	lsls	r1, r3, #26
 8004b5e:	bf42      	ittt	mi
 8004b60:	6833      	ldrmi	r3, [r6, #0]
 8004b62:	3302      	addmi	r3, #2
 8004b64:	6033      	strmi	r3, [r6, #0]
 8004b66:	6825      	ldr	r5, [r4, #0]
 8004b68:	f015 0506 	ands.w	r5, r5, #6
 8004b6c:	d106      	bne.n	8004b7c <_printf_common+0x48>
 8004b6e:	f104 0a19 	add.w	sl, r4, #25
 8004b72:	68e3      	ldr	r3, [r4, #12]
 8004b74:	6832      	ldr	r2, [r6, #0]
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	42ab      	cmp	r3, r5
 8004b7a:	dc28      	bgt.n	8004bce <_printf_common+0x9a>
 8004b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b80:	1e13      	subs	r3, r2, #0
 8004b82:	6822      	ldr	r2, [r4, #0]
 8004b84:	bf18      	it	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	0692      	lsls	r2, r2, #26
 8004b8a:	d42d      	bmi.n	8004be8 <_printf_common+0xb4>
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d020      	beq.n	8004bdc <_printf_common+0xa8>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	68e5      	ldr	r5, [r4, #12]
 8004b9e:	f003 0306 	and.w	r3, r3, #6
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	bf18      	it	ne
 8004ba6:	2500      	movne	r5, #0
 8004ba8:	6832      	ldr	r2, [r6, #0]
 8004baa:	f04f 0600 	mov.w	r6, #0
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	bf08      	it	eq
 8004bb2:	1aad      	subeq	r5, r5, r2
 8004bb4:	6922      	ldr	r2, [r4, #16]
 8004bb6:	bf08      	it	eq
 8004bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bfc4      	itt	gt
 8004bc0:	1a9b      	subgt	r3, r3, r2
 8004bc2:	18ed      	addgt	r5, r5, r3
 8004bc4:	341a      	adds	r4, #26
 8004bc6:	42b5      	cmp	r5, r6
 8004bc8:	d11a      	bne.n	8004c00 <_printf_common+0xcc>
 8004bca:	2000      	movs	r0, #0
 8004bcc:	e008      	b.n	8004be0 <_printf_common+0xac>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4652      	mov	r2, sl
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	47c0      	blx	r8
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d103      	bne.n	8004be4 <_printf_common+0xb0>
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be4:	3501      	adds	r5, #1
 8004be6:	e7c4      	b.n	8004b72 <_printf_common+0x3e>
 8004be8:	2030      	movs	r0, #48	; 0x30
 8004bea:	18e1      	adds	r1, r4, r3
 8004bec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bf6:	4422      	add	r2, r4
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bfe:	e7c5      	b.n	8004b8c <_printf_common+0x58>
 8004c00:	2301      	movs	r3, #1
 8004c02:	4622      	mov	r2, r4
 8004c04:	4649      	mov	r1, r9
 8004c06:	4638      	mov	r0, r7
 8004c08:	47c0      	blx	r8
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d0e6      	beq.n	8004bdc <_printf_common+0xa8>
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7d9      	b.n	8004bc6 <_printf_common+0x92>
	...

08004c14 <_printf_i>:
 8004c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	7e0f      	ldrb	r7, [r1, #24]
 8004c1a:	4691      	mov	r9, r2
 8004c1c:	2f78      	cmp	r7, #120	; 0x78
 8004c1e:	4680      	mov	r8, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	469a      	mov	sl, r3
 8004c24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c2a:	d807      	bhi.n	8004c3c <_printf_i+0x28>
 8004c2c:	2f62      	cmp	r7, #98	; 0x62
 8004c2e:	d80a      	bhi.n	8004c46 <_printf_i+0x32>
 8004c30:	2f00      	cmp	r7, #0
 8004c32:	f000 80d9 	beq.w	8004de8 <_printf_i+0x1d4>
 8004c36:	2f58      	cmp	r7, #88	; 0x58
 8004c38:	f000 80a4 	beq.w	8004d84 <_printf_i+0x170>
 8004c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c44:	e03a      	b.n	8004cbc <_printf_i+0xa8>
 8004c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c4a:	2b15      	cmp	r3, #21
 8004c4c:	d8f6      	bhi.n	8004c3c <_printf_i+0x28>
 8004c4e:	a101      	add	r1, pc, #4	; (adr r1, 8004c54 <_printf_i+0x40>)
 8004c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c54:	08004cad 	.word	0x08004cad
 8004c58:	08004cc1 	.word	0x08004cc1
 8004c5c:	08004c3d 	.word	0x08004c3d
 8004c60:	08004c3d 	.word	0x08004c3d
 8004c64:	08004c3d 	.word	0x08004c3d
 8004c68:	08004c3d 	.word	0x08004c3d
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004c3d 	.word	0x08004c3d
 8004c74:	08004c3d 	.word	0x08004c3d
 8004c78:	08004c3d 	.word	0x08004c3d
 8004c7c:	08004c3d 	.word	0x08004c3d
 8004c80:	08004dcf 	.word	0x08004dcf
 8004c84:	08004cf1 	.word	0x08004cf1
 8004c88:	08004db1 	.word	0x08004db1
 8004c8c:	08004c3d 	.word	0x08004c3d
 8004c90:	08004c3d 	.word	0x08004c3d
 8004c94:	08004df1 	.word	0x08004df1
 8004c98:	08004c3d 	.word	0x08004c3d
 8004c9c:	08004cf1 	.word	0x08004cf1
 8004ca0:	08004c3d 	.word	0x08004c3d
 8004ca4:	08004c3d 	.word	0x08004c3d
 8004ca8:	08004db9 	.word	0x08004db9
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	1d1a      	adds	r2, r3, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	602a      	str	r2, [r5, #0]
 8004cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0a4      	b.n	8004e0a <_printf_i+0x1f6>
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	6829      	ldr	r1, [r5, #0]
 8004cc4:	0606      	lsls	r6, r0, #24
 8004cc6:	f101 0304 	add.w	r3, r1, #4
 8004cca:	d50a      	bpl.n	8004ce2 <_printf_i+0xce>
 8004ccc:	680e      	ldr	r6, [r1, #0]
 8004cce:	602b      	str	r3, [r5, #0]
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	da03      	bge.n	8004cdc <_printf_i+0xc8>
 8004cd4:	232d      	movs	r3, #45	; 0x2d
 8004cd6:	4276      	negs	r6, r6
 8004cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cdc:	230a      	movs	r3, #10
 8004cde:	485e      	ldr	r0, [pc, #376]	; (8004e58 <_printf_i+0x244>)
 8004ce0:	e019      	b.n	8004d16 <_printf_i+0x102>
 8004ce2:	680e      	ldr	r6, [r1, #0]
 8004ce4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	bf18      	it	ne
 8004cec:	b236      	sxthne	r6, r6
 8004cee:	e7ef      	b.n	8004cd0 <_printf_i+0xbc>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1d19      	adds	r1, r3, #4
 8004cf6:	6029      	str	r1, [r5, #0]
 8004cf8:	0601      	lsls	r1, r0, #24
 8004cfa:	d501      	bpl.n	8004d00 <_printf_i+0xec>
 8004cfc:	681e      	ldr	r6, [r3, #0]
 8004cfe:	e002      	b.n	8004d06 <_printf_i+0xf2>
 8004d00:	0646      	lsls	r6, r0, #25
 8004d02:	d5fb      	bpl.n	8004cfc <_printf_i+0xe8>
 8004d04:	881e      	ldrh	r6, [r3, #0]
 8004d06:	2f6f      	cmp	r7, #111	; 0x6f
 8004d08:	bf0c      	ite	eq
 8004d0a:	2308      	moveq	r3, #8
 8004d0c:	230a      	movne	r3, #10
 8004d0e:	4852      	ldr	r0, [pc, #328]	; (8004e58 <_printf_i+0x244>)
 8004d10:	2100      	movs	r1, #0
 8004d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d16:	6865      	ldr	r5, [r4, #4]
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	bfa8      	it	ge
 8004d1c:	6821      	ldrge	r1, [r4, #0]
 8004d1e:	60a5      	str	r5, [r4, #8]
 8004d20:	bfa4      	itt	ge
 8004d22:	f021 0104 	bicge.w	r1, r1, #4
 8004d26:	6021      	strge	r1, [r4, #0]
 8004d28:	b90e      	cbnz	r6, 8004d2e <_printf_i+0x11a>
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	d04d      	beq.n	8004dca <_printf_i+0x1b6>
 8004d2e:	4615      	mov	r5, r2
 8004d30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d34:	fb03 6711 	mls	r7, r3, r1, r6
 8004d38:	5dc7      	ldrb	r7, [r0, r7]
 8004d3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d3e:	4637      	mov	r7, r6
 8004d40:	42bb      	cmp	r3, r7
 8004d42:	460e      	mov	r6, r1
 8004d44:	d9f4      	bls.n	8004d30 <_printf_i+0x11c>
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d10b      	bne.n	8004d62 <_printf_i+0x14e>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	07de      	lsls	r6, r3, #31
 8004d4e:	d508      	bpl.n	8004d62 <_printf_i+0x14e>
 8004d50:	6923      	ldr	r3, [r4, #16]
 8004d52:	6861      	ldr	r1, [r4, #4]
 8004d54:	4299      	cmp	r1, r3
 8004d56:	bfde      	ittt	le
 8004d58:	2330      	movle	r3, #48	; 0x30
 8004d5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d62:	1b52      	subs	r2, r2, r5
 8004d64:	6122      	str	r2, [r4, #16]
 8004d66:	464b      	mov	r3, r9
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f8cd a000 	str.w	sl, [sp]
 8004d70:	aa03      	add	r2, sp, #12
 8004d72:	f7ff fedf 	bl	8004b34 <_printf_common>
 8004d76:	3001      	adds	r0, #1
 8004d78:	d14c      	bne.n	8004e14 <_printf_i+0x200>
 8004d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7e:	b004      	add	sp, #16
 8004d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d84:	4834      	ldr	r0, [pc, #208]	; (8004e58 <_printf_i+0x244>)
 8004d86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d8a:	6829      	ldr	r1, [r5, #0]
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d92:	6029      	str	r1, [r5, #0]
 8004d94:	061d      	lsls	r5, r3, #24
 8004d96:	d514      	bpl.n	8004dc2 <_printf_i+0x1ae>
 8004d98:	07df      	lsls	r7, r3, #31
 8004d9a:	bf44      	itt	mi
 8004d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004da0:	6023      	strmi	r3, [r4, #0]
 8004da2:	b91e      	cbnz	r6, 8004dac <_printf_i+0x198>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	2310      	movs	r3, #16
 8004dae:	e7af      	b.n	8004d10 <_printf_i+0xfc>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	f043 0320 	orr.w	r3, r3, #32
 8004db6:	6023      	str	r3, [r4, #0]
 8004db8:	2378      	movs	r3, #120	; 0x78
 8004dba:	4828      	ldr	r0, [pc, #160]	; (8004e5c <_printf_i+0x248>)
 8004dbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dc0:	e7e3      	b.n	8004d8a <_printf_i+0x176>
 8004dc2:	0659      	lsls	r1, r3, #25
 8004dc4:	bf48      	it	mi
 8004dc6:	b2b6      	uxthmi	r6, r6
 8004dc8:	e7e6      	b.n	8004d98 <_printf_i+0x184>
 8004dca:	4615      	mov	r5, r2
 8004dcc:	e7bb      	b.n	8004d46 <_printf_i+0x132>
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	6826      	ldr	r6, [r4, #0]
 8004dd2:	1d18      	adds	r0, r3, #4
 8004dd4:	6961      	ldr	r1, [r4, #20]
 8004dd6:	6028      	str	r0, [r5, #0]
 8004dd8:	0635      	lsls	r5, r6, #24
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	d501      	bpl.n	8004de2 <_printf_i+0x1ce>
 8004dde:	6019      	str	r1, [r3, #0]
 8004de0:	e002      	b.n	8004de8 <_printf_i+0x1d4>
 8004de2:	0670      	lsls	r0, r6, #25
 8004de4:	d5fb      	bpl.n	8004dde <_printf_i+0x1ca>
 8004de6:	8019      	strh	r1, [r3, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	4615      	mov	r5, r2
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	e7ba      	b.n	8004d66 <_printf_i+0x152>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	2100      	movs	r1, #0
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	602a      	str	r2, [r5, #0]
 8004df8:	681d      	ldr	r5, [r3, #0]
 8004dfa:	6862      	ldr	r2, [r4, #4]
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f000 fed5 	bl	8005bac <memchr>
 8004e02:	b108      	cbz	r0, 8004e08 <_printf_i+0x1f4>
 8004e04:	1b40      	subs	r0, r0, r5
 8004e06:	6060      	str	r0, [r4, #4]
 8004e08:	6863      	ldr	r3, [r4, #4]
 8004e0a:	6123      	str	r3, [r4, #16]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e12:	e7a8      	b.n	8004d66 <_printf_i+0x152>
 8004e14:	462a      	mov	r2, r5
 8004e16:	4649      	mov	r1, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	47d0      	blx	sl
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d0ab      	beq.n	8004d7a <_printf_i+0x166>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	079b      	lsls	r3, r3, #30
 8004e26:	d413      	bmi.n	8004e50 <_printf_i+0x23c>
 8004e28:	68e0      	ldr	r0, [r4, #12]
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	4298      	cmp	r0, r3
 8004e2e:	bfb8      	it	lt
 8004e30:	4618      	movlt	r0, r3
 8004e32:	e7a4      	b.n	8004d7e <_printf_i+0x16a>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4632      	mov	r2, r6
 8004e38:	4649      	mov	r1, r9
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	47d0      	blx	sl
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d09b      	beq.n	8004d7a <_printf_i+0x166>
 8004e42:	3501      	adds	r5, #1
 8004e44:	68e3      	ldr	r3, [r4, #12]
 8004e46:	9903      	ldr	r1, [sp, #12]
 8004e48:	1a5b      	subs	r3, r3, r1
 8004e4a:	42ab      	cmp	r3, r5
 8004e4c:	dcf2      	bgt.n	8004e34 <_printf_i+0x220>
 8004e4e:	e7eb      	b.n	8004e28 <_printf_i+0x214>
 8004e50:	2500      	movs	r5, #0
 8004e52:	f104 0619 	add.w	r6, r4, #25
 8004e56:	e7f5      	b.n	8004e44 <_printf_i+0x230>
 8004e58:	080073d6 	.word	0x080073d6
 8004e5c:	080073e7 	.word	0x080073e7

08004e60 <siprintf>:
 8004e60:	b40e      	push	{r1, r2, r3}
 8004e62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e66:	b500      	push	{lr}
 8004e68:	b09c      	sub	sp, #112	; 0x70
 8004e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e6c:	9002      	str	r0, [sp, #8]
 8004e6e:	9006      	str	r0, [sp, #24]
 8004e70:	9107      	str	r1, [sp, #28]
 8004e72:	9104      	str	r1, [sp, #16]
 8004e74:	4808      	ldr	r0, [pc, #32]	; (8004e98 <siprintf+0x38>)
 8004e76:	4909      	ldr	r1, [pc, #36]	; (8004e9c <siprintf+0x3c>)
 8004e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e7c:	9105      	str	r1, [sp, #20]
 8004e7e:	6800      	ldr	r0, [r0, #0]
 8004e80:	a902      	add	r1, sp, #8
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	f001 fb7c 	bl	8006580 <_svfiprintf_r>
 8004e88:	2200      	movs	r2, #0
 8004e8a:	9b02      	ldr	r3, [sp, #8]
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	b01c      	add	sp, #112	; 0x70
 8004e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e94:	b003      	add	sp, #12
 8004e96:	4770      	bx	lr
 8004e98:	2000000c 	.word	0x2000000c
 8004e9c:	ffff0208 	.word	0xffff0208

08004ea0 <quorem>:
 8004ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	6903      	ldr	r3, [r0, #16]
 8004ea6:	690c      	ldr	r4, [r1, #16]
 8004ea8:	4607      	mov	r7, r0
 8004eaa:	42a3      	cmp	r3, r4
 8004eac:	f2c0 8082 	blt.w	8004fb4 <quorem+0x114>
 8004eb0:	3c01      	subs	r4, #1
 8004eb2:	f100 0514 	add.w	r5, r0, #20
 8004eb6:	f101 0814 	add.w	r8, r1, #20
 8004eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ec4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ed0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ed4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ed8:	d331      	bcc.n	8004f3e <quorem+0x9e>
 8004eda:	f04f 0e00 	mov.w	lr, #0
 8004ede:	4640      	mov	r0, r8
 8004ee0:	46ac      	mov	ip, r5
 8004ee2:	46f2      	mov	sl, lr
 8004ee4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ee8:	b293      	uxth	r3, r2
 8004eea:	fb06 e303 	mla	r3, r6, r3, lr
 8004eee:	0c12      	lsrs	r2, r2, #16
 8004ef0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	fb06 e202 	mla	r2, r6, r2, lr
 8004efa:	ebaa 0303 	sub.w	r3, sl, r3
 8004efe:	f8dc a000 	ldr.w	sl, [ip]
 8004f02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f06:	fa1f fa8a 	uxth.w	sl, sl
 8004f0a:	4453      	add	r3, sl
 8004f0c:	f8dc a000 	ldr.w	sl, [ip]
 8004f10:	b292      	uxth	r2, r2
 8004f12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f20:	4581      	cmp	r9, r0
 8004f22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f26:	f84c 3b04 	str.w	r3, [ip], #4
 8004f2a:	d2db      	bcs.n	8004ee4 <quorem+0x44>
 8004f2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f30:	b92b      	cbnz	r3, 8004f3e <quorem+0x9e>
 8004f32:	9b01      	ldr	r3, [sp, #4]
 8004f34:	3b04      	subs	r3, #4
 8004f36:	429d      	cmp	r5, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	d32f      	bcc.n	8004f9c <quorem+0xfc>
 8004f3c:	613c      	str	r4, [r7, #16]
 8004f3e:	4638      	mov	r0, r7
 8004f40:	f001 f8ce 	bl	80060e0 <__mcmp>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	db25      	blt.n	8004f94 <quorem+0xf4>
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f04f 0c00 	mov.w	ip, #0
 8004f4e:	3601      	adds	r6, #1
 8004f50:	f858 1b04 	ldr.w	r1, [r8], #4
 8004f54:	f8d0 e000 	ldr.w	lr, [r0]
 8004f58:	b28b      	uxth	r3, r1
 8004f5a:	ebac 0303 	sub.w	r3, ip, r3
 8004f5e:	fa1f f28e 	uxth.w	r2, lr
 8004f62:	4413      	add	r3, r2
 8004f64:	0c0a      	lsrs	r2, r1, #16
 8004f66:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f74:	45c1      	cmp	r9, r8
 8004f76:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f7a:	f840 3b04 	str.w	r3, [r0], #4
 8004f7e:	d2e7      	bcs.n	8004f50 <quorem+0xb0>
 8004f80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f88:	b922      	cbnz	r2, 8004f94 <quorem+0xf4>
 8004f8a:	3b04      	subs	r3, #4
 8004f8c:	429d      	cmp	r5, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	d30a      	bcc.n	8004fa8 <quorem+0x108>
 8004f92:	613c      	str	r4, [r7, #16]
 8004f94:	4630      	mov	r0, r6
 8004f96:	b003      	add	sp, #12
 8004f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	2a00      	cmp	r2, #0
 8004fa2:	d1cb      	bne.n	8004f3c <quorem+0x9c>
 8004fa4:	3c01      	subs	r4, #1
 8004fa6:	e7c6      	b.n	8004f36 <quorem+0x96>
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	3b04      	subs	r3, #4
 8004fac:	2a00      	cmp	r2, #0
 8004fae:	d1f0      	bne.n	8004f92 <quorem+0xf2>
 8004fb0:	3c01      	subs	r4, #1
 8004fb2:	e7eb      	b.n	8004f8c <quorem+0xec>
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	e7ee      	b.n	8004f96 <quorem+0xf6>

08004fb8 <_dtoa_r>:
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	4616      	mov	r6, r2
 8004fbe:	461f      	mov	r7, r3
 8004fc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004fc2:	b099      	sub	sp, #100	; 0x64
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004fca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004fce:	b974      	cbnz	r4, 8004fee <_dtoa_r+0x36>
 8004fd0:	2010      	movs	r0, #16
 8004fd2:	f000 fde3 	bl	8005b9c <malloc>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6268      	str	r0, [r5, #36]	; 0x24
 8004fda:	b920      	cbnz	r0, 8004fe6 <_dtoa_r+0x2e>
 8004fdc:	21ea      	movs	r1, #234	; 0xea
 8004fde:	4ba8      	ldr	r3, [pc, #672]	; (8005280 <_dtoa_r+0x2c8>)
 8004fe0:	48a8      	ldr	r0, [pc, #672]	; (8005284 <_dtoa_r+0x2cc>)
 8004fe2:	f001 fbdd 	bl	80067a0 <__assert_func>
 8004fe6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fea:	6004      	str	r4, [r0, #0]
 8004fec:	60c4      	str	r4, [r0, #12]
 8004fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ff0:	6819      	ldr	r1, [r3, #0]
 8004ff2:	b151      	cbz	r1, 800500a <_dtoa_r+0x52>
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4093      	lsls	r3, r2
 8004ffa:	604a      	str	r2, [r1, #4]
 8004ffc:	608b      	str	r3, [r1, #8]
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fe30 	bl	8005c64 <_Bfree>
 8005004:	2200      	movs	r2, #0
 8005006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	1e3b      	subs	r3, r7, #0
 800500c:	bfaf      	iteee	ge
 800500e:	2300      	movge	r3, #0
 8005010:	2201      	movlt	r2, #1
 8005012:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005016:	9305      	strlt	r3, [sp, #20]
 8005018:	bfa8      	it	ge
 800501a:	f8c8 3000 	strge.w	r3, [r8]
 800501e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005022:	4b99      	ldr	r3, [pc, #612]	; (8005288 <_dtoa_r+0x2d0>)
 8005024:	bfb8      	it	lt
 8005026:	f8c8 2000 	strlt.w	r2, [r8]
 800502a:	ea33 0309 	bics.w	r3, r3, r9
 800502e:	d119      	bne.n	8005064 <_dtoa_r+0xac>
 8005030:	f242 730f 	movw	r3, #9999	; 0x270f
 8005034:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800503c:	4333      	orrs	r3, r6
 800503e:	f000 857f 	beq.w	8005b40 <_dtoa_r+0xb88>
 8005042:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005044:	b953      	cbnz	r3, 800505c <_dtoa_r+0xa4>
 8005046:	4b91      	ldr	r3, [pc, #580]	; (800528c <_dtoa_r+0x2d4>)
 8005048:	e022      	b.n	8005090 <_dtoa_r+0xd8>
 800504a:	4b91      	ldr	r3, [pc, #580]	; (8005290 <_dtoa_r+0x2d8>)
 800504c:	9303      	str	r3, [sp, #12]
 800504e:	3308      	adds	r3, #8
 8005050:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	9803      	ldr	r0, [sp, #12]
 8005056:	b019      	add	sp, #100	; 0x64
 8005058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505c:	4b8b      	ldr	r3, [pc, #556]	; (800528c <_dtoa_r+0x2d4>)
 800505e:	9303      	str	r3, [sp, #12]
 8005060:	3303      	adds	r3, #3
 8005062:	e7f5      	b.n	8005050 <_dtoa_r+0x98>
 8005064:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005068:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800506c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005070:	2200      	movs	r2, #0
 8005072:	2300      	movs	r3, #0
 8005074:	f7fb fd4c 	bl	8000b10 <__aeabi_dcmpeq>
 8005078:	4680      	mov	r8, r0
 800507a:	b158      	cbz	r0, 8005094 <_dtoa_r+0xdc>
 800507c:	2301      	movs	r3, #1
 800507e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8558 	beq.w	8005b3a <_dtoa_r+0xb82>
 800508a:	4882      	ldr	r0, [pc, #520]	; (8005294 <_dtoa_r+0x2dc>)
 800508c:	6018      	str	r0, [r3, #0]
 800508e:	1e43      	subs	r3, r0, #1
 8005090:	9303      	str	r3, [sp, #12]
 8005092:	e7df      	b.n	8005054 <_dtoa_r+0x9c>
 8005094:	ab16      	add	r3, sp, #88	; 0x58
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	ab17      	add	r3, sp, #92	; 0x5c
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	4628      	mov	r0, r5
 800509e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050a2:	f001 f8c5 	bl	8006230 <__d2b>
 80050a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80050aa:	4683      	mov	fp, r0
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d07f      	beq.n	80051b0 <_dtoa_r+0x1f8>
 80050b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80050c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80050c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80050ca:	2200      	movs	r2, #0
 80050cc:	4b72      	ldr	r3, [pc, #456]	; (8005298 <_dtoa_r+0x2e0>)
 80050ce:	f7fb f8ff 	bl	80002d0 <__aeabi_dsub>
 80050d2:	a365      	add	r3, pc, #404	; (adr r3, 8005268 <_dtoa_r+0x2b0>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb fab2 	bl	8000640 <__aeabi_dmul>
 80050dc:	a364      	add	r3, pc, #400	; (adr r3, 8005270 <_dtoa_r+0x2b8>)
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f7fb f8f7 	bl	80002d4 <__adddf3>
 80050e6:	4606      	mov	r6, r0
 80050e8:	4620      	mov	r0, r4
 80050ea:	460f      	mov	r7, r1
 80050ec:	f7fb fa3e 	bl	800056c <__aeabi_i2d>
 80050f0:	a361      	add	r3, pc, #388	; (adr r3, 8005278 <_dtoa_r+0x2c0>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f7fb faa3 	bl	8000640 <__aeabi_dmul>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4630      	mov	r0, r6
 8005100:	4639      	mov	r1, r7
 8005102:	f7fb f8e7 	bl	80002d4 <__adddf3>
 8005106:	4606      	mov	r6, r0
 8005108:	460f      	mov	r7, r1
 800510a:	f7fb fd49 	bl	8000ba0 <__aeabi_d2iz>
 800510e:	2200      	movs	r2, #0
 8005110:	4682      	mov	sl, r0
 8005112:	2300      	movs	r3, #0
 8005114:	4630      	mov	r0, r6
 8005116:	4639      	mov	r1, r7
 8005118:	f7fb fd04 	bl	8000b24 <__aeabi_dcmplt>
 800511c:	b148      	cbz	r0, 8005132 <_dtoa_r+0x17a>
 800511e:	4650      	mov	r0, sl
 8005120:	f7fb fa24 	bl	800056c <__aeabi_i2d>
 8005124:	4632      	mov	r2, r6
 8005126:	463b      	mov	r3, r7
 8005128:	f7fb fcf2 	bl	8000b10 <__aeabi_dcmpeq>
 800512c:	b908      	cbnz	r0, 8005132 <_dtoa_r+0x17a>
 800512e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005132:	f1ba 0f16 	cmp.w	sl, #22
 8005136:	d858      	bhi.n	80051ea <_dtoa_r+0x232>
 8005138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800513c:	4b57      	ldr	r3, [pc, #348]	; (800529c <_dtoa_r+0x2e4>)
 800513e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	f7fb fced 	bl	8000b24 <__aeabi_dcmplt>
 800514a:	2800      	cmp	r0, #0
 800514c:	d04f      	beq.n	80051ee <_dtoa_r+0x236>
 800514e:	2300      	movs	r3, #0
 8005150:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005154:	930f      	str	r3, [sp, #60]	; 0x3c
 8005156:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005158:	1b1c      	subs	r4, r3, r4
 800515a:	1e63      	subs	r3, r4, #1
 800515c:	9309      	str	r3, [sp, #36]	; 0x24
 800515e:	bf49      	itett	mi
 8005160:	f1c4 0301 	rsbmi	r3, r4, #1
 8005164:	2300      	movpl	r3, #0
 8005166:	9306      	strmi	r3, [sp, #24]
 8005168:	2300      	movmi	r3, #0
 800516a:	bf54      	ite	pl
 800516c:	9306      	strpl	r3, [sp, #24]
 800516e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005170:	f1ba 0f00 	cmp.w	sl, #0
 8005174:	db3d      	blt.n	80051f2 <_dtoa_r+0x23a>
 8005176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005178:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800517c:	4453      	add	r3, sl
 800517e:	9309      	str	r3, [sp, #36]	; 0x24
 8005180:	2300      	movs	r3, #0
 8005182:	930a      	str	r3, [sp, #40]	; 0x28
 8005184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005186:	2b09      	cmp	r3, #9
 8005188:	f200 808c 	bhi.w	80052a4 <_dtoa_r+0x2ec>
 800518c:	2b05      	cmp	r3, #5
 800518e:	bfc4      	itt	gt
 8005190:	3b04      	subgt	r3, #4
 8005192:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005196:	bfc8      	it	gt
 8005198:	2400      	movgt	r4, #0
 800519a:	f1a3 0302 	sub.w	r3, r3, #2
 800519e:	bfd8      	it	le
 80051a0:	2401      	movle	r4, #1
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	f200 808a 	bhi.w	80052bc <_dtoa_r+0x304>
 80051a8:	e8df f003 	tbb	[pc, r3]
 80051ac:	5b4d4f2d 	.word	0x5b4d4f2d
 80051b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80051b4:	441c      	add	r4, r3
 80051b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	bfc3      	ittte	gt
 80051be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80051c6:	fa09 f303 	lslgt.w	r3, r9, r3
 80051ca:	f1c3 0320 	rsble	r3, r3, #32
 80051ce:	bfc6      	itte	gt
 80051d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051d4:	4318      	orrgt	r0, r3
 80051d6:	fa06 f003 	lslle.w	r0, r6, r3
 80051da:	f7fb f9b7 	bl	800054c <__aeabi_ui2d>
 80051de:	2301      	movs	r3, #1
 80051e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80051e4:	3c01      	subs	r4, #1
 80051e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80051e8:	e76f      	b.n	80050ca <_dtoa_r+0x112>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e7b2      	b.n	8005154 <_dtoa_r+0x19c>
 80051ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80051f0:	e7b1      	b.n	8005156 <_dtoa_r+0x19e>
 80051f2:	9b06      	ldr	r3, [sp, #24]
 80051f4:	eba3 030a 	sub.w	r3, r3, sl
 80051f8:	9306      	str	r3, [sp, #24]
 80051fa:	f1ca 0300 	rsb	r3, sl, #0
 80051fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005200:	2300      	movs	r3, #0
 8005202:	930e      	str	r3, [sp, #56]	; 0x38
 8005204:	e7be      	b.n	8005184 <_dtoa_r+0x1cc>
 8005206:	2300      	movs	r3, #0
 8005208:	930b      	str	r3, [sp, #44]	; 0x2c
 800520a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800520c:	2b00      	cmp	r3, #0
 800520e:	dc58      	bgt.n	80052c2 <_dtoa_r+0x30a>
 8005210:	f04f 0901 	mov.w	r9, #1
 8005214:	464b      	mov	r3, r9
 8005216:	f8cd 9020 	str.w	r9, [sp, #32]
 800521a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800521e:	2200      	movs	r2, #0
 8005220:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005222:	6042      	str	r2, [r0, #4]
 8005224:	2204      	movs	r2, #4
 8005226:	f102 0614 	add.w	r6, r2, #20
 800522a:	429e      	cmp	r6, r3
 800522c:	6841      	ldr	r1, [r0, #4]
 800522e:	d94e      	bls.n	80052ce <_dtoa_r+0x316>
 8005230:	4628      	mov	r0, r5
 8005232:	f000 fcd7 	bl	8005be4 <_Balloc>
 8005236:	9003      	str	r0, [sp, #12]
 8005238:	2800      	cmp	r0, #0
 800523a:	d14c      	bne.n	80052d6 <_dtoa_r+0x31e>
 800523c:	4602      	mov	r2, r0
 800523e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <_dtoa_r+0x2e8>)
 8005244:	e6cc      	b.n	8004fe0 <_dtoa_r+0x28>
 8005246:	2301      	movs	r3, #1
 8005248:	e7de      	b.n	8005208 <_dtoa_r+0x250>
 800524a:	2300      	movs	r3, #0
 800524c:	930b      	str	r3, [sp, #44]	; 0x2c
 800524e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005250:	eb0a 0903 	add.w	r9, sl, r3
 8005254:	f109 0301 	add.w	r3, r9, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	9308      	str	r3, [sp, #32]
 800525c:	bfb8      	it	lt
 800525e:	2301      	movlt	r3, #1
 8005260:	e7dd      	b.n	800521e <_dtoa_r+0x266>
 8005262:	2301      	movs	r3, #1
 8005264:	e7f2      	b.n	800524c <_dtoa_r+0x294>
 8005266:	bf00      	nop
 8005268:	636f4361 	.word	0x636f4361
 800526c:	3fd287a7 	.word	0x3fd287a7
 8005270:	8b60c8b3 	.word	0x8b60c8b3
 8005274:	3fc68a28 	.word	0x3fc68a28
 8005278:	509f79fb 	.word	0x509f79fb
 800527c:	3fd34413 	.word	0x3fd34413
 8005280:	08007405 	.word	0x08007405
 8005284:	0800741c 	.word	0x0800741c
 8005288:	7ff00000 	.word	0x7ff00000
 800528c:	08007401 	.word	0x08007401
 8005290:	080073f8 	.word	0x080073f8
 8005294:	080073d5 	.word	0x080073d5
 8005298:	3ff80000 	.word	0x3ff80000
 800529c:	08007510 	.word	0x08007510
 80052a0:	08007477 	.word	0x08007477
 80052a4:	2401      	movs	r4, #1
 80052a6:	2300      	movs	r3, #0
 80052a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80052aa:	9322      	str	r3, [sp, #136]	; 0x88
 80052ac:	f04f 39ff 	mov.w	r9, #4294967295
 80052b0:	2200      	movs	r2, #0
 80052b2:	2312      	movs	r3, #18
 80052b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80052b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80052ba:	e7b0      	b.n	800521e <_dtoa_r+0x266>
 80052bc:	2301      	movs	r3, #1
 80052be:	930b      	str	r3, [sp, #44]	; 0x2c
 80052c0:	e7f4      	b.n	80052ac <_dtoa_r+0x2f4>
 80052c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80052c6:	464b      	mov	r3, r9
 80052c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80052cc:	e7a7      	b.n	800521e <_dtoa_r+0x266>
 80052ce:	3101      	adds	r1, #1
 80052d0:	6041      	str	r1, [r0, #4]
 80052d2:	0052      	lsls	r2, r2, #1
 80052d4:	e7a7      	b.n	8005226 <_dtoa_r+0x26e>
 80052d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052d8:	9a03      	ldr	r2, [sp, #12]
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	9b08      	ldr	r3, [sp, #32]
 80052de:	2b0e      	cmp	r3, #14
 80052e0:	f200 80a8 	bhi.w	8005434 <_dtoa_r+0x47c>
 80052e4:	2c00      	cmp	r4, #0
 80052e6:	f000 80a5 	beq.w	8005434 <_dtoa_r+0x47c>
 80052ea:	f1ba 0f00 	cmp.w	sl, #0
 80052ee:	dd34      	ble.n	800535a <_dtoa_r+0x3a2>
 80052f0:	4a9a      	ldr	r2, [pc, #616]	; (800555c <_dtoa_r+0x5a4>)
 80052f2:	f00a 030f 	and.w	r3, sl, #15
 80052f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80052fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005302:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005306:	ea4f 142a 	mov.w	r4, sl, asr #4
 800530a:	d016      	beq.n	800533a <_dtoa_r+0x382>
 800530c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005310:	4b93      	ldr	r3, [pc, #588]	; (8005560 <_dtoa_r+0x5a8>)
 8005312:	2703      	movs	r7, #3
 8005314:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005318:	f7fb fabc 	bl	8000894 <__aeabi_ddiv>
 800531c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005320:	f004 040f 	and.w	r4, r4, #15
 8005324:	4e8e      	ldr	r6, [pc, #568]	; (8005560 <_dtoa_r+0x5a8>)
 8005326:	b954      	cbnz	r4, 800533e <_dtoa_r+0x386>
 8005328:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800532c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005330:	f7fb fab0 	bl	8000894 <__aeabi_ddiv>
 8005334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005338:	e029      	b.n	800538e <_dtoa_r+0x3d6>
 800533a:	2702      	movs	r7, #2
 800533c:	e7f2      	b.n	8005324 <_dtoa_r+0x36c>
 800533e:	07e1      	lsls	r1, r4, #31
 8005340:	d508      	bpl.n	8005354 <_dtoa_r+0x39c>
 8005342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800534a:	f7fb f979 	bl	8000640 <__aeabi_dmul>
 800534e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005352:	3701      	adds	r7, #1
 8005354:	1064      	asrs	r4, r4, #1
 8005356:	3608      	adds	r6, #8
 8005358:	e7e5      	b.n	8005326 <_dtoa_r+0x36e>
 800535a:	f000 80a5 	beq.w	80054a8 <_dtoa_r+0x4f0>
 800535e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005362:	f1ca 0400 	rsb	r4, sl, #0
 8005366:	4b7d      	ldr	r3, [pc, #500]	; (800555c <_dtoa_r+0x5a4>)
 8005368:	f004 020f 	and.w	r2, r4, #15
 800536c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fb f964 	bl	8000640 <__aeabi_dmul>
 8005378:	2702      	movs	r7, #2
 800537a:	2300      	movs	r3, #0
 800537c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005380:	4e77      	ldr	r6, [pc, #476]	; (8005560 <_dtoa_r+0x5a8>)
 8005382:	1124      	asrs	r4, r4, #4
 8005384:	2c00      	cmp	r4, #0
 8005386:	f040 8084 	bne.w	8005492 <_dtoa_r+0x4da>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1d2      	bne.n	8005334 <_dtoa_r+0x37c>
 800538e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 808b 	beq.w	80054ac <_dtoa_r+0x4f4>
 8005396:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800539a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800539e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053a2:	2200      	movs	r2, #0
 80053a4:	4b6f      	ldr	r3, [pc, #444]	; (8005564 <_dtoa_r+0x5ac>)
 80053a6:	f7fb fbbd 	bl	8000b24 <__aeabi_dcmplt>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d07e      	beq.n	80054ac <_dtoa_r+0x4f4>
 80053ae:	9b08      	ldr	r3, [sp, #32]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d07b      	beq.n	80054ac <_dtoa_r+0x4f4>
 80053b4:	f1b9 0f00 	cmp.w	r9, #0
 80053b8:	dd38      	ble.n	800542c <_dtoa_r+0x474>
 80053ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053be:	2200      	movs	r2, #0
 80053c0:	4b69      	ldr	r3, [pc, #420]	; (8005568 <_dtoa_r+0x5b0>)
 80053c2:	f7fb f93d 	bl	8000640 <__aeabi_dmul>
 80053c6:	464c      	mov	r4, r9
 80053c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053cc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80053d0:	3701      	adds	r7, #1
 80053d2:	4638      	mov	r0, r7
 80053d4:	f7fb f8ca 	bl	800056c <__aeabi_i2d>
 80053d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053dc:	f7fb f930 	bl	8000640 <__aeabi_dmul>
 80053e0:	2200      	movs	r2, #0
 80053e2:	4b62      	ldr	r3, [pc, #392]	; (800556c <_dtoa_r+0x5b4>)
 80053e4:	f7fa ff76 	bl	80002d4 <__adddf3>
 80053e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80053ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053f0:	9611      	str	r6, [sp, #68]	; 0x44
 80053f2:	2c00      	cmp	r4, #0
 80053f4:	d15d      	bne.n	80054b2 <_dtoa_r+0x4fa>
 80053f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053fa:	2200      	movs	r2, #0
 80053fc:	4b5c      	ldr	r3, [pc, #368]	; (8005570 <_dtoa_r+0x5b8>)
 80053fe:	f7fa ff67 	bl	80002d0 <__aeabi_dsub>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800540a:	4633      	mov	r3, r6
 800540c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800540e:	f7fb fba7 	bl	8000b60 <__aeabi_dcmpgt>
 8005412:	2800      	cmp	r0, #0
 8005414:	f040 829c 	bne.w	8005950 <_dtoa_r+0x998>
 8005418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800541c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800541e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005422:	f7fb fb7f 	bl	8000b24 <__aeabi_dcmplt>
 8005426:	2800      	cmp	r0, #0
 8005428:	f040 8290 	bne.w	800594c <_dtoa_r+0x994>
 800542c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005430:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005436:	2b00      	cmp	r3, #0
 8005438:	f2c0 8152 	blt.w	80056e0 <_dtoa_r+0x728>
 800543c:	f1ba 0f0e 	cmp.w	sl, #14
 8005440:	f300 814e 	bgt.w	80056e0 <_dtoa_r+0x728>
 8005444:	4b45      	ldr	r3, [pc, #276]	; (800555c <_dtoa_r+0x5a4>)
 8005446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800544a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800544e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005454:	2b00      	cmp	r3, #0
 8005456:	f280 80db 	bge.w	8005610 <_dtoa_r+0x658>
 800545a:	9b08      	ldr	r3, [sp, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f300 80d7 	bgt.w	8005610 <_dtoa_r+0x658>
 8005462:	f040 8272 	bne.w	800594a <_dtoa_r+0x992>
 8005466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800546a:	2200      	movs	r2, #0
 800546c:	4b40      	ldr	r3, [pc, #256]	; (8005570 <_dtoa_r+0x5b8>)
 800546e:	f7fb f8e7 	bl	8000640 <__aeabi_dmul>
 8005472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005476:	f7fb fb69 	bl	8000b4c <__aeabi_dcmpge>
 800547a:	9c08      	ldr	r4, [sp, #32]
 800547c:	4626      	mov	r6, r4
 800547e:	2800      	cmp	r0, #0
 8005480:	f040 8248 	bne.w	8005914 <_dtoa_r+0x95c>
 8005484:	2331      	movs	r3, #49	; 0x31
 8005486:	9f03      	ldr	r7, [sp, #12]
 8005488:	f10a 0a01 	add.w	sl, sl, #1
 800548c:	f807 3b01 	strb.w	r3, [r7], #1
 8005490:	e244      	b.n	800591c <_dtoa_r+0x964>
 8005492:	07e2      	lsls	r2, r4, #31
 8005494:	d505      	bpl.n	80054a2 <_dtoa_r+0x4ea>
 8005496:	e9d6 2300 	ldrd	r2, r3, [r6]
 800549a:	f7fb f8d1 	bl	8000640 <__aeabi_dmul>
 800549e:	2301      	movs	r3, #1
 80054a0:	3701      	adds	r7, #1
 80054a2:	1064      	asrs	r4, r4, #1
 80054a4:	3608      	adds	r6, #8
 80054a6:	e76d      	b.n	8005384 <_dtoa_r+0x3cc>
 80054a8:	2702      	movs	r7, #2
 80054aa:	e770      	b.n	800538e <_dtoa_r+0x3d6>
 80054ac:	46d0      	mov	r8, sl
 80054ae:	9c08      	ldr	r4, [sp, #32]
 80054b0:	e78f      	b.n	80053d2 <_dtoa_r+0x41a>
 80054b2:	9903      	ldr	r1, [sp, #12]
 80054b4:	4b29      	ldr	r3, [pc, #164]	; (800555c <_dtoa_r+0x5a4>)
 80054b6:	4421      	add	r1, r4
 80054b8:	9112      	str	r1, [sp, #72]	; 0x48
 80054ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80054c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d055      	beq.n	8005578 <_dtoa_r+0x5c0>
 80054cc:	2000      	movs	r0, #0
 80054ce:	4929      	ldr	r1, [pc, #164]	; (8005574 <_dtoa_r+0x5bc>)
 80054d0:	f7fb f9e0 	bl	8000894 <__aeabi_ddiv>
 80054d4:	463b      	mov	r3, r7
 80054d6:	4632      	mov	r2, r6
 80054d8:	f7fa fefa 	bl	80002d0 <__aeabi_dsub>
 80054dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054e0:	9f03      	ldr	r7, [sp, #12]
 80054e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e6:	f7fb fb5b 	bl	8000ba0 <__aeabi_d2iz>
 80054ea:	4604      	mov	r4, r0
 80054ec:	f7fb f83e 	bl	800056c <__aeabi_i2d>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054f8:	f7fa feea 	bl	80002d0 <__aeabi_dsub>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	3430      	adds	r4, #48	; 0x30
 8005502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800550a:	f807 4b01 	strb.w	r4, [r7], #1
 800550e:	f7fb fb09 	bl	8000b24 <__aeabi_dcmplt>
 8005512:	2800      	cmp	r0, #0
 8005514:	d174      	bne.n	8005600 <_dtoa_r+0x648>
 8005516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800551a:	2000      	movs	r0, #0
 800551c:	4911      	ldr	r1, [pc, #68]	; (8005564 <_dtoa_r+0x5ac>)
 800551e:	f7fa fed7 	bl	80002d0 <__aeabi_dsub>
 8005522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005526:	f7fb fafd 	bl	8000b24 <__aeabi_dcmplt>
 800552a:	2800      	cmp	r0, #0
 800552c:	f040 80b7 	bne.w	800569e <_dtoa_r+0x6e6>
 8005530:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005532:	429f      	cmp	r7, r3
 8005534:	f43f af7a 	beq.w	800542c <_dtoa_r+0x474>
 8005538:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800553c:	2200      	movs	r2, #0
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <_dtoa_r+0x5b0>)
 8005540:	f7fb f87e 	bl	8000640 <__aeabi_dmul>
 8005544:	2200      	movs	r2, #0
 8005546:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800554a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <_dtoa_r+0x5b0>)
 8005550:	f7fb f876 	bl	8000640 <__aeabi_dmul>
 8005554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005558:	e7c3      	b.n	80054e2 <_dtoa_r+0x52a>
 800555a:	bf00      	nop
 800555c:	08007510 	.word	0x08007510
 8005560:	080074e8 	.word	0x080074e8
 8005564:	3ff00000 	.word	0x3ff00000
 8005568:	40240000 	.word	0x40240000
 800556c:	401c0000 	.word	0x401c0000
 8005570:	40140000 	.word	0x40140000
 8005574:	3fe00000 	.word	0x3fe00000
 8005578:	4630      	mov	r0, r6
 800557a:	4639      	mov	r1, r7
 800557c:	f7fb f860 	bl	8000640 <__aeabi_dmul>
 8005580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005582:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005586:	9c03      	ldr	r4, [sp, #12]
 8005588:	9314      	str	r3, [sp, #80]	; 0x50
 800558a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800558e:	f7fb fb07 	bl	8000ba0 <__aeabi_d2iz>
 8005592:	9015      	str	r0, [sp, #84]	; 0x54
 8005594:	f7fa ffea 	bl	800056c <__aeabi_i2d>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a0:	f7fa fe96 	bl	80002d0 <__aeabi_dsub>
 80055a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055a6:	4606      	mov	r6, r0
 80055a8:	3330      	adds	r3, #48	; 0x30
 80055aa:	f804 3b01 	strb.w	r3, [r4], #1
 80055ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055b0:	460f      	mov	r7, r1
 80055b2:	429c      	cmp	r4, r3
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	d124      	bne.n	8005604 <_dtoa_r+0x64c>
 80055ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055be:	4bb0      	ldr	r3, [pc, #704]	; (8005880 <_dtoa_r+0x8c8>)
 80055c0:	f7fa fe88 	bl	80002d4 <__adddf3>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4630      	mov	r0, r6
 80055ca:	4639      	mov	r1, r7
 80055cc:	f7fb fac8 	bl	8000b60 <__aeabi_dcmpgt>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d163      	bne.n	800569c <_dtoa_r+0x6e4>
 80055d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055d8:	2000      	movs	r0, #0
 80055da:	49a9      	ldr	r1, [pc, #676]	; (8005880 <_dtoa_r+0x8c8>)
 80055dc:	f7fa fe78 	bl	80002d0 <__aeabi_dsub>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4630      	mov	r0, r6
 80055e6:	4639      	mov	r1, r7
 80055e8:	f7fb fa9c 	bl	8000b24 <__aeabi_dcmplt>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f43f af1d 	beq.w	800542c <_dtoa_r+0x474>
 80055f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80055f4:	1e7b      	subs	r3, r7, #1
 80055f6:	9314      	str	r3, [sp, #80]	; 0x50
 80055f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80055fc:	2b30      	cmp	r3, #48	; 0x30
 80055fe:	d0f8      	beq.n	80055f2 <_dtoa_r+0x63a>
 8005600:	46c2      	mov	sl, r8
 8005602:	e03b      	b.n	800567c <_dtoa_r+0x6c4>
 8005604:	4b9f      	ldr	r3, [pc, #636]	; (8005884 <_dtoa_r+0x8cc>)
 8005606:	f7fb f81b 	bl	8000640 <__aeabi_dmul>
 800560a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800560e:	e7bc      	b.n	800558a <_dtoa_r+0x5d2>
 8005610:	9f03      	ldr	r7, [sp, #12]
 8005612:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800561a:	4640      	mov	r0, r8
 800561c:	4649      	mov	r1, r9
 800561e:	f7fb f939 	bl	8000894 <__aeabi_ddiv>
 8005622:	f7fb fabd 	bl	8000ba0 <__aeabi_d2iz>
 8005626:	4604      	mov	r4, r0
 8005628:	f7fa ffa0 	bl	800056c <__aeabi_i2d>
 800562c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005630:	f7fb f806 	bl	8000640 <__aeabi_dmul>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	f7fa fe48 	bl	80002d0 <__aeabi_dsub>
 8005640:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005644:	f807 6b01 	strb.w	r6, [r7], #1
 8005648:	9e03      	ldr	r6, [sp, #12]
 800564a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800564e:	1bbe      	subs	r6, r7, r6
 8005650:	45b4      	cmp	ip, r6
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	d136      	bne.n	80056c6 <_dtoa_r+0x70e>
 8005658:	f7fa fe3c 	bl	80002d4 <__adddf3>
 800565c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005660:	4680      	mov	r8, r0
 8005662:	4689      	mov	r9, r1
 8005664:	f7fb fa7c 	bl	8000b60 <__aeabi_dcmpgt>
 8005668:	bb58      	cbnz	r0, 80056c2 <_dtoa_r+0x70a>
 800566a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800566e:	4640      	mov	r0, r8
 8005670:	4649      	mov	r1, r9
 8005672:	f7fb fa4d 	bl	8000b10 <__aeabi_dcmpeq>
 8005676:	b108      	cbz	r0, 800567c <_dtoa_r+0x6c4>
 8005678:	07e1      	lsls	r1, r4, #31
 800567a:	d422      	bmi.n	80056c2 <_dtoa_r+0x70a>
 800567c:	4628      	mov	r0, r5
 800567e:	4659      	mov	r1, fp
 8005680:	f000 faf0 	bl	8005c64 <_Bfree>
 8005684:	2300      	movs	r3, #0
 8005686:	703b      	strb	r3, [r7, #0]
 8005688:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800568a:	f10a 0001 	add.w	r0, sl, #1
 800568e:	6018      	str	r0, [r3, #0]
 8005690:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005692:	2b00      	cmp	r3, #0
 8005694:	f43f acde 	beq.w	8005054 <_dtoa_r+0x9c>
 8005698:	601f      	str	r7, [r3, #0]
 800569a:	e4db      	b.n	8005054 <_dtoa_r+0x9c>
 800569c:	4627      	mov	r7, r4
 800569e:	463b      	mov	r3, r7
 80056a0:	461f      	mov	r7, r3
 80056a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a6:	2a39      	cmp	r2, #57	; 0x39
 80056a8:	d107      	bne.n	80056ba <_dtoa_r+0x702>
 80056aa:	9a03      	ldr	r2, [sp, #12]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d1f7      	bne.n	80056a0 <_dtoa_r+0x6e8>
 80056b0:	2230      	movs	r2, #48	; 0x30
 80056b2:	9903      	ldr	r1, [sp, #12]
 80056b4:	f108 0801 	add.w	r8, r8, #1
 80056b8:	700a      	strb	r2, [r1, #0]
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	3201      	adds	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e79e      	b.n	8005600 <_dtoa_r+0x648>
 80056c2:	46d0      	mov	r8, sl
 80056c4:	e7eb      	b.n	800569e <_dtoa_r+0x6e6>
 80056c6:	2200      	movs	r2, #0
 80056c8:	4b6e      	ldr	r3, [pc, #440]	; (8005884 <_dtoa_r+0x8cc>)
 80056ca:	f7fa ffb9 	bl	8000640 <__aeabi_dmul>
 80056ce:	2200      	movs	r2, #0
 80056d0:	2300      	movs	r3, #0
 80056d2:	4680      	mov	r8, r0
 80056d4:	4689      	mov	r9, r1
 80056d6:	f7fb fa1b 	bl	8000b10 <__aeabi_dcmpeq>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d09b      	beq.n	8005616 <_dtoa_r+0x65e>
 80056de:	e7cd      	b.n	800567c <_dtoa_r+0x6c4>
 80056e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056e2:	2a00      	cmp	r2, #0
 80056e4:	f000 80d0 	beq.w	8005888 <_dtoa_r+0x8d0>
 80056e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056ea:	2a01      	cmp	r2, #1
 80056ec:	f300 80ae 	bgt.w	800584c <_dtoa_r+0x894>
 80056f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	f000 80a6 	beq.w	8005844 <_dtoa_r+0x88c>
 80056f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056fe:	9f06      	ldr	r7, [sp, #24]
 8005700:	9a06      	ldr	r2, [sp, #24]
 8005702:	2101      	movs	r1, #1
 8005704:	441a      	add	r2, r3
 8005706:	9206      	str	r2, [sp, #24]
 8005708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800570a:	4628      	mov	r0, r5
 800570c:	441a      	add	r2, r3
 800570e:	9209      	str	r2, [sp, #36]	; 0x24
 8005710:	f000 fb5e 	bl	8005dd0 <__i2b>
 8005714:	4606      	mov	r6, r0
 8005716:	2f00      	cmp	r7, #0
 8005718:	dd0c      	ble.n	8005734 <_dtoa_r+0x77c>
 800571a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	dd09      	ble.n	8005734 <_dtoa_r+0x77c>
 8005720:	42bb      	cmp	r3, r7
 8005722:	bfa8      	it	ge
 8005724:	463b      	movge	r3, r7
 8005726:	9a06      	ldr	r2, [sp, #24]
 8005728:	1aff      	subs	r7, r7, r3
 800572a:	1ad2      	subs	r2, r2, r3
 800572c:	9206      	str	r2, [sp, #24]
 800572e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	9309      	str	r3, [sp, #36]	; 0x24
 8005734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005736:	b1f3      	cbz	r3, 8005776 <_dtoa_r+0x7be>
 8005738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80a8 	beq.w	8005890 <_dtoa_r+0x8d8>
 8005740:	2c00      	cmp	r4, #0
 8005742:	dd10      	ble.n	8005766 <_dtoa_r+0x7ae>
 8005744:	4631      	mov	r1, r6
 8005746:	4622      	mov	r2, r4
 8005748:	4628      	mov	r0, r5
 800574a:	f000 fbff 	bl	8005f4c <__pow5mult>
 800574e:	465a      	mov	r2, fp
 8005750:	4601      	mov	r1, r0
 8005752:	4606      	mov	r6, r0
 8005754:	4628      	mov	r0, r5
 8005756:	f000 fb51 	bl	8005dfc <__multiply>
 800575a:	4680      	mov	r8, r0
 800575c:	4659      	mov	r1, fp
 800575e:	4628      	mov	r0, r5
 8005760:	f000 fa80 	bl	8005c64 <_Bfree>
 8005764:	46c3      	mov	fp, r8
 8005766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005768:	1b1a      	subs	r2, r3, r4
 800576a:	d004      	beq.n	8005776 <_dtoa_r+0x7be>
 800576c:	4659      	mov	r1, fp
 800576e:	4628      	mov	r0, r5
 8005770:	f000 fbec 	bl	8005f4c <__pow5mult>
 8005774:	4683      	mov	fp, r0
 8005776:	2101      	movs	r1, #1
 8005778:	4628      	mov	r0, r5
 800577a:	f000 fb29 	bl	8005dd0 <__i2b>
 800577e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005780:	4604      	mov	r4, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	f340 8086 	ble.w	8005894 <_dtoa_r+0x8dc>
 8005788:	461a      	mov	r2, r3
 800578a:	4601      	mov	r1, r0
 800578c:	4628      	mov	r0, r5
 800578e:	f000 fbdd 	bl	8005f4c <__pow5mult>
 8005792:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005794:	4604      	mov	r4, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	dd7f      	ble.n	800589a <_dtoa_r+0x8e2>
 800579a:	f04f 0800 	mov.w	r8, #0
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057a4:	6918      	ldr	r0, [r3, #16]
 80057a6:	f000 fac5 	bl	8005d34 <__hi0bits>
 80057aa:	f1c0 0020 	rsb	r0, r0, #32
 80057ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b0:	4418      	add	r0, r3
 80057b2:	f010 001f 	ands.w	r0, r0, #31
 80057b6:	f000 8092 	beq.w	80058de <_dtoa_r+0x926>
 80057ba:	f1c0 0320 	rsb	r3, r0, #32
 80057be:	2b04      	cmp	r3, #4
 80057c0:	f340 808a 	ble.w	80058d8 <_dtoa_r+0x920>
 80057c4:	f1c0 001c 	rsb	r0, r0, #28
 80057c8:	9b06      	ldr	r3, [sp, #24]
 80057ca:	4407      	add	r7, r0
 80057cc:	4403      	add	r3, r0
 80057ce:	9306      	str	r3, [sp, #24]
 80057d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d2:	4403      	add	r3, r0
 80057d4:	9309      	str	r3, [sp, #36]	; 0x24
 80057d6:	9b06      	ldr	r3, [sp, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dd05      	ble.n	80057e8 <_dtoa_r+0x830>
 80057dc:	4659      	mov	r1, fp
 80057de:	461a      	mov	r2, r3
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 fc0d 	bl	8006000 <__lshift>
 80057e6:	4683      	mov	fp, r0
 80057e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	dd05      	ble.n	80057fa <_dtoa_r+0x842>
 80057ee:	4621      	mov	r1, r4
 80057f0:	461a      	mov	r2, r3
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 fc04 	bl	8006000 <__lshift>
 80057f8:	4604      	mov	r4, r0
 80057fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d070      	beq.n	80058e2 <_dtoa_r+0x92a>
 8005800:	4621      	mov	r1, r4
 8005802:	4658      	mov	r0, fp
 8005804:	f000 fc6c 	bl	80060e0 <__mcmp>
 8005808:	2800      	cmp	r0, #0
 800580a:	da6a      	bge.n	80058e2 <_dtoa_r+0x92a>
 800580c:	2300      	movs	r3, #0
 800580e:	4659      	mov	r1, fp
 8005810:	220a      	movs	r2, #10
 8005812:	4628      	mov	r0, r5
 8005814:	f000 fa48 	bl	8005ca8 <__multadd>
 8005818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800581a:	4683      	mov	fp, r0
 800581c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8194 	beq.w	8005b4e <_dtoa_r+0xb96>
 8005826:	4631      	mov	r1, r6
 8005828:	2300      	movs	r3, #0
 800582a:	220a      	movs	r2, #10
 800582c:	4628      	mov	r0, r5
 800582e:	f000 fa3b 	bl	8005ca8 <__multadd>
 8005832:	f1b9 0f00 	cmp.w	r9, #0
 8005836:	4606      	mov	r6, r0
 8005838:	f300 8093 	bgt.w	8005962 <_dtoa_r+0x9aa>
 800583c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800583e:	2b02      	cmp	r3, #2
 8005840:	dc57      	bgt.n	80058f2 <_dtoa_r+0x93a>
 8005842:	e08e      	b.n	8005962 <_dtoa_r+0x9aa>
 8005844:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800584a:	e757      	b.n	80056fc <_dtoa_r+0x744>
 800584c:	9b08      	ldr	r3, [sp, #32]
 800584e:	1e5c      	subs	r4, r3, #1
 8005850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005852:	42a3      	cmp	r3, r4
 8005854:	bfb7      	itett	lt
 8005856:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005858:	1b1c      	subge	r4, r3, r4
 800585a:	1ae2      	sublt	r2, r4, r3
 800585c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800585e:	bfbe      	ittt	lt
 8005860:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005862:	189b      	addlt	r3, r3, r2
 8005864:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005866:	9b08      	ldr	r3, [sp, #32]
 8005868:	bfb8      	it	lt
 800586a:	2400      	movlt	r4, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfbb      	ittet	lt
 8005870:	9b06      	ldrlt	r3, [sp, #24]
 8005872:	9a08      	ldrlt	r2, [sp, #32]
 8005874:	9f06      	ldrge	r7, [sp, #24]
 8005876:	1a9f      	sublt	r7, r3, r2
 8005878:	bfac      	ite	ge
 800587a:	9b08      	ldrge	r3, [sp, #32]
 800587c:	2300      	movlt	r3, #0
 800587e:	e73f      	b.n	8005700 <_dtoa_r+0x748>
 8005880:	3fe00000 	.word	0x3fe00000
 8005884:	40240000 	.word	0x40240000
 8005888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800588a:	9f06      	ldr	r7, [sp, #24]
 800588c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800588e:	e742      	b.n	8005716 <_dtoa_r+0x75e>
 8005890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005892:	e76b      	b.n	800576c <_dtoa_r+0x7b4>
 8005894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005896:	2b01      	cmp	r3, #1
 8005898:	dc19      	bgt.n	80058ce <_dtoa_r+0x916>
 800589a:	9b04      	ldr	r3, [sp, #16]
 800589c:	b9bb      	cbnz	r3, 80058ce <_dtoa_r+0x916>
 800589e:	9b05      	ldr	r3, [sp, #20]
 80058a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058a4:	b99b      	cbnz	r3, 80058ce <_dtoa_r+0x916>
 80058a6:	9b05      	ldr	r3, [sp, #20]
 80058a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058ac:	0d1b      	lsrs	r3, r3, #20
 80058ae:	051b      	lsls	r3, r3, #20
 80058b0:	b183      	cbz	r3, 80058d4 <_dtoa_r+0x91c>
 80058b2:	f04f 0801 	mov.w	r8, #1
 80058b6:	9b06      	ldr	r3, [sp, #24]
 80058b8:	3301      	adds	r3, #1
 80058ba:	9306      	str	r3, [sp, #24]
 80058bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058be:	3301      	adds	r3, #1
 80058c0:	9309      	str	r3, [sp, #36]	; 0x24
 80058c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f af6a 	bne.w	800579e <_dtoa_r+0x7e6>
 80058ca:	2001      	movs	r0, #1
 80058cc:	e76f      	b.n	80057ae <_dtoa_r+0x7f6>
 80058ce:	f04f 0800 	mov.w	r8, #0
 80058d2:	e7f6      	b.n	80058c2 <_dtoa_r+0x90a>
 80058d4:	4698      	mov	r8, r3
 80058d6:	e7f4      	b.n	80058c2 <_dtoa_r+0x90a>
 80058d8:	f43f af7d 	beq.w	80057d6 <_dtoa_r+0x81e>
 80058dc:	4618      	mov	r0, r3
 80058de:	301c      	adds	r0, #28
 80058e0:	e772      	b.n	80057c8 <_dtoa_r+0x810>
 80058e2:	9b08      	ldr	r3, [sp, #32]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	dc36      	bgt.n	8005956 <_dtoa_r+0x99e>
 80058e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	dd33      	ble.n	8005956 <_dtoa_r+0x99e>
 80058ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058f2:	f1b9 0f00 	cmp.w	r9, #0
 80058f6:	d10d      	bne.n	8005914 <_dtoa_r+0x95c>
 80058f8:	4621      	mov	r1, r4
 80058fa:	464b      	mov	r3, r9
 80058fc:	2205      	movs	r2, #5
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 f9d2 	bl	8005ca8 <__multadd>
 8005904:	4601      	mov	r1, r0
 8005906:	4604      	mov	r4, r0
 8005908:	4658      	mov	r0, fp
 800590a:	f000 fbe9 	bl	80060e0 <__mcmp>
 800590e:	2800      	cmp	r0, #0
 8005910:	f73f adb8 	bgt.w	8005484 <_dtoa_r+0x4cc>
 8005914:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005916:	9f03      	ldr	r7, [sp, #12]
 8005918:	ea6f 0a03 	mvn.w	sl, r3
 800591c:	f04f 0800 	mov.w	r8, #0
 8005920:	4621      	mov	r1, r4
 8005922:	4628      	mov	r0, r5
 8005924:	f000 f99e 	bl	8005c64 <_Bfree>
 8005928:	2e00      	cmp	r6, #0
 800592a:	f43f aea7 	beq.w	800567c <_dtoa_r+0x6c4>
 800592e:	f1b8 0f00 	cmp.w	r8, #0
 8005932:	d005      	beq.n	8005940 <_dtoa_r+0x988>
 8005934:	45b0      	cmp	r8, r6
 8005936:	d003      	beq.n	8005940 <_dtoa_r+0x988>
 8005938:	4641      	mov	r1, r8
 800593a:	4628      	mov	r0, r5
 800593c:	f000 f992 	bl	8005c64 <_Bfree>
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	f000 f98e 	bl	8005c64 <_Bfree>
 8005948:	e698      	b.n	800567c <_dtoa_r+0x6c4>
 800594a:	2400      	movs	r4, #0
 800594c:	4626      	mov	r6, r4
 800594e:	e7e1      	b.n	8005914 <_dtoa_r+0x95c>
 8005950:	46c2      	mov	sl, r8
 8005952:	4626      	mov	r6, r4
 8005954:	e596      	b.n	8005484 <_dtoa_r+0x4cc>
 8005956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80fd 	beq.w	8005b5c <_dtoa_r+0xba4>
 8005962:	2f00      	cmp	r7, #0
 8005964:	dd05      	ble.n	8005972 <_dtoa_r+0x9ba>
 8005966:	4631      	mov	r1, r6
 8005968:	463a      	mov	r2, r7
 800596a:	4628      	mov	r0, r5
 800596c:	f000 fb48 	bl	8006000 <__lshift>
 8005970:	4606      	mov	r6, r0
 8005972:	f1b8 0f00 	cmp.w	r8, #0
 8005976:	d05c      	beq.n	8005a32 <_dtoa_r+0xa7a>
 8005978:	4628      	mov	r0, r5
 800597a:	6871      	ldr	r1, [r6, #4]
 800597c:	f000 f932 	bl	8005be4 <_Balloc>
 8005980:	4607      	mov	r7, r0
 8005982:	b928      	cbnz	r0, 8005990 <_dtoa_r+0x9d8>
 8005984:	4602      	mov	r2, r0
 8005986:	f240 21ea 	movw	r1, #746	; 0x2ea
 800598a:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <_dtoa_r+0xbd0>)
 800598c:	f7ff bb28 	b.w	8004fe0 <_dtoa_r+0x28>
 8005990:	6932      	ldr	r2, [r6, #16]
 8005992:	f106 010c 	add.w	r1, r6, #12
 8005996:	3202      	adds	r2, #2
 8005998:	0092      	lsls	r2, r2, #2
 800599a:	300c      	adds	r0, #12
 800599c:	f000 f914 	bl	8005bc8 <memcpy>
 80059a0:	2201      	movs	r2, #1
 80059a2:	4639      	mov	r1, r7
 80059a4:	4628      	mov	r0, r5
 80059a6:	f000 fb2b 	bl	8006000 <__lshift>
 80059aa:	46b0      	mov	r8, r6
 80059ac:	4606      	mov	r6, r0
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	9308      	str	r3, [sp, #32]
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	444b      	add	r3, r9
 80059b8:	930a      	str	r3, [sp, #40]	; 0x28
 80059ba:	9b04      	ldr	r3, [sp, #16]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	9309      	str	r3, [sp, #36]	; 0x24
 80059c2:	9b08      	ldr	r3, [sp, #32]
 80059c4:	4621      	mov	r1, r4
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4658      	mov	r0, fp
 80059ca:	9304      	str	r3, [sp, #16]
 80059cc:	f7ff fa68 	bl	8004ea0 <quorem>
 80059d0:	4603      	mov	r3, r0
 80059d2:	4641      	mov	r1, r8
 80059d4:	3330      	adds	r3, #48	; 0x30
 80059d6:	9006      	str	r0, [sp, #24]
 80059d8:	4658      	mov	r0, fp
 80059da:	930b      	str	r3, [sp, #44]	; 0x2c
 80059dc:	f000 fb80 	bl	80060e0 <__mcmp>
 80059e0:	4632      	mov	r2, r6
 80059e2:	4681      	mov	r9, r0
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 fb96 	bl	8006118 <__mdiff>
 80059ec:	68c2      	ldr	r2, [r0, #12]
 80059ee:	4607      	mov	r7, r0
 80059f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f2:	bb02      	cbnz	r2, 8005a36 <_dtoa_r+0xa7e>
 80059f4:	4601      	mov	r1, r0
 80059f6:	4658      	mov	r0, fp
 80059f8:	f000 fb72 	bl	80060e0 <__mcmp>
 80059fc:	4602      	mov	r2, r0
 80059fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a00:	4639      	mov	r1, r7
 8005a02:	4628      	mov	r0, r5
 8005a04:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005a08:	f000 f92c 	bl	8005c64 <_Bfree>
 8005a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a10:	9f08      	ldr	r7, [sp, #32]
 8005a12:	ea43 0102 	orr.w	r1, r3, r2
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a1c:	d10d      	bne.n	8005a3a <_dtoa_r+0xa82>
 8005a1e:	2b39      	cmp	r3, #57	; 0x39
 8005a20:	d029      	beq.n	8005a76 <_dtoa_r+0xabe>
 8005a22:	f1b9 0f00 	cmp.w	r9, #0
 8005a26:	dd01      	ble.n	8005a2c <_dtoa_r+0xa74>
 8005a28:	9b06      	ldr	r3, [sp, #24]
 8005a2a:	3331      	adds	r3, #49	; 0x31
 8005a2c:	9a04      	ldr	r2, [sp, #16]
 8005a2e:	7013      	strb	r3, [r2, #0]
 8005a30:	e776      	b.n	8005920 <_dtoa_r+0x968>
 8005a32:	4630      	mov	r0, r6
 8005a34:	e7b9      	b.n	80059aa <_dtoa_r+0x9f2>
 8005a36:	2201      	movs	r2, #1
 8005a38:	e7e2      	b.n	8005a00 <_dtoa_r+0xa48>
 8005a3a:	f1b9 0f00 	cmp.w	r9, #0
 8005a3e:	db06      	blt.n	8005a4e <_dtoa_r+0xa96>
 8005a40:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005a42:	ea41 0909 	orr.w	r9, r1, r9
 8005a46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a48:	ea59 0101 	orrs.w	r1, r9, r1
 8005a4c:	d120      	bne.n	8005a90 <_dtoa_r+0xad8>
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	ddec      	ble.n	8005a2c <_dtoa_r+0xa74>
 8005a52:	4659      	mov	r1, fp
 8005a54:	2201      	movs	r2, #1
 8005a56:	4628      	mov	r0, r5
 8005a58:	9308      	str	r3, [sp, #32]
 8005a5a:	f000 fad1 	bl	8006000 <__lshift>
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4683      	mov	fp, r0
 8005a62:	f000 fb3d 	bl	80060e0 <__mcmp>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	9b08      	ldr	r3, [sp, #32]
 8005a6a:	dc02      	bgt.n	8005a72 <_dtoa_r+0xaba>
 8005a6c:	d1de      	bne.n	8005a2c <_dtoa_r+0xa74>
 8005a6e:	07da      	lsls	r2, r3, #31
 8005a70:	d5dc      	bpl.n	8005a2c <_dtoa_r+0xa74>
 8005a72:	2b39      	cmp	r3, #57	; 0x39
 8005a74:	d1d8      	bne.n	8005a28 <_dtoa_r+0xa70>
 8005a76:	2339      	movs	r3, #57	; 0x39
 8005a78:	9a04      	ldr	r2, [sp, #16]
 8005a7a:	7013      	strb	r3, [r2, #0]
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	461f      	mov	r7, r3
 8005a80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	2a39      	cmp	r2, #57	; 0x39
 8005a88:	d050      	beq.n	8005b2c <_dtoa_r+0xb74>
 8005a8a:	3201      	adds	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	e747      	b.n	8005920 <_dtoa_r+0x968>
 8005a90:	2a00      	cmp	r2, #0
 8005a92:	dd03      	ble.n	8005a9c <_dtoa_r+0xae4>
 8005a94:	2b39      	cmp	r3, #57	; 0x39
 8005a96:	d0ee      	beq.n	8005a76 <_dtoa_r+0xabe>
 8005a98:	3301      	adds	r3, #1
 8005a9a:	e7c7      	b.n	8005a2c <_dtoa_r+0xa74>
 8005a9c:	9a08      	ldr	r2, [sp, #32]
 8005a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005aa0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005aa4:	428a      	cmp	r2, r1
 8005aa6:	d02a      	beq.n	8005afe <_dtoa_r+0xb46>
 8005aa8:	4659      	mov	r1, fp
 8005aaa:	2300      	movs	r3, #0
 8005aac:	220a      	movs	r2, #10
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 f8fa 	bl	8005ca8 <__multadd>
 8005ab4:	45b0      	cmp	r8, r6
 8005ab6:	4683      	mov	fp, r0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	f04f 020a 	mov.w	r2, #10
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	d107      	bne.n	8005ad6 <_dtoa_r+0xb1e>
 8005ac6:	f000 f8ef 	bl	8005ca8 <__multadd>
 8005aca:	4680      	mov	r8, r0
 8005acc:	4606      	mov	r6, r0
 8005ace:	9b08      	ldr	r3, [sp, #32]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	9308      	str	r3, [sp, #32]
 8005ad4:	e775      	b.n	80059c2 <_dtoa_r+0xa0a>
 8005ad6:	f000 f8e7 	bl	8005ca8 <__multadd>
 8005ada:	4631      	mov	r1, r6
 8005adc:	4680      	mov	r8, r0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f8e0 	bl	8005ca8 <__multadd>
 8005ae8:	4606      	mov	r6, r0
 8005aea:	e7f0      	b.n	8005ace <_dtoa_r+0xb16>
 8005aec:	f1b9 0f00 	cmp.w	r9, #0
 8005af0:	bfcc      	ite	gt
 8005af2:	464f      	movgt	r7, r9
 8005af4:	2701      	movle	r7, #1
 8005af6:	f04f 0800 	mov.w	r8, #0
 8005afa:	9a03      	ldr	r2, [sp, #12]
 8005afc:	4417      	add	r7, r2
 8005afe:	4659      	mov	r1, fp
 8005b00:	2201      	movs	r2, #1
 8005b02:	4628      	mov	r0, r5
 8005b04:	9308      	str	r3, [sp, #32]
 8005b06:	f000 fa7b 	bl	8006000 <__lshift>
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4683      	mov	fp, r0
 8005b0e:	f000 fae7 	bl	80060e0 <__mcmp>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	dcb2      	bgt.n	8005a7c <_dtoa_r+0xac4>
 8005b16:	d102      	bne.n	8005b1e <_dtoa_r+0xb66>
 8005b18:	9b08      	ldr	r3, [sp, #32]
 8005b1a:	07db      	lsls	r3, r3, #31
 8005b1c:	d4ae      	bmi.n	8005a7c <_dtoa_r+0xac4>
 8005b1e:	463b      	mov	r3, r7
 8005b20:	461f      	mov	r7, r3
 8005b22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b26:	2a30      	cmp	r2, #48	; 0x30
 8005b28:	d0fa      	beq.n	8005b20 <_dtoa_r+0xb68>
 8005b2a:	e6f9      	b.n	8005920 <_dtoa_r+0x968>
 8005b2c:	9a03      	ldr	r2, [sp, #12]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d1a5      	bne.n	8005a7e <_dtoa_r+0xac6>
 8005b32:	2331      	movs	r3, #49	; 0x31
 8005b34:	f10a 0a01 	add.w	sl, sl, #1
 8005b38:	e779      	b.n	8005a2e <_dtoa_r+0xa76>
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <_dtoa_r+0xbd4>)
 8005b3c:	f7ff baa8 	b.w	8005090 <_dtoa_r+0xd8>
 8005b40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f47f aa81 	bne.w	800504a <_dtoa_r+0x92>
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <_dtoa_r+0xbd8>)
 8005b4a:	f7ff baa1 	b.w	8005090 <_dtoa_r+0xd8>
 8005b4e:	f1b9 0f00 	cmp.w	r9, #0
 8005b52:	dc03      	bgt.n	8005b5c <_dtoa_r+0xba4>
 8005b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	f73f aecb 	bgt.w	80058f2 <_dtoa_r+0x93a>
 8005b5c:	9f03      	ldr	r7, [sp, #12]
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4658      	mov	r0, fp
 8005b62:	f7ff f99d 	bl	8004ea0 <quorem>
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b6c:	f807 3b01 	strb.w	r3, [r7], #1
 8005b70:	1aba      	subs	r2, r7, r2
 8005b72:	4591      	cmp	r9, r2
 8005b74:	ddba      	ble.n	8005aec <_dtoa_r+0xb34>
 8005b76:	4659      	mov	r1, fp
 8005b78:	2300      	movs	r3, #0
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 f893 	bl	8005ca8 <__multadd>
 8005b82:	4683      	mov	fp, r0
 8005b84:	e7eb      	b.n	8005b5e <_dtoa_r+0xba6>
 8005b86:	bf00      	nop
 8005b88:	08007477 	.word	0x08007477
 8005b8c:	080073d4 	.word	0x080073d4
 8005b90:	080073f8 	.word	0x080073f8

08005b94 <_localeconv_r>:
 8005b94:	4800      	ldr	r0, [pc, #0]	; (8005b98 <_localeconv_r+0x4>)
 8005b96:	4770      	bx	lr
 8005b98:	20000160 	.word	0x20000160

08005b9c <malloc>:
 8005b9c:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <malloc+0xc>)
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	f000 bc1d 	b.w	80063e0 <_malloc_r>
 8005ba6:	bf00      	nop
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <memchr>:
 8005bac:	4603      	mov	r3, r0
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	b2c9      	uxtb	r1, r1
 8005bb2:	4402      	add	r2, r0
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	d101      	bne.n	8005bbe <memchr+0x12>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e003      	b.n	8005bc6 <memchr+0x1a>
 8005bbe:	7804      	ldrb	r4, [r0, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	428c      	cmp	r4, r1
 8005bc4:	d1f6      	bne.n	8005bb4 <memchr+0x8>
 8005bc6:	bd10      	pop	{r4, pc}

08005bc8 <memcpy>:
 8005bc8:	440a      	add	r2, r1
 8005bca:	4291      	cmp	r1, r2
 8005bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd0:	d100      	bne.n	8005bd4 <memcpy+0xc>
 8005bd2:	4770      	bx	lr
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be0:	d1f9      	bne.n	8005bd6 <memcpy+0xe>
 8005be2:	bd10      	pop	{r4, pc}

08005be4 <_Balloc>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005be8:	4604      	mov	r4, r0
 8005bea:	460d      	mov	r5, r1
 8005bec:	b976      	cbnz	r6, 8005c0c <_Balloc+0x28>
 8005bee:	2010      	movs	r0, #16
 8005bf0:	f7ff ffd4 	bl	8005b9c <malloc>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8005bf8:	b920      	cbnz	r0, 8005c04 <_Balloc+0x20>
 8005bfa:	2166      	movs	r1, #102	; 0x66
 8005bfc:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <_Balloc+0x78>)
 8005bfe:	4818      	ldr	r0, [pc, #96]	; (8005c60 <_Balloc+0x7c>)
 8005c00:	f000 fdce 	bl	80067a0 <__assert_func>
 8005c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c08:	6006      	str	r6, [r0, #0]
 8005c0a:	60c6      	str	r6, [r0, #12]
 8005c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c0e:	68f3      	ldr	r3, [r6, #12]
 8005c10:	b183      	cbz	r3, 8005c34 <_Balloc+0x50>
 8005c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c1a:	b9b8      	cbnz	r0, 8005c4c <_Balloc+0x68>
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c22:	1d72      	adds	r2, r6, #5
 8005c24:	4620      	mov	r0, r4
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	f000 fb5e 	bl	80062e8 <_calloc_r>
 8005c2c:	b160      	cbz	r0, 8005c48 <_Balloc+0x64>
 8005c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c32:	e00e      	b.n	8005c52 <_Balloc+0x6e>
 8005c34:	2221      	movs	r2, #33	; 0x21
 8005c36:	2104      	movs	r1, #4
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 fb55 	bl	80062e8 <_calloc_r>
 8005c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c40:	60f0      	str	r0, [r6, #12]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e4      	bne.n	8005c12 <_Balloc+0x2e>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	6802      	ldr	r2, [r0, #0]
 8005c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c52:	2300      	movs	r3, #0
 8005c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c58:	e7f7      	b.n	8005c4a <_Balloc+0x66>
 8005c5a:	bf00      	nop
 8005c5c:	08007405 	.word	0x08007405
 8005c60:	08007488 	.word	0x08007488

08005c64 <_Bfree>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c68:	4605      	mov	r5, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	b976      	cbnz	r6, 8005c8c <_Bfree+0x28>
 8005c6e:	2010      	movs	r0, #16
 8005c70:	f7ff ff94 	bl	8005b9c <malloc>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6268      	str	r0, [r5, #36]	; 0x24
 8005c78:	b920      	cbnz	r0, 8005c84 <_Bfree+0x20>
 8005c7a:	218a      	movs	r1, #138	; 0x8a
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <_Bfree+0x3c>)
 8005c7e:	4809      	ldr	r0, [pc, #36]	; (8005ca4 <_Bfree+0x40>)
 8005c80:	f000 fd8e 	bl	80067a0 <__assert_func>
 8005c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c88:	6006      	str	r6, [r0, #0]
 8005c8a:	60c6      	str	r6, [r0, #12]
 8005c8c:	b13c      	cbz	r4, 8005c9e <_Bfree+0x3a>
 8005c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c90:	6862      	ldr	r2, [r4, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c98:	6021      	str	r1, [r4, #0]
 8005c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	08007405 	.word	0x08007405
 8005ca4:	08007488 	.word	0x08007488

08005ca8 <__multadd>:
 8005ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cac:	4607      	mov	r7, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	461e      	mov	r6, r3
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	690d      	ldr	r5, [r1, #16]
 8005cb6:	f101 0c14 	add.w	ip, r1, #20
 8005cba:	f8dc 3000 	ldr.w	r3, [ip]
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	b299      	uxth	r1, r3
 8005cc2:	fb02 6101 	mla	r1, r2, r1, r6
 8005cc6:	0c1e      	lsrs	r6, r3, #16
 8005cc8:	0c0b      	lsrs	r3, r1, #16
 8005cca:	fb02 3306 	mla	r3, r2, r6, r3
 8005cce:	b289      	uxth	r1, r1
 8005cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cd4:	4285      	cmp	r5, r0
 8005cd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cda:	f84c 1b04 	str.w	r1, [ip], #4
 8005cde:	dcec      	bgt.n	8005cba <__multadd+0x12>
 8005ce0:	b30e      	cbz	r6, 8005d26 <__multadd+0x7e>
 8005ce2:	68a3      	ldr	r3, [r4, #8]
 8005ce4:	42ab      	cmp	r3, r5
 8005ce6:	dc19      	bgt.n	8005d1c <__multadd+0x74>
 8005ce8:	6861      	ldr	r1, [r4, #4]
 8005cea:	4638      	mov	r0, r7
 8005cec:	3101      	adds	r1, #1
 8005cee:	f7ff ff79 	bl	8005be4 <_Balloc>
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	b928      	cbnz	r0, 8005d02 <__multadd+0x5a>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	21b5      	movs	r1, #181	; 0xb5
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <__multadd+0x84>)
 8005cfc:	480c      	ldr	r0, [pc, #48]	; (8005d30 <__multadd+0x88>)
 8005cfe:	f000 fd4f 	bl	80067a0 <__assert_func>
 8005d02:	6922      	ldr	r2, [r4, #16]
 8005d04:	f104 010c 	add.w	r1, r4, #12
 8005d08:	3202      	adds	r2, #2
 8005d0a:	0092      	lsls	r2, r2, #2
 8005d0c:	300c      	adds	r0, #12
 8005d0e:	f7ff ff5b 	bl	8005bc8 <memcpy>
 8005d12:	4621      	mov	r1, r4
 8005d14:	4638      	mov	r0, r7
 8005d16:	f7ff ffa5 	bl	8005c64 <_Bfree>
 8005d1a:	4644      	mov	r4, r8
 8005d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d20:	3501      	adds	r5, #1
 8005d22:	615e      	str	r6, [r3, #20]
 8005d24:	6125      	str	r5, [r4, #16]
 8005d26:	4620      	mov	r0, r4
 8005d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d2c:	08007477 	.word	0x08007477
 8005d30:	08007488 	.word	0x08007488

08005d34 <__hi0bits>:
 8005d34:	0c02      	lsrs	r2, r0, #16
 8005d36:	0412      	lsls	r2, r2, #16
 8005d38:	4603      	mov	r3, r0
 8005d3a:	b9ca      	cbnz	r2, 8005d70 <__hi0bits+0x3c>
 8005d3c:	0403      	lsls	r3, r0, #16
 8005d3e:	2010      	movs	r0, #16
 8005d40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005d44:	bf04      	itt	eq
 8005d46:	021b      	lsleq	r3, r3, #8
 8005d48:	3008      	addeq	r0, #8
 8005d4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005d4e:	bf04      	itt	eq
 8005d50:	011b      	lsleq	r3, r3, #4
 8005d52:	3004      	addeq	r0, #4
 8005d54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005d58:	bf04      	itt	eq
 8005d5a:	009b      	lsleq	r3, r3, #2
 8005d5c:	3002      	addeq	r0, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	db05      	blt.n	8005d6e <__hi0bits+0x3a>
 8005d62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005d66:	f100 0001 	add.w	r0, r0, #1
 8005d6a:	bf08      	it	eq
 8005d6c:	2020      	moveq	r0, #32
 8005d6e:	4770      	bx	lr
 8005d70:	2000      	movs	r0, #0
 8005d72:	e7e5      	b.n	8005d40 <__hi0bits+0xc>

08005d74 <__lo0bits>:
 8005d74:	6803      	ldr	r3, [r0, #0]
 8005d76:	4602      	mov	r2, r0
 8005d78:	f013 0007 	ands.w	r0, r3, #7
 8005d7c:	d00b      	beq.n	8005d96 <__lo0bits+0x22>
 8005d7e:	07d9      	lsls	r1, r3, #31
 8005d80:	d421      	bmi.n	8005dc6 <__lo0bits+0x52>
 8005d82:	0798      	lsls	r0, r3, #30
 8005d84:	bf49      	itett	mi
 8005d86:	085b      	lsrmi	r3, r3, #1
 8005d88:	089b      	lsrpl	r3, r3, #2
 8005d8a:	2001      	movmi	r0, #1
 8005d8c:	6013      	strmi	r3, [r2, #0]
 8005d8e:	bf5c      	itt	pl
 8005d90:	2002      	movpl	r0, #2
 8005d92:	6013      	strpl	r3, [r2, #0]
 8005d94:	4770      	bx	lr
 8005d96:	b299      	uxth	r1, r3
 8005d98:	b909      	cbnz	r1, 8005d9e <__lo0bits+0x2a>
 8005d9a:	2010      	movs	r0, #16
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	b2d9      	uxtb	r1, r3
 8005da0:	b909      	cbnz	r1, 8005da6 <__lo0bits+0x32>
 8005da2:	3008      	adds	r0, #8
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	0719      	lsls	r1, r3, #28
 8005da8:	bf04      	itt	eq
 8005daa:	091b      	lsreq	r3, r3, #4
 8005dac:	3004      	addeq	r0, #4
 8005dae:	0799      	lsls	r1, r3, #30
 8005db0:	bf04      	itt	eq
 8005db2:	089b      	lsreq	r3, r3, #2
 8005db4:	3002      	addeq	r0, #2
 8005db6:	07d9      	lsls	r1, r3, #31
 8005db8:	d403      	bmi.n	8005dc2 <__lo0bits+0x4e>
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	f100 0001 	add.w	r0, r0, #1
 8005dc0:	d003      	beq.n	8005dca <__lo0bits+0x56>
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4770      	bx	lr
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	4770      	bx	lr
 8005dca:	2020      	movs	r0, #32
 8005dcc:	4770      	bx	lr
	...

08005dd0 <__i2b>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	f7ff ff05 	bl	8005be4 <_Balloc>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	b928      	cbnz	r0, 8005dea <__i2b+0x1a>
 8005dde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005de2:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <__i2b+0x24>)
 8005de4:	4804      	ldr	r0, [pc, #16]	; (8005df8 <__i2b+0x28>)
 8005de6:	f000 fcdb 	bl	80067a0 <__assert_func>
 8005dea:	2301      	movs	r3, #1
 8005dec:	6144      	str	r4, [r0, #20]
 8005dee:	6103      	str	r3, [r0, #16]
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	bf00      	nop
 8005df4:	08007477 	.word	0x08007477
 8005df8:	08007488 	.word	0x08007488

08005dfc <__multiply>:
 8005dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e00:	4691      	mov	r9, r2
 8005e02:	690a      	ldr	r2, [r1, #16]
 8005e04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e08:	460c      	mov	r4, r1
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	bfbe      	ittt	lt
 8005e0e:	460b      	movlt	r3, r1
 8005e10:	464c      	movlt	r4, r9
 8005e12:	4699      	movlt	r9, r3
 8005e14:	6927      	ldr	r7, [r4, #16]
 8005e16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e1a:	68a3      	ldr	r3, [r4, #8]
 8005e1c:	6861      	ldr	r1, [r4, #4]
 8005e1e:	eb07 060a 	add.w	r6, r7, sl
 8005e22:	42b3      	cmp	r3, r6
 8005e24:	b085      	sub	sp, #20
 8005e26:	bfb8      	it	lt
 8005e28:	3101      	addlt	r1, #1
 8005e2a:	f7ff fedb 	bl	8005be4 <_Balloc>
 8005e2e:	b930      	cbnz	r0, 8005e3e <__multiply+0x42>
 8005e30:	4602      	mov	r2, r0
 8005e32:	f240 115d 	movw	r1, #349	; 0x15d
 8005e36:	4b43      	ldr	r3, [pc, #268]	; (8005f44 <__multiply+0x148>)
 8005e38:	4843      	ldr	r0, [pc, #268]	; (8005f48 <__multiply+0x14c>)
 8005e3a:	f000 fcb1 	bl	80067a0 <__assert_func>
 8005e3e:	f100 0514 	add.w	r5, r0, #20
 8005e42:	462b      	mov	r3, r5
 8005e44:	2200      	movs	r2, #0
 8005e46:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e4a:	4543      	cmp	r3, r8
 8005e4c:	d321      	bcc.n	8005e92 <__multiply+0x96>
 8005e4e:	f104 0314 	add.w	r3, r4, #20
 8005e52:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e56:	f109 0314 	add.w	r3, r9, #20
 8005e5a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e5e:	9202      	str	r2, [sp, #8]
 8005e60:	1b3a      	subs	r2, r7, r4
 8005e62:	3a15      	subs	r2, #21
 8005e64:	f022 0203 	bic.w	r2, r2, #3
 8005e68:	3204      	adds	r2, #4
 8005e6a:	f104 0115 	add.w	r1, r4, #21
 8005e6e:	428f      	cmp	r7, r1
 8005e70:	bf38      	it	cc
 8005e72:	2204      	movcc	r2, #4
 8005e74:	9201      	str	r2, [sp, #4]
 8005e76:	9a02      	ldr	r2, [sp, #8]
 8005e78:	9303      	str	r3, [sp, #12]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d80c      	bhi.n	8005e98 <__multiply+0x9c>
 8005e7e:	2e00      	cmp	r6, #0
 8005e80:	dd03      	ble.n	8005e8a <__multiply+0x8e>
 8005e82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d059      	beq.n	8005f3e <__multiply+0x142>
 8005e8a:	6106      	str	r6, [r0, #16]
 8005e8c:	b005      	add	sp, #20
 8005e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e92:	f843 2b04 	str.w	r2, [r3], #4
 8005e96:	e7d8      	b.n	8005e4a <__multiply+0x4e>
 8005e98:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e9c:	f1ba 0f00 	cmp.w	sl, #0
 8005ea0:	d023      	beq.n	8005eea <__multiply+0xee>
 8005ea2:	46a9      	mov	r9, r5
 8005ea4:	f04f 0c00 	mov.w	ip, #0
 8005ea8:	f104 0e14 	add.w	lr, r4, #20
 8005eac:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005eb0:	f8d9 1000 	ldr.w	r1, [r9]
 8005eb4:	fa1f fb82 	uxth.w	fp, r2
 8005eb8:	b289      	uxth	r1, r1
 8005eba:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ebe:	4461      	add	r1, ip
 8005ec0:	f8d9 c000 	ldr.w	ip, [r9]
 8005ec4:	0c12      	lsrs	r2, r2, #16
 8005ec6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005eca:	fb0a c202 	mla	r2, sl, r2, ip
 8005ece:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ed2:	b289      	uxth	r1, r1
 8005ed4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ed8:	4577      	cmp	r7, lr
 8005eda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ede:	f849 1b04 	str.w	r1, [r9], #4
 8005ee2:	d8e3      	bhi.n	8005eac <__multiply+0xb0>
 8005ee4:	9a01      	ldr	r2, [sp, #4]
 8005ee6:	f845 c002 	str.w	ip, [r5, r2]
 8005eea:	9a03      	ldr	r2, [sp, #12]
 8005eec:	3304      	adds	r3, #4
 8005eee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ef2:	f1b9 0f00 	cmp.w	r9, #0
 8005ef6:	d020      	beq.n	8005f3a <__multiply+0x13e>
 8005ef8:	46ae      	mov	lr, r5
 8005efa:	f04f 0a00 	mov.w	sl, #0
 8005efe:	6829      	ldr	r1, [r5, #0]
 8005f00:	f104 0c14 	add.w	ip, r4, #20
 8005f04:	f8bc b000 	ldrh.w	fp, [ip]
 8005f08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f0c:	b289      	uxth	r1, r1
 8005f0e:	fb09 220b 	mla	r2, r9, fp, r2
 8005f12:	4492      	add	sl, r2
 8005f14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f18:	f84e 1b04 	str.w	r1, [lr], #4
 8005f1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f20:	f8be 1000 	ldrh.w	r1, [lr]
 8005f24:	0c12      	lsrs	r2, r2, #16
 8005f26:	fb09 1102 	mla	r1, r9, r2, r1
 8005f2a:	4567      	cmp	r7, ip
 8005f2c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f34:	d8e6      	bhi.n	8005f04 <__multiply+0x108>
 8005f36:	9a01      	ldr	r2, [sp, #4]
 8005f38:	50a9      	str	r1, [r5, r2]
 8005f3a:	3504      	adds	r5, #4
 8005f3c:	e79b      	b.n	8005e76 <__multiply+0x7a>
 8005f3e:	3e01      	subs	r6, #1
 8005f40:	e79d      	b.n	8005e7e <__multiply+0x82>
 8005f42:	bf00      	nop
 8005f44:	08007477 	.word	0x08007477
 8005f48:	08007488 	.word	0x08007488

08005f4c <__pow5mult>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	4615      	mov	r5, r2
 8005f52:	f012 0203 	ands.w	r2, r2, #3
 8005f56:	4606      	mov	r6, r0
 8005f58:	460f      	mov	r7, r1
 8005f5a:	d007      	beq.n	8005f6c <__pow5mult+0x20>
 8005f5c:	4c25      	ldr	r4, [pc, #148]	; (8005ff4 <__pow5mult+0xa8>)
 8005f5e:	3a01      	subs	r2, #1
 8005f60:	2300      	movs	r3, #0
 8005f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f66:	f7ff fe9f 	bl	8005ca8 <__multadd>
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	10ad      	asrs	r5, r5, #2
 8005f6e:	d03d      	beq.n	8005fec <__pow5mult+0xa0>
 8005f70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f72:	b97c      	cbnz	r4, 8005f94 <__pow5mult+0x48>
 8005f74:	2010      	movs	r0, #16
 8005f76:	f7ff fe11 	bl	8005b9c <malloc>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	6270      	str	r0, [r6, #36]	; 0x24
 8005f7e:	b928      	cbnz	r0, 8005f8c <__pow5mult+0x40>
 8005f80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f84:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <__pow5mult+0xac>)
 8005f86:	481d      	ldr	r0, [pc, #116]	; (8005ffc <__pow5mult+0xb0>)
 8005f88:	f000 fc0a 	bl	80067a0 <__assert_func>
 8005f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f90:	6004      	str	r4, [r0, #0]
 8005f92:	60c4      	str	r4, [r0, #12]
 8005f94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f9c:	b94c      	cbnz	r4, 8005fb2 <__pow5mult+0x66>
 8005f9e:	f240 2171 	movw	r1, #625	; 0x271
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7ff ff14 	bl	8005dd0 <__i2b>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fb0:	6003      	str	r3, [r0, #0]
 8005fb2:	f04f 0900 	mov.w	r9, #0
 8005fb6:	07eb      	lsls	r3, r5, #31
 8005fb8:	d50a      	bpl.n	8005fd0 <__pow5mult+0x84>
 8005fba:	4639      	mov	r1, r7
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7ff ff1c 	bl	8005dfc <__multiply>
 8005fc4:	4680      	mov	r8, r0
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7ff fe4b 	bl	8005c64 <_Bfree>
 8005fce:	4647      	mov	r7, r8
 8005fd0:	106d      	asrs	r5, r5, #1
 8005fd2:	d00b      	beq.n	8005fec <__pow5mult+0xa0>
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	b938      	cbnz	r0, 8005fe8 <__pow5mult+0x9c>
 8005fd8:	4622      	mov	r2, r4
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff ff0d 	bl	8005dfc <__multiply>
 8005fe2:	6020      	str	r0, [r4, #0]
 8005fe4:	f8c0 9000 	str.w	r9, [r0]
 8005fe8:	4604      	mov	r4, r0
 8005fea:	e7e4      	b.n	8005fb6 <__pow5mult+0x6a>
 8005fec:	4638      	mov	r0, r7
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	bf00      	nop
 8005ff4:	080075d8 	.word	0x080075d8
 8005ff8:	08007405 	.word	0x08007405
 8005ffc:	08007488 	.word	0x08007488

08006000 <__lshift>:
 8006000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	4607      	mov	r7, r0
 8006008:	4691      	mov	r9, r2
 800600a:	6923      	ldr	r3, [r4, #16]
 800600c:	6849      	ldr	r1, [r1, #4]
 800600e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006012:	68a3      	ldr	r3, [r4, #8]
 8006014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006018:	f108 0601 	add.w	r6, r8, #1
 800601c:	42b3      	cmp	r3, r6
 800601e:	db0b      	blt.n	8006038 <__lshift+0x38>
 8006020:	4638      	mov	r0, r7
 8006022:	f7ff fddf 	bl	8005be4 <_Balloc>
 8006026:	4605      	mov	r5, r0
 8006028:	b948      	cbnz	r0, 800603e <__lshift+0x3e>
 800602a:	4602      	mov	r2, r0
 800602c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006030:	4b29      	ldr	r3, [pc, #164]	; (80060d8 <__lshift+0xd8>)
 8006032:	482a      	ldr	r0, [pc, #168]	; (80060dc <__lshift+0xdc>)
 8006034:	f000 fbb4 	bl	80067a0 <__assert_func>
 8006038:	3101      	adds	r1, #1
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	e7ee      	b.n	800601c <__lshift+0x1c>
 800603e:	2300      	movs	r3, #0
 8006040:	f100 0114 	add.w	r1, r0, #20
 8006044:	f100 0210 	add.w	r2, r0, #16
 8006048:	4618      	mov	r0, r3
 800604a:	4553      	cmp	r3, sl
 800604c:	db37      	blt.n	80060be <__lshift+0xbe>
 800604e:	6920      	ldr	r0, [r4, #16]
 8006050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006054:	f104 0314 	add.w	r3, r4, #20
 8006058:	f019 091f 	ands.w	r9, r9, #31
 800605c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006060:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006064:	d02f      	beq.n	80060c6 <__lshift+0xc6>
 8006066:	468a      	mov	sl, r1
 8006068:	f04f 0c00 	mov.w	ip, #0
 800606c:	f1c9 0e20 	rsb	lr, r9, #32
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	fa02 f209 	lsl.w	r2, r2, r9
 8006076:	ea42 020c 	orr.w	r2, r2, ip
 800607a:	f84a 2b04 	str.w	r2, [sl], #4
 800607e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006082:	4298      	cmp	r0, r3
 8006084:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006088:	d8f2      	bhi.n	8006070 <__lshift+0x70>
 800608a:	1b03      	subs	r3, r0, r4
 800608c:	3b15      	subs	r3, #21
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	3304      	adds	r3, #4
 8006094:	f104 0215 	add.w	r2, r4, #21
 8006098:	4290      	cmp	r0, r2
 800609a:	bf38      	it	cc
 800609c:	2304      	movcc	r3, #4
 800609e:	f841 c003 	str.w	ip, [r1, r3]
 80060a2:	f1bc 0f00 	cmp.w	ip, #0
 80060a6:	d001      	beq.n	80060ac <__lshift+0xac>
 80060a8:	f108 0602 	add.w	r6, r8, #2
 80060ac:	3e01      	subs	r6, #1
 80060ae:	4638      	mov	r0, r7
 80060b0:	4621      	mov	r1, r4
 80060b2:	612e      	str	r6, [r5, #16]
 80060b4:	f7ff fdd6 	bl	8005c64 <_Bfree>
 80060b8:	4628      	mov	r0, r5
 80060ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060be:	f842 0f04 	str.w	r0, [r2, #4]!
 80060c2:	3301      	adds	r3, #1
 80060c4:	e7c1      	b.n	800604a <__lshift+0x4a>
 80060c6:	3904      	subs	r1, #4
 80060c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060cc:	4298      	cmp	r0, r3
 80060ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80060d2:	d8f9      	bhi.n	80060c8 <__lshift+0xc8>
 80060d4:	e7ea      	b.n	80060ac <__lshift+0xac>
 80060d6:	bf00      	nop
 80060d8:	08007477 	.word	0x08007477
 80060dc:	08007488 	.word	0x08007488

080060e0 <__mcmp>:
 80060e0:	4603      	mov	r3, r0
 80060e2:	690a      	ldr	r2, [r1, #16]
 80060e4:	6900      	ldr	r0, [r0, #16]
 80060e6:	b530      	push	{r4, r5, lr}
 80060e8:	1a80      	subs	r0, r0, r2
 80060ea:	d10d      	bne.n	8006108 <__mcmp+0x28>
 80060ec:	3314      	adds	r3, #20
 80060ee:	3114      	adds	r1, #20
 80060f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006100:	4295      	cmp	r5, r2
 8006102:	d002      	beq.n	800610a <__mcmp+0x2a>
 8006104:	d304      	bcc.n	8006110 <__mcmp+0x30>
 8006106:	2001      	movs	r0, #1
 8006108:	bd30      	pop	{r4, r5, pc}
 800610a:	42a3      	cmp	r3, r4
 800610c:	d3f4      	bcc.n	80060f8 <__mcmp+0x18>
 800610e:	e7fb      	b.n	8006108 <__mcmp+0x28>
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	e7f8      	b.n	8006108 <__mcmp+0x28>
	...

08006118 <__mdiff>:
 8006118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	460d      	mov	r5, r1
 800611e:	4607      	mov	r7, r0
 8006120:	4611      	mov	r1, r2
 8006122:	4628      	mov	r0, r5
 8006124:	4614      	mov	r4, r2
 8006126:	f7ff ffdb 	bl	80060e0 <__mcmp>
 800612a:	1e06      	subs	r6, r0, #0
 800612c:	d111      	bne.n	8006152 <__mdiff+0x3a>
 800612e:	4631      	mov	r1, r6
 8006130:	4638      	mov	r0, r7
 8006132:	f7ff fd57 	bl	8005be4 <_Balloc>
 8006136:	4602      	mov	r2, r0
 8006138:	b928      	cbnz	r0, 8006146 <__mdiff+0x2e>
 800613a:	f240 2132 	movw	r1, #562	; 0x232
 800613e:	4b3a      	ldr	r3, [pc, #232]	; (8006228 <__mdiff+0x110>)
 8006140:	483a      	ldr	r0, [pc, #232]	; (800622c <__mdiff+0x114>)
 8006142:	f000 fb2d 	bl	80067a0 <__assert_func>
 8006146:	2301      	movs	r3, #1
 8006148:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800614c:	4610      	mov	r0, r2
 800614e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006152:	bfa4      	itt	ge
 8006154:	4623      	movge	r3, r4
 8006156:	462c      	movge	r4, r5
 8006158:	4638      	mov	r0, r7
 800615a:	6861      	ldr	r1, [r4, #4]
 800615c:	bfa6      	itte	ge
 800615e:	461d      	movge	r5, r3
 8006160:	2600      	movge	r6, #0
 8006162:	2601      	movlt	r6, #1
 8006164:	f7ff fd3e 	bl	8005be4 <_Balloc>
 8006168:	4602      	mov	r2, r0
 800616a:	b918      	cbnz	r0, 8006174 <__mdiff+0x5c>
 800616c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006170:	4b2d      	ldr	r3, [pc, #180]	; (8006228 <__mdiff+0x110>)
 8006172:	e7e5      	b.n	8006140 <__mdiff+0x28>
 8006174:	f102 0814 	add.w	r8, r2, #20
 8006178:	46c2      	mov	sl, r8
 800617a:	f04f 0c00 	mov.w	ip, #0
 800617e:	6927      	ldr	r7, [r4, #16]
 8006180:	60c6      	str	r6, [r0, #12]
 8006182:	692e      	ldr	r6, [r5, #16]
 8006184:	f104 0014 	add.w	r0, r4, #20
 8006188:	f105 0914 	add.w	r9, r5, #20
 800618c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006190:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006194:	3410      	adds	r4, #16
 8006196:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800619a:	f859 3b04 	ldr.w	r3, [r9], #4
 800619e:	fa1f f18b 	uxth.w	r1, fp
 80061a2:	448c      	add	ip, r1
 80061a4:	b299      	uxth	r1, r3
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	ebac 0101 	sub.w	r1, ip, r1
 80061ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80061b4:	b289      	uxth	r1, r1
 80061b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80061ba:	454e      	cmp	r6, r9
 80061bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80061c0:	f84a 3b04 	str.w	r3, [sl], #4
 80061c4:	d8e7      	bhi.n	8006196 <__mdiff+0x7e>
 80061c6:	1b73      	subs	r3, r6, r5
 80061c8:	3b15      	subs	r3, #21
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	3515      	adds	r5, #21
 80061d0:	3304      	adds	r3, #4
 80061d2:	42ae      	cmp	r6, r5
 80061d4:	bf38      	it	cc
 80061d6:	2304      	movcc	r3, #4
 80061d8:	4418      	add	r0, r3
 80061da:	4443      	add	r3, r8
 80061dc:	461e      	mov	r6, r3
 80061de:	4605      	mov	r5, r0
 80061e0:	4575      	cmp	r5, lr
 80061e2:	d30e      	bcc.n	8006202 <__mdiff+0xea>
 80061e4:	f10e 0103 	add.w	r1, lr, #3
 80061e8:	1a09      	subs	r1, r1, r0
 80061ea:	f021 0103 	bic.w	r1, r1, #3
 80061ee:	3803      	subs	r0, #3
 80061f0:	4586      	cmp	lr, r0
 80061f2:	bf38      	it	cc
 80061f4:	2100      	movcc	r1, #0
 80061f6:	4419      	add	r1, r3
 80061f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80061fc:	b18b      	cbz	r3, 8006222 <__mdiff+0x10a>
 80061fe:	6117      	str	r7, [r2, #16]
 8006200:	e7a4      	b.n	800614c <__mdiff+0x34>
 8006202:	f855 8b04 	ldr.w	r8, [r5], #4
 8006206:	fa1f f188 	uxth.w	r1, r8
 800620a:	4461      	add	r1, ip
 800620c:	140c      	asrs	r4, r1, #16
 800620e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006212:	b289      	uxth	r1, r1
 8006214:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006218:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800621c:	f846 1b04 	str.w	r1, [r6], #4
 8006220:	e7de      	b.n	80061e0 <__mdiff+0xc8>
 8006222:	3f01      	subs	r7, #1
 8006224:	e7e8      	b.n	80061f8 <__mdiff+0xe0>
 8006226:	bf00      	nop
 8006228:	08007477 	.word	0x08007477
 800622c:	08007488 	.word	0x08007488

08006230 <__d2b>:
 8006230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006234:	2101      	movs	r1, #1
 8006236:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800623a:	4690      	mov	r8, r2
 800623c:	461d      	mov	r5, r3
 800623e:	f7ff fcd1 	bl	8005be4 <_Balloc>
 8006242:	4604      	mov	r4, r0
 8006244:	b930      	cbnz	r0, 8006254 <__d2b+0x24>
 8006246:	4602      	mov	r2, r0
 8006248:	f240 310a 	movw	r1, #778	; 0x30a
 800624c:	4b24      	ldr	r3, [pc, #144]	; (80062e0 <__d2b+0xb0>)
 800624e:	4825      	ldr	r0, [pc, #148]	; (80062e4 <__d2b+0xb4>)
 8006250:	f000 faa6 	bl	80067a0 <__assert_func>
 8006254:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006258:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800625c:	bb2d      	cbnz	r5, 80062aa <__d2b+0x7a>
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	f1b8 0300 	subs.w	r3, r8, #0
 8006264:	d026      	beq.n	80062b4 <__d2b+0x84>
 8006266:	4668      	mov	r0, sp
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	f7ff fd83 	bl	8005d74 <__lo0bits>
 800626e:	9900      	ldr	r1, [sp, #0]
 8006270:	b1f0      	cbz	r0, 80062b0 <__d2b+0x80>
 8006272:	9a01      	ldr	r2, [sp, #4]
 8006274:	f1c0 0320 	rsb	r3, r0, #32
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	430b      	orrs	r3, r1
 800627e:	40c2      	lsrs	r2, r0
 8006280:	6163      	str	r3, [r4, #20]
 8006282:	9201      	str	r2, [sp, #4]
 8006284:	9b01      	ldr	r3, [sp, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf14      	ite	ne
 800628a:	2102      	movne	r1, #2
 800628c:	2101      	moveq	r1, #1
 800628e:	61a3      	str	r3, [r4, #24]
 8006290:	6121      	str	r1, [r4, #16]
 8006292:	b1c5      	cbz	r5, 80062c6 <__d2b+0x96>
 8006294:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006298:	4405      	add	r5, r0
 800629a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800629e:	603d      	str	r5, [r7, #0]
 80062a0:	6030      	str	r0, [r6, #0]
 80062a2:	4620      	mov	r0, r4
 80062a4:	b002      	add	sp, #8
 80062a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ae:	e7d6      	b.n	800625e <__d2b+0x2e>
 80062b0:	6161      	str	r1, [r4, #20]
 80062b2:	e7e7      	b.n	8006284 <__d2b+0x54>
 80062b4:	a801      	add	r0, sp, #4
 80062b6:	f7ff fd5d 	bl	8005d74 <__lo0bits>
 80062ba:	2101      	movs	r1, #1
 80062bc:	9b01      	ldr	r3, [sp, #4]
 80062be:	6121      	str	r1, [r4, #16]
 80062c0:	6163      	str	r3, [r4, #20]
 80062c2:	3020      	adds	r0, #32
 80062c4:	e7e5      	b.n	8006292 <__d2b+0x62>
 80062c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80062ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062ce:	6038      	str	r0, [r7, #0]
 80062d0:	6918      	ldr	r0, [r3, #16]
 80062d2:	f7ff fd2f 	bl	8005d34 <__hi0bits>
 80062d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80062da:	6031      	str	r1, [r6, #0]
 80062dc:	e7e1      	b.n	80062a2 <__d2b+0x72>
 80062de:	bf00      	nop
 80062e0:	08007477 	.word	0x08007477
 80062e4:	08007488 	.word	0x08007488

080062e8 <_calloc_r>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	fba1 5402 	umull	r5, r4, r1, r2
 80062ee:	b934      	cbnz	r4, 80062fe <_calloc_r+0x16>
 80062f0:	4629      	mov	r1, r5
 80062f2:	f000 f875 	bl	80063e0 <_malloc_r>
 80062f6:	4606      	mov	r6, r0
 80062f8:	b928      	cbnz	r0, 8006306 <_calloc_r+0x1e>
 80062fa:	4630      	mov	r0, r6
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	220c      	movs	r2, #12
 8006300:	2600      	movs	r6, #0
 8006302:	6002      	str	r2, [r0, #0]
 8006304:	e7f9      	b.n	80062fa <_calloc_r+0x12>
 8006306:	462a      	mov	r2, r5
 8006308:	4621      	mov	r1, r4
 800630a:	f7fe f941 	bl	8004590 <memset>
 800630e:	e7f4      	b.n	80062fa <_calloc_r+0x12>

08006310 <_free_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4605      	mov	r5, r0
 8006314:	2900      	cmp	r1, #0
 8006316:	d040      	beq.n	800639a <_free_r+0x8a>
 8006318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800631c:	1f0c      	subs	r4, r1, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfb8      	it	lt
 8006322:	18e4      	addlt	r4, r4, r3
 8006324:	f000 fa98 	bl	8006858 <__malloc_lock>
 8006328:	4a1c      	ldr	r2, [pc, #112]	; (800639c <_free_r+0x8c>)
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	b933      	cbnz	r3, 800633c <_free_r+0x2c>
 800632e:	6063      	str	r3, [r4, #4]
 8006330:	6014      	str	r4, [r2, #0]
 8006332:	4628      	mov	r0, r5
 8006334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006338:	f000 ba94 	b.w	8006864 <__malloc_unlock>
 800633c:	42a3      	cmp	r3, r4
 800633e:	d908      	bls.n	8006352 <_free_r+0x42>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	1821      	adds	r1, r4, r0
 8006344:	428b      	cmp	r3, r1
 8006346:	bf01      	itttt	eq
 8006348:	6819      	ldreq	r1, [r3, #0]
 800634a:	685b      	ldreq	r3, [r3, #4]
 800634c:	1809      	addeq	r1, r1, r0
 800634e:	6021      	streq	r1, [r4, #0]
 8006350:	e7ed      	b.n	800632e <_free_r+0x1e>
 8006352:	461a      	mov	r2, r3
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	b10b      	cbz	r3, 800635c <_free_r+0x4c>
 8006358:	42a3      	cmp	r3, r4
 800635a:	d9fa      	bls.n	8006352 <_free_r+0x42>
 800635c:	6811      	ldr	r1, [r2, #0]
 800635e:	1850      	adds	r0, r2, r1
 8006360:	42a0      	cmp	r0, r4
 8006362:	d10b      	bne.n	800637c <_free_r+0x6c>
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	4401      	add	r1, r0
 8006368:	1850      	adds	r0, r2, r1
 800636a:	4283      	cmp	r3, r0
 800636c:	6011      	str	r1, [r2, #0]
 800636e:	d1e0      	bne.n	8006332 <_free_r+0x22>
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4401      	add	r1, r0
 8006376:	6011      	str	r1, [r2, #0]
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	e7da      	b.n	8006332 <_free_r+0x22>
 800637c:	d902      	bls.n	8006384 <_free_r+0x74>
 800637e:	230c      	movs	r3, #12
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	e7d6      	b.n	8006332 <_free_r+0x22>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	1821      	adds	r1, r4, r0
 8006388:	428b      	cmp	r3, r1
 800638a:	bf01      	itttt	eq
 800638c:	6819      	ldreq	r1, [r3, #0]
 800638e:	685b      	ldreq	r3, [r3, #4]
 8006390:	1809      	addeq	r1, r1, r0
 8006392:	6021      	streq	r1, [r4, #0]
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	6054      	str	r4, [r2, #4]
 8006398:	e7cb      	b.n	8006332 <_free_r+0x22>
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000370 	.word	0x20000370

080063a0 <sbrk_aligned>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	4e0e      	ldr	r6, [pc, #56]	; (80063dc <sbrk_aligned+0x3c>)
 80063a4:	460c      	mov	r4, r1
 80063a6:	6831      	ldr	r1, [r6, #0]
 80063a8:	4605      	mov	r5, r0
 80063aa:	b911      	cbnz	r1, 80063b2 <sbrk_aligned+0x12>
 80063ac:	f000 f9e8 	bl	8006780 <_sbrk_r>
 80063b0:	6030      	str	r0, [r6, #0]
 80063b2:	4621      	mov	r1, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	f000 f9e3 	bl	8006780 <_sbrk_r>
 80063ba:	1c43      	adds	r3, r0, #1
 80063bc:	d00a      	beq.n	80063d4 <sbrk_aligned+0x34>
 80063be:	1cc4      	adds	r4, r0, #3
 80063c0:	f024 0403 	bic.w	r4, r4, #3
 80063c4:	42a0      	cmp	r0, r4
 80063c6:	d007      	beq.n	80063d8 <sbrk_aligned+0x38>
 80063c8:	1a21      	subs	r1, r4, r0
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 f9d8 	bl	8006780 <_sbrk_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	d101      	bne.n	80063d8 <sbrk_aligned+0x38>
 80063d4:	f04f 34ff 	mov.w	r4, #4294967295
 80063d8:	4620      	mov	r0, r4
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	20000374 	.word	0x20000374

080063e0 <_malloc_r>:
 80063e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e4:	1ccd      	adds	r5, r1, #3
 80063e6:	f025 0503 	bic.w	r5, r5, #3
 80063ea:	3508      	adds	r5, #8
 80063ec:	2d0c      	cmp	r5, #12
 80063ee:	bf38      	it	cc
 80063f0:	250c      	movcc	r5, #12
 80063f2:	2d00      	cmp	r5, #0
 80063f4:	4607      	mov	r7, r0
 80063f6:	db01      	blt.n	80063fc <_malloc_r+0x1c>
 80063f8:	42a9      	cmp	r1, r5
 80063fa:	d905      	bls.n	8006408 <_malloc_r+0x28>
 80063fc:	230c      	movs	r3, #12
 80063fe:	2600      	movs	r6, #0
 8006400:	603b      	str	r3, [r7, #0]
 8006402:	4630      	mov	r0, r6
 8006404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006408:	4e2e      	ldr	r6, [pc, #184]	; (80064c4 <_malloc_r+0xe4>)
 800640a:	f000 fa25 	bl	8006858 <__malloc_lock>
 800640e:	6833      	ldr	r3, [r6, #0]
 8006410:	461c      	mov	r4, r3
 8006412:	bb34      	cbnz	r4, 8006462 <_malloc_r+0x82>
 8006414:	4629      	mov	r1, r5
 8006416:	4638      	mov	r0, r7
 8006418:	f7ff ffc2 	bl	80063a0 <sbrk_aligned>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	4604      	mov	r4, r0
 8006420:	d14d      	bne.n	80064be <_malloc_r+0xde>
 8006422:	6834      	ldr	r4, [r6, #0]
 8006424:	4626      	mov	r6, r4
 8006426:	2e00      	cmp	r6, #0
 8006428:	d140      	bne.n	80064ac <_malloc_r+0xcc>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	4631      	mov	r1, r6
 800642e:	4638      	mov	r0, r7
 8006430:	eb04 0803 	add.w	r8, r4, r3
 8006434:	f000 f9a4 	bl	8006780 <_sbrk_r>
 8006438:	4580      	cmp	r8, r0
 800643a:	d13a      	bne.n	80064b2 <_malloc_r+0xd2>
 800643c:	6821      	ldr	r1, [r4, #0]
 800643e:	3503      	adds	r5, #3
 8006440:	1a6d      	subs	r5, r5, r1
 8006442:	f025 0503 	bic.w	r5, r5, #3
 8006446:	3508      	adds	r5, #8
 8006448:	2d0c      	cmp	r5, #12
 800644a:	bf38      	it	cc
 800644c:	250c      	movcc	r5, #12
 800644e:	4638      	mov	r0, r7
 8006450:	4629      	mov	r1, r5
 8006452:	f7ff ffa5 	bl	80063a0 <sbrk_aligned>
 8006456:	3001      	adds	r0, #1
 8006458:	d02b      	beq.n	80064b2 <_malloc_r+0xd2>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	442b      	add	r3, r5
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	e00e      	b.n	8006480 <_malloc_r+0xa0>
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	1b52      	subs	r2, r2, r5
 8006466:	d41e      	bmi.n	80064a6 <_malloc_r+0xc6>
 8006468:	2a0b      	cmp	r2, #11
 800646a:	d916      	bls.n	800649a <_malloc_r+0xba>
 800646c:	1961      	adds	r1, r4, r5
 800646e:	42a3      	cmp	r3, r4
 8006470:	6025      	str	r5, [r4, #0]
 8006472:	bf18      	it	ne
 8006474:	6059      	strne	r1, [r3, #4]
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	bf08      	it	eq
 800647a:	6031      	streq	r1, [r6, #0]
 800647c:	5162      	str	r2, [r4, r5]
 800647e:	604b      	str	r3, [r1, #4]
 8006480:	4638      	mov	r0, r7
 8006482:	f104 060b 	add.w	r6, r4, #11
 8006486:	f000 f9ed 	bl	8006864 <__malloc_unlock>
 800648a:	f026 0607 	bic.w	r6, r6, #7
 800648e:	1d23      	adds	r3, r4, #4
 8006490:	1af2      	subs	r2, r6, r3
 8006492:	d0b6      	beq.n	8006402 <_malloc_r+0x22>
 8006494:	1b9b      	subs	r3, r3, r6
 8006496:	50a3      	str	r3, [r4, r2]
 8006498:	e7b3      	b.n	8006402 <_malloc_r+0x22>
 800649a:	6862      	ldr	r2, [r4, #4]
 800649c:	42a3      	cmp	r3, r4
 800649e:	bf0c      	ite	eq
 80064a0:	6032      	streq	r2, [r6, #0]
 80064a2:	605a      	strne	r2, [r3, #4]
 80064a4:	e7ec      	b.n	8006480 <_malloc_r+0xa0>
 80064a6:	4623      	mov	r3, r4
 80064a8:	6864      	ldr	r4, [r4, #4]
 80064aa:	e7b2      	b.n	8006412 <_malloc_r+0x32>
 80064ac:	4634      	mov	r4, r6
 80064ae:	6876      	ldr	r6, [r6, #4]
 80064b0:	e7b9      	b.n	8006426 <_malloc_r+0x46>
 80064b2:	230c      	movs	r3, #12
 80064b4:	4638      	mov	r0, r7
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	f000 f9d4 	bl	8006864 <__malloc_unlock>
 80064bc:	e7a1      	b.n	8006402 <_malloc_r+0x22>
 80064be:	6025      	str	r5, [r4, #0]
 80064c0:	e7de      	b.n	8006480 <_malloc_r+0xa0>
 80064c2:	bf00      	nop
 80064c4:	20000370 	.word	0x20000370

080064c8 <__ssputs_r>:
 80064c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064cc:	688e      	ldr	r6, [r1, #8]
 80064ce:	4682      	mov	sl, r0
 80064d0:	429e      	cmp	r6, r3
 80064d2:	460c      	mov	r4, r1
 80064d4:	4690      	mov	r8, r2
 80064d6:	461f      	mov	r7, r3
 80064d8:	d838      	bhi.n	800654c <__ssputs_r+0x84>
 80064da:	898a      	ldrh	r2, [r1, #12]
 80064dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064e0:	d032      	beq.n	8006548 <__ssputs_r+0x80>
 80064e2:	6825      	ldr	r5, [r4, #0]
 80064e4:	6909      	ldr	r1, [r1, #16]
 80064e6:	3301      	adds	r3, #1
 80064e8:	eba5 0901 	sub.w	r9, r5, r1
 80064ec:	6965      	ldr	r5, [r4, #20]
 80064ee:	444b      	add	r3, r9
 80064f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064f8:	106d      	asrs	r5, r5, #1
 80064fa:	429d      	cmp	r5, r3
 80064fc:	bf38      	it	cc
 80064fe:	461d      	movcc	r5, r3
 8006500:	0553      	lsls	r3, r2, #21
 8006502:	d531      	bpl.n	8006568 <__ssputs_r+0xa0>
 8006504:	4629      	mov	r1, r5
 8006506:	f7ff ff6b 	bl	80063e0 <_malloc_r>
 800650a:	4606      	mov	r6, r0
 800650c:	b950      	cbnz	r0, 8006524 <__ssputs_r+0x5c>
 800650e:	230c      	movs	r3, #12
 8006510:	f04f 30ff 	mov.w	r0, #4294967295
 8006514:	f8ca 3000 	str.w	r3, [sl]
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006524:	464a      	mov	r2, r9
 8006526:	6921      	ldr	r1, [r4, #16]
 8006528:	f7ff fb4e 	bl	8005bc8 <memcpy>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	6126      	str	r6, [r4, #16]
 800653a:	444e      	add	r6, r9
 800653c:	6026      	str	r6, [r4, #0]
 800653e:	463e      	mov	r6, r7
 8006540:	6165      	str	r5, [r4, #20]
 8006542:	eba5 0509 	sub.w	r5, r5, r9
 8006546:	60a5      	str	r5, [r4, #8]
 8006548:	42be      	cmp	r6, r7
 800654a:	d900      	bls.n	800654e <__ssputs_r+0x86>
 800654c:	463e      	mov	r6, r7
 800654e:	4632      	mov	r2, r6
 8006550:	4641      	mov	r1, r8
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	f000 f966 	bl	8006824 <memmove>
 8006558:	68a3      	ldr	r3, [r4, #8]
 800655a:	2000      	movs	r0, #0
 800655c:	1b9b      	subs	r3, r3, r6
 800655e:	60a3      	str	r3, [r4, #8]
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	4433      	add	r3, r6
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	e7db      	b.n	8006520 <__ssputs_r+0x58>
 8006568:	462a      	mov	r2, r5
 800656a:	f000 f981 	bl	8006870 <_realloc_r>
 800656e:	4606      	mov	r6, r0
 8006570:	2800      	cmp	r0, #0
 8006572:	d1e1      	bne.n	8006538 <__ssputs_r+0x70>
 8006574:	4650      	mov	r0, sl
 8006576:	6921      	ldr	r1, [r4, #16]
 8006578:	f7ff feca 	bl	8006310 <_free_r>
 800657c:	e7c7      	b.n	800650e <__ssputs_r+0x46>
	...

08006580 <_svfiprintf_r>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	4698      	mov	r8, r3
 8006586:	898b      	ldrh	r3, [r1, #12]
 8006588:	4607      	mov	r7, r0
 800658a:	061b      	lsls	r3, r3, #24
 800658c:	460d      	mov	r5, r1
 800658e:	4614      	mov	r4, r2
 8006590:	b09d      	sub	sp, #116	; 0x74
 8006592:	d50e      	bpl.n	80065b2 <_svfiprintf_r+0x32>
 8006594:	690b      	ldr	r3, [r1, #16]
 8006596:	b963      	cbnz	r3, 80065b2 <_svfiprintf_r+0x32>
 8006598:	2140      	movs	r1, #64	; 0x40
 800659a:	f7ff ff21 	bl	80063e0 <_malloc_r>
 800659e:	6028      	str	r0, [r5, #0]
 80065a0:	6128      	str	r0, [r5, #16]
 80065a2:	b920      	cbnz	r0, 80065ae <_svfiprintf_r+0x2e>
 80065a4:	230c      	movs	r3, #12
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e0d1      	b.n	8006752 <_svfiprintf_r+0x1d2>
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	616b      	str	r3, [r5, #20]
 80065b2:	2300      	movs	r3, #0
 80065b4:	9309      	str	r3, [sp, #36]	; 0x24
 80065b6:	2320      	movs	r3, #32
 80065b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065bc:	2330      	movs	r3, #48	; 0x30
 80065be:	f04f 0901 	mov.w	r9, #1
 80065c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80065c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800676c <_svfiprintf_r+0x1ec>
 80065ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ce:	4623      	mov	r3, r4
 80065d0:	469a      	mov	sl, r3
 80065d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065d6:	b10a      	cbz	r2, 80065dc <_svfiprintf_r+0x5c>
 80065d8:	2a25      	cmp	r2, #37	; 0x25
 80065da:	d1f9      	bne.n	80065d0 <_svfiprintf_r+0x50>
 80065dc:	ebba 0b04 	subs.w	fp, sl, r4
 80065e0:	d00b      	beq.n	80065fa <_svfiprintf_r+0x7a>
 80065e2:	465b      	mov	r3, fp
 80065e4:	4622      	mov	r2, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	4638      	mov	r0, r7
 80065ea:	f7ff ff6d 	bl	80064c8 <__ssputs_r>
 80065ee:	3001      	adds	r0, #1
 80065f0:	f000 80aa 	beq.w	8006748 <_svfiprintf_r+0x1c8>
 80065f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065f6:	445a      	add	r2, fp
 80065f8:	9209      	str	r2, [sp, #36]	; 0x24
 80065fa:	f89a 3000 	ldrb.w	r3, [sl]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 80a2 	beq.w	8006748 <_svfiprintf_r+0x1c8>
 8006604:	2300      	movs	r3, #0
 8006606:	f04f 32ff 	mov.w	r2, #4294967295
 800660a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800660e:	f10a 0a01 	add.w	sl, sl, #1
 8006612:	9304      	str	r3, [sp, #16]
 8006614:	9307      	str	r3, [sp, #28]
 8006616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800661a:	931a      	str	r3, [sp, #104]	; 0x68
 800661c:	4654      	mov	r4, sl
 800661e:	2205      	movs	r2, #5
 8006620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006624:	4851      	ldr	r0, [pc, #324]	; (800676c <_svfiprintf_r+0x1ec>)
 8006626:	f7ff fac1 	bl	8005bac <memchr>
 800662a:	9a04      	ldr	r2, [sp, #16]
 800662c:	b9d8      	cbnz	r0, 8006666 <_svfiprintf_r+0xe6>
 800662e:	06d0      	lsls	r0, r2, #27
 8006630:	bf44      	itt	mi
 8006632:	2320      	movmi	r3, #32
 8006634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006638:	0711      	lsls	r1, r2, #28
 800663a:	bf44      	itt	mi
 800663c:	232b      	movmi	r3, #43	; 0x2b
 800663e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006642:	f89a 3000 	ldrb.w	r3, [sl]
 8006646:	2b2a      	cmp	r3, #42	; 0x2a
 8006648:	d015      	beq.n	8006676 <_svfiprintf_r+0xf6>
 800664a:	4654      	mov	r4, sl
 800664c:	2000      	movs	r0, #0
 800664e:	f04f 0c0a 	mov.w	ip, #10
 8006652:	9a07      	ldr	r2, [sp, #28]
 8006654:	4621      	mov	r1, r4
 8006656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800665a:	3b30      	subs	r3, #48	; 0x30
 800665c:	2b09      	cmp	r3, #9
 800665e:	d94e      	bls.n	80066fe <_svfiprintf_r+0x17e>
 8006660:	b1b0      	cbz	r0, 8006690 <_svfiprintf_r+0x110>
 8006662:	9207      	str	r2, [sp, #28]
 8006664:	e014      	b.n	8006690 <_svfiprintf_r+0x110>
 8006666:	eba0 0308 	sub.w	r3, r0, r8
 800666a:	fa09 f303 	lsl.w	r3, r9, r3
 800666e:	4313      	orrs	r3, r2
 8006670:	46a2      	mov	sl, r4
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	e7d2      	b.n	800661c <_svfiprintf_r+0x9c>
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	1d19      	adds	r1, r3, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	9103      	str	r1, [sp, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfbb      	ittet	lt
 8006682:	425b      	neglt	r3, r3
 8006684:	f042 0202 	orrlt.w	r2, r2, #2
 8006688:	9307      	strge	r3, [sp, #28]
 800668a:	9307      	strlt	r3, [sp, #28]
 800668c:	bfb8      	it	lt
 800668e:	9204      	strlt	r2, [sp, #16]
 8006690:	7823      	ldrb	r3, [r4, #0]
 8006692:	2b2e      	cmp	r3, #46	; 0x2e
 8006694:	d10c      	bne.n	80066b0 <_svfiprintf_r+0x130>
 8006696:	7863      	ldrb	r3, [r4, #1]
 8006698:	2b2a      	cmp	r3, #42	; 0x2a
 800669a:	d135      	bne.n	8006708 <_svfiprintf_r+0x188>
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	3402      	adds	r4, #2
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	9203      	str	r2, [sp, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfb8      	it	lt
 80066aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80066ae:	9305      	str	r3, [sp, #20]
 80066b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006770 <_svfiprintf_r+0x1f0>
 80066b4:	2203      	movs	r2, #3
 80066b6:	4650      	mov	r0, sl
 80066b8:	7821      	ldrb	r1, [r4, #0]
 80066ba:	f7ff fa77 	bl	8005bac <memchr>
 80066be:	b140      	cbz	r0, 80066d2 <_svfiprintf_r+0x152>
 80066c0:	2340      	movs	r3, #64	; 0x40
 80066c2:	eba0 000a 	sub.w	r0, r0, sl
 80066c6:	fa03 f000 	lsl.w	r0, r3, r0
 80066ca:	9b04      	ldr	r3, [sp, #16]
 80066cc:	3401      	adds	r4, #1
 80066ce:	4303      	orrs	r3, r0
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d6:	2206      	movs	r2, #6
 80066d8:	4826      	ldr	r0, [pc, #152]	; (8006774 <_svfiprintf_r+0x1f4>)
 80066da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066de:	f7ff fa65 	bl	8005bac <memchr>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d038      	beq.n	8006758 <_svfiprintf_r+0x1d8>
 80066e6:	4b24      	ldr	r3, [pc, #144]	; (8006778 <_svfiprintf_r+0x1f8>)
 80066e8:	bb1b      	cbnz	r3, 8006732 <_svfiprintf_r+0x1b2>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	3307      	adds	r3, #7
 80066ee:	f023 0307 	bic.w	r3, r3, #7
 80066f2:	3308      	adds	r3, #8
 80066f4:	9303      	str	r3, [sp, #12]
 80066f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f8:	4433      	add	r3, r6
 80066fa:	9309      	str	r3, [sp, #36]	; 0x24
 80066fc:	e767      	b.n	80065ce <_svfiprintf_r+0x4e>
 80066fe:	460c      	mov	r4, r1
 8006700:	2001      	movs	r0, #1
 8006702:	fb0c 3202 	mla	r2, ip, r2, r3
 8006706:	e7a5      	b.n	8006654 <_svfiprintf_r+0xd4>
 8006708:	2300      	movs	r3, #0
 800670a:	f04f 0c0a 	mov.w	ip, #10
 800670e:	4619      	mov	r1, r3
 8006710:	3401      	adds	r4, #1
 8006712:	9305      	str	r3, [sp, #20]
 8006714:	4620      	mov	r0, r4
 8006716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800671a:	3a30      	subs	r2, #48	; 0x30
 800671c:	2a09      	cmp	r2, #9
 800671e:	d903      	bls.n	8006728 <_svfiprintf_r+0x1a8>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0c5      	beq.n	80066b0 <_svfiprintf_r+0x130>
 8006724:	9105      	str	r1, [sp, #20]
 8006726:	e7c3      	b.n	80066b0 <_svfiprintf_r+0x130>
 8006728:	4604      	mov	r4, r0
 800672a:	2301      	movs	r3, #1
 800672c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006730:	e7f0      	b.n	8006714 <_svfiprintf_r+0x194>
 8006732:	ab03      	add	r3, sp, #12
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	462a      	mov	r2, r5
 8006738:	4638      	mov	r0, r7
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <_svfiprintf_r+0x1fc>)
 800673c:	a904      	add	r1, sp, #16
 800673e:	f7fd ffcd 	bl	80046dc <_printf_float>
 8006742:	1c42      	adds	r2, r0, #1
 8006744:	4606      	mov	r6, r0
 8006746:	d1d6      	bne.n	80066f6 <_svfiprintf_r+0x176>
 8006748:	89ab      	ldrh	r3, [r5, #12]
 800674a:	065b      	lsls	r3, r3, #25
 800674c:	f53f af2c 	bmi.w	80065a8 <_svfiprintf_r+0x28>
 8006750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006752:	b01d      	add	sp, #116	; 0x74
 8006754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006758:	ab03      	add	r3, sp, #12
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	462a      	mov	r2, r5
 800675e:	4638      	mov	r0, r7
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <_svfiprintf_r+0x1fc>)
 8006762:	a904      	add	r1, sp, #16
 8006764:	f7fe fa56 	bl	8004c14 <_printf_i>
 8006768:	e7eb      	b.n	8006742 <_svfiprintf_r+0x1c2>
 800676a:	bf00      	nop
 800676c:	080075e4 	.word	0x080075e4
 8006770:	080075ea 	.word	0x080075ea
 8006774:	080075ee 	.word	0x080075ee
 8006778:	080046dd 	.word	0x080046dd
 800677c:	080064c9 	.word	0x080064c9

08006780 <_sbrk_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	2300      	movs	r3, #0
 8006784:	4d05      	ldr	r5, [pc, #20]	; (800679c <_sbrk_r+0x1c>)
 8006786:	4604      	mov	r4, r0
 8006788:	4608      	mov	r0, r1
 800678a:	602b      	str	r3, [r5, #0]
 800678c:	f7fa ffb6 	bl	80016fc <_sbrk>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_sbrk_r+0x1a>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_sbrk_r+0x1a>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	20000378 	.word	0x20000378

080067a0 <__assert_func>:
 80067a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067a2:	4614      	mov	r4, r2
 80067a4:	461a      	mov	r2, r3
 80067a6:	4b09      	ldr	r3, [pc, #36]	; (80067cc <__assert_func+0x2c>)
 80067a8:	4605      	mov	r5, r0
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68d8      	ldr	r0, [r3, #12]
 80067ae:	b14c      	cbz	r4, 80067c4 <__assert_func+0x24>
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <__assert_func+0x30>)
 80067b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067b6:	9100      	str	r1, [sp, #0]
 80067b8:	462b      	mov	r3, r5
 80067ba:	4906      	ldr	r1, [pc, #24]	; (80067d4 <__assert_func+0x34>)
 80067bc:	f000 f80e 	bl	80067dc <fiprintf>
 80067c0:	f000 faaa 	bl	8006d18 <abort>
 80067c4:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <__assert_func+0x38>)
 80067c6:	461c      	mov	r4, r3
 80067c8:	e7f3      	b.n	80067b2 <__assert_func+0x12>
 80067ca:	bf00      	nop
 80067cc:	2000000c 	.word	0x2000000c
 80067d0:	080075f5 	.word	0x080075f5
 80067d4:	08007602 	.word	0x08007602
 80067d8:	08007630 	.word	0x08007630

080067dc <fiprintf>:
 80067dc:	b40e      	push	{r1, r2, r3}
 80067de:	b503      	push	{r0, r1, lr}
 80067e0:	4601      	mov	r1, r0
 80067e2:	ab03      	add	r3, sp, #12
 80067e4:	4805      	ldr	r0, [pc, #20]	; (80067fc <fiprintf+0x20>)
 80067e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	f000 f895 	bl	800691c <_vfiprintf_r>
 80067f2:	b002      	add	sp, #8
 80067f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f8:	b003      	add	sp, #12
 80067fa:	4770      	bx	lr
 80067fc:	2000000c 	.word	0x2000000c

08006800 <__ascii_mbtowc>:
 8006800:	b082      	sub	sp, #8
 8006802:	b901      	cbnz	r1, 8006806 <__ascii_mbtowc+0x6>
 8006804:	a901      	add	r1, sp, #4
 8006806:	b142      	cbz	r2, 800681a <__ascii_mbtowc+0x1a>
 8006808:	b14b      	cbz	r3, 800681e <__ascii_mbtowc+0x1e>
 800680a:	7813      	ldrb	r3, [r2, #0]
 800680c:	600b      	str	r3, [r1, #0]
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	1e10      	subs	r0, r2, #0
 8006812:	bf18      	it	ne
 8006814:	2001      	movne	r0, #1
 8006816:	b002      	add	sp, #8
 8006818:	4770      	bx	lr
 800681a:	4610      	mov	r0, r2
 800681c:	e7fb      	b.n	8006816 <__ascii_mbtowc+0x16>
 800681e:	f06f 0001 	mvn.w	r0, #1
 8006822:	e7f8      	b.n	8006816 <__ascii_mbtowc+0x16>

08006824 <memmove>:
 8006824:	4288      	cmp	r0, r1
 8006826:	b510      	push	{r4, lr}
 8006828:	eb01 0402 	add.w	r4, r1, r2
 800682c:	d902      	bls.n	8006834 <memmove+0x10>
 800682e:	4284      	cmp	r4, r0
 8006830:	4623      	mov	r3, r4
 8006832:	d807      	bhi.n	8006844 <memmove+0x20>
 8006834:	1e43      	subs	r3, r0, #1
 8006836:	42a1      	cmp	r1, r4
 8006838:	d008      	beq.n	800684c <memmove+0x28>
 800683a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800683e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006842:	e7f8      	b.n	8006836 <memmove+0x12>
 8006844:	4601      	mov	r1, r0
 8006846:	4402      	add	r2, r0
 8006848:	428a      	cmp	r2, r1
 800684a:	d100      	bne.n	800684e <memmove+0x2a>
 800684c:	bd10      	pop	{r4, pc}
 800684e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006856:	e7f7      	b.n	8006848 <memmove+0x24>

08006858 <__malloc_lock>:
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <__malloc_lock+0x8>)
 800685a:	f000 bc19 	b.w	8007090 <__retarget_lock_acquire_recursive>
 800685e:	bf00      	nop
 8006860:	2000037c 	.word	0x2000037c

08006864 <__malloc_unlock>:
 8006864:	4801      	ldr	r0, [pc, #4]	; (800686c <__malloc_unlock+0x8>)
 8006866:	f000 bc14 	b.w	8007092 <__retarget_lock_release_recursive>
 800686a:	bf00      	nop
 800686c:	2000037c 	.word	0x2000037c

08006870 <_realloc_r>:
 8006870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	4680      	mov	r8, r0
 8006876:	4614      	mov	r4, r2
 8006878:	460e      	mov	r6, r1
 800687a:	b921      	cbnz	r1, 8006886 <_realloc_r+0x16>
 800687c:	4611      	mov	r1, r2
 800687e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006882:	f7ff bdad 	b.w	80063e0 <_malloc_r>
 8006886:	b92a      	cbnz	r2, 8006894 <_realloc_r+0x24>
 8006888:	f7ff fd42 	bl	8006310 <_free_r>
 800688c:	4625      	mov	r5, r4
 800688e:	4628      	mov	r0, r5
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006894:	f000 fc64 	bl	8007160 <_malloc_usable_size_r>
 8006898:	4284      	cmp	r4, r0
 800689a:	4607      	mov	r7, r0
 800689c:	d802      	bhi.n	80068a4 <_realloc_r+0x34>
 800689e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068a2:	d812      	bhi.n	80068ca <_realloc_r+0x5a>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4640      	mov	r0, r8
 80068a8:	f7ff fd9a 	bl	80063e0 <_malloc_r>
 80068ac:	4605      	mov	r5, r0
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d0ed      	beq.n	800688e <_realloc_r+0x1e>
 80068b2:	42bc      	cmp	r4, r7
 80068b4:	4622      	mov	r2, r4
 80068b6:	4631      	mov	r1, r6
 80068b8:	bf28      	it	cs
 80068ba:	463a      	movcs	r2, r7
 80068bc:	f7ff f984 	bl	8005bc8 <memcpy>
 80068c0:	4631      	mov	r1, r6
 80068c2:	4640      	mov	r0, r8
 80068c4:	f7ff fd24 	bl	8006310 <_free_r>
 80068c8:	e7e1      	b.n	800688e <_realloc_r+0x1e>
 80068ca:	4635      	mov	r5, r6
 80068cc:	e7df      	b.n	800688e <_realloc_r+0x1e>

080068ce <__sfputc_r>:
 80068ce:	6893      	ldr	r3, [r2, #8]
 80068d0:	b410      	push	{r4}
 80068d2:	3b01      	subs	r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	6093      	str	r3, [r2, #8]
 80068d8:	da07      	bge.n	80068ea <__sfputc_r+0x1c>
 80068da:	6994      	ldr	r4, [r2, #24]
 80068dc:	42a3      	cmp	r3, r4
 80068de:	db01      	blt.n	80068e4 <__sfputc_r+0x16>
 80068e0:	290a      	cmp	r1, #10
 80068e2:	d102      	bne.n	80068ea <__sfputc_r+0x1c>
 80068e4:	bc10      	pop	{r4}
 80068e6:	f000 b949 	b.w	8006b7c <__swbuf_r>
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	1c58      	adds	r0, r3, #1
 80068ee:	6010      	str	r0, [r2, #0]
 80068f0:	7019      	strb	r1, [r3, #0]
 80068f2:	4608      	mov	r0, r1
 80068f4:	bc10      	pop	{r4}
 80068f6:	4770      	bx	lr

080068f8 <__sfputs_r>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	4606      	mov	r6, r0
 80068fc:	460f      	mov	r7, r1
 80068fe:	4614      	mov	r4, r2
 8006900:	18d5      	adds	r5, r2, r3
 8006902:	42ac      	cmp	r4, r5
 8006904:	d101      	bne.n	800690a <__sfputs_r+0x12>
 8006906:	2000      	movs	r0, #0
 8006908:	e007      	b.n	800691a <__sfputs_r+0x22>
 800690a:	463a      	mov	r2, r7
 800690c:	4630      	mov	r0, r6
 800690e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006912:	f7ff ffdc 	bl	80068ce <__sfputc_r>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d1f3      	bne.n	8006902 <__sfputs_r+0xa>
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800691c <_vfiprintf_r>:
 800691c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	460d      	mov	r5, r1
 8006922:	4614      	mov	r4, r2
 8006924:	4698      	mov	r8, r3
 8006926:	4606      	mov	r6, r0
 8006928:	b09d      	sub	sp, #116	; 0x74
 800692a:	b118      	cbz	r0, 8006934 <_vfiprintf_r+0x18>
 800692c:	6983      	ldr	r3, [r0, #24]
 800692e:	b90b      	cbnz	r3, 8006934 <_vfiprintf_r+0x18>
 8006930:	f000 fb10 	bl	8006f54 <__sinit>
 8006934:	4b89      	ldr	r3, [pc, #548]	; (8006b5c <_vfiprintf_r+0x240>)
 8006936:	429d      	cmp	r5, r3
 8006938:	d11b      	bne.n	8006972 <_vfiprintf_r+0x56>
 800693a:	6875      	ldr	r5, [r6, #4]
 800693c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800693e:	07d9      	lsls	r1, r3, #31
 8006940:	d405      	bmi.n	800694e <_vfiprintf_r+0x32>
 8006942:	89ab      	ldrh	r3, [r5, #12]
 8006944:	059a      	lsls	r2, r3, #22
 8006946:	d402      	bmi.n	800694e <_vfiprintf_r+0x32>
 8006948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800694a:	f000 fba1 	bl	8007090 <__retarget_lock_acquire_recursive>
 800694e:	89ab      	ldrh	r3, [r5, #12]
 8006950:	071b      	lsls	r3, r3, #28
 8006952:	d501      	bpl.n	8006958 <_vfiprintf_r+0x3c>
 8006954:	692b      	ldr	r3, [r5, #16]
 8006956:	b9eb      	cbnz	r3, 8006994 <_vfiprintf_r+0x78>
 8006958:	4629      	mov	r1, r5
 800695a:	4630      	mov	r0, r6
 800695c:	f000 f96e 	bl	8006c3c <__swsetup_r>
 8006960:	b1c0      	cbz	r0, 8006994 <_vfiprintf_r+0x78>
 8006962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006964:	07dc      	lsls	r4, r3, #31
 8006966:	d50e      	bpl.n	8006986 <_vfiprintf_r+0x6a>
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	b01d      	add	sp, #116	; 0x74
 800696e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006972:	4b7b      	ldr	r3, [pc, #492]	; (8006b60 <_vfiprintf_r+0x244>)
 8006974:	429d      	cmp	r5, r3
 8006976:	d101      	bne.n	800697c <_vfiprintf_r+0x60>
 8006978:	68b5      	ldr	r5, [r6, #8]
 800697a:	e7df      	b.n	800693c <_vfiprintf_r+0x20>
 800697c:	4b79      	ldr	r3, [pc, #484]	; (8006b64 <_vfiprintf_r+0x248>)
 800697e:	429d      	cmp	r5, r3
 8006980:	bf08      	it	eq
 8006982:	68f5      	ldreq	r5, [r6, #12]
 8006984:	e7da      	b.n	800693c <_vfiprintf_r+0x20>
 8006986:	89ab      	ldrh	r3, [r5, #12]
 8006988:	0598      	lsls	r0, r3, #22
 800698a:	d4ed      	bmi.n	8006968 <_vfiprintf_r+0x4c>
 800698c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800698e:	f000 fb80 	bl	8007092 <__retarget_lock_release_recursive>
 8006992:	e7e9      	b.n	8006968 <_vfiprintf_r+0x4c>
 8006994:	2300      	movs	r3, #0
 8006996:	9309      	str	r3, [sp, #36]	; 0x24
 8006998:	2320      	movs	r3, #32
 800699a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800699e:	2330      	movs	r3, #48	; 0x30
 80069a0:	f04f 0901 	mov.w	r9, #1
 80069a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80069a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b68 <_vfiprintf_r+0x24c>
 80069ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069b0:	4623      	mov	r3, r4
 80069b2:	469a      	mov	sl, r3
 80069b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069b8:	b10a      	cbz	r2, 80069be <_vfiprintf_r+0xa2>
 80069ba:	2a25      	cmp	r2, #37	; 0x25
 80069bc:	d1f9      	bne.n	80069b2 <_vfiprintf_r+0x96>
 80069be:	ebba 0b04 	subs.w	fp, sl, r4
 80069c2:	d00b      	beq.n	80069dc <_vfiprintf_r+0xc0>
 80069c4:	465b      	mov	r3, fp
 80069c6:	4622      	mov	r2, r4
 80069c8:	4629      	mov	r1, r5
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7ff ff94 	bl	80068f8 <__sfputs_r>
 80069d0:	3001      	adds	r0, #1
 80069d2:	f000 80aa 	beq.w	8006b2a <_vfiprintf_r+0x20e>
 80069d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d8:	445a      	add	r2, fp
 80069da:	9209      	str	r2, [sp, #36]	; 0x24
 80069dc:	f89a 3000 	ldrb.w	r3, [sl]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80a2 	beq.w	8006b2a <_vfiprintf_r+0x20e>
 80069e6:	2300      	movs	r3, #0
 80069e8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069f0:	f10a 0a01 	add.w	sl, sl, #1
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069fc:	931a      	str	r3, [sp, #104]	; 0x68
 80069fe:	4654      	mov	r4, sl
 8006a00:	2205      	movs	r2, #5
 8006a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a06:	4858      	ldr	r0, [pc, #352]	; (8006b68 <_vfiprintf_r+0x24c>)
 8006a08:	f7ff f8d0 	bl	8005bac <memchr>
 8006a0c:	9a04      	ldr	r2, [sp, #16]
 8006a0e:	b9d8      	cbnz	r0, 8006a48 <_vfiprintf_r+0x12c>
 8006a10:	06d1      	lsls	r1, r2, #27
 8006a12:	bf44      	itt	mi
 8006a14:	2320      	movmi	r3, #32
 8006a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a1a:	0713      	lsls	r3, r2, #28
 8006a1c:	bf44      	itt	mi
 8006a1e:	232b      	movmi	r3, #43	; 0x2b
 8006a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a24:	f89a 3000 	ldrb.w	r3, [sl]
 8006a28:	2b2a      	cmp	r3, #42	; 0x2a
 8006a2a:	d015      	beq.n	8006a58 <_vfiprintf_r+0x13c>
 8006a2c:	4654      	mov	r4, sl
 8006a2e:	2000      	movs	r0, #0
 8006a30:	f04f 0c0a 	mov.w	ip, #10
 8006a34:	9a07      	ldr	r2, [sp, #28]
 8006a36:	4621      	mov	r1, r4
 8006a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a3c:	3b30      	subs	r3, #48	; 0x30
 8006a3e:	2b09      	cmp	r3, #9
 8006a40:	d94e      	bls.n	8006ae0 <_vfiprintf_r+0x1c4>
 8006a42:	b1b0      	cbz	r0, 8006a72 <_vfiprintf_r+0x156>
 8006a44:	9207      	str	r2, [sp, #28]
 8006a46:	e014      	b.n	8006a72 <_vfiprintf_r+0x156>
 8006a48:	eba0 0308 	sub.w	r3, r0, r8
 8006a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	46a2      	mov	sl, r4
 8006a54:	9304      	str	r3, [sp, #16]
 8006a56:	e7d2      	b.n	80069fe <_vfiprintf_r+0xe2>
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	1d19      	adds	r1, r3, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	9103      	str	r1, [sp, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfbb      	ittet	lt
 8006a64:	425b      	neglt	r3, r3
 8006a66:	f042 0202 	orrlt.w	r2, r2, #2
 8006a6a:	9307      	strge	r3, [sp, #28]
 8006a6c:	9307      	strlt	r3, [sp, #28]
 8006a6e:	bfb8      	it	lt
 8006a70:	9204      	strlt	r2, [sp, #16]
 8006a72:	7823      	ldrb	r3, [r4, #0]
 8006a74:	2b2e      	cmp	r3, #46	; 0x2e
 8006a76:	d10c      	bne.n	8006a92 <_vfiprintf_r+0x176>
 8006a78:	7863      	ldrb	r3, [r4, #1]
 8006a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a7c:	d135      	bne.n	8006aea <_vfiprintf_r+0x1ce>
 8006a7e:	9b03      	ldr	r3, [sp, #12]
 8006a80:	3402      	adds	r4, #2
 8006a82:	1d1a      	adds	r2, r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	9203      	str	r2, [sp, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfb8      	it	lt
 8006a8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a90:	9305      	str	r3, [sp, #20]
 8006a92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006b6c <_vfiprintf_r+0x250>
 8006a96:	2203      	movs	r2, #3
 8006a98:	4650      	mov	r0, sl
 8006a9a:	7821      	ldrb	r1, [r4, #0]
 8006a9c:	f7ff f886 	bl	8005bac <memchr>
 8006aa0:	b140      	cbz	r0, 8006ab4 <_vfiprintf_r+0x198>
 8006aa2:	2340      	movs	r3, #64	; 0x40
 8006aa4:	eba0 000a 	sub.w	r0, r0, sl
 8006aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	3401      	adds	r4, #1
 8006ab0:	4303      	orrs	r3, r0
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab8:	2206      	movs	r2, #6
 8006aba:	482d      	ldr	r0, [pc, #180]	; (8006b70 <_vfiprintf_r+0x254>)
 8006abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ac0:	f7ff f874 	bl	8005bac <memchr>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d03f      	beq.n	8006b48 <_vfiprintf_r+0x22c>
 8006ac8:	4b2a      	ldr	r3, [pc, #168]	; (8006b74 <_vfiprintf_r+0x258>)
 8006aca:	bb1b      	cbnz	r3, 8006b14 <_vfiprintf_r+0x1f8>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	3307      	adds	r3, #7
 8006ad0:	f023 0307 	bic.w	r3, r3, #7
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	9303      	str	r3, [sp, #12]
 8006ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ada:	443b      	add	r3, r7
 8006adc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ade:	e767      	b.n	80069b0 <_vfiprintf_r+0x94>
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ae8:	e7a5      	b.n	8006a36 <_vfiprintf_r+0x11a>
 8006aea:	2300      	movs	r3, #0
 8006aec:	f04f 0c0a 	mov.w	ip, #10
 8006af0:	4619      	mov	r1, r3
 8006af2:	3401      	adds	r4, #1
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	4620      	mov	r0, r4
 8006af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006afc:	3a30      	subs	r2, #48	; 0x30
 8006afe:	2a09      	cmp	r2, #9
 8006b00:	d903      	bls.n	8006b0a <_vfiprintf_r+0x1ee>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c5      	beq.n	8006a92 <_vfiprintf_r+0x176>
 8006b06:	9105      	str	r1, [sp, #20]
 8006b08:	e7c3      	b.n	8006a92 <_vfiprintf_r+0x176>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b12:	e7f0      	b.n	8006af6 <_vfiprintf_r+0x1da>
 8006b14:	ab03      	add	r3, sp, #12
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <_vfiprintf_r+0x25c>)
 8006b1e:	a904      	add	r1, sp, #16
 8006b20:	f7fd fddc 	bl	80046dc <_printf_float>
 8006b24:	4607      	mov	r7, r0
 8006b26:	1c78      	adds	r0, r7, #1
 8006b28:	d1d6      	bne.n	8006ad8 <_vfiprintf_r+0x1bc>
 8006b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b2c:	07d9      	lsls	r1, r3, #31
 8006b2e:	d405      	bmi.n	8006b3c <_vfiprintf_r+0x220>
 8006b30:	89ab      	ldrh	r3, [r5, #12]
 8006b32:	059a      	lsls	r2, r3, #22
 8006b34:	d402      	bmi.n	8006b3c <_vfiprintf_r+0x220>
 8006b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b38:	f000 faab 	bl	8007092 <__retarget_lock_release_recursive>
 8006b3c:	89ab      	ldrh	r3, [r5, #12]
 8006b3e:	065b      	lsls	r3, r3, #25
 8006b40:	f53f af12 	bmi.w	8006968 <_vfiprintf_r+0x4c>
 8006b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b46:	e711      	b.n	800696c <_vfiprintf_r+0x50>
 8006b48:	ab03      	add	r3, sp, #12
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	4630      	mov	r0, r6
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <_vfiprintf_r+0x25c>)
 8006b52:	a904      	add	r1, sp, #16
 8006b54:	f7fe f85e 	bl	8004c14 <_printf_i>
 8006b58:	e7e4      	b.n	8006b24 <_vfiprintf_r+0x208>
 8006b5a:	bf00      	nop
 8006b5c:	0800775c 	.word	0x0800775c
 8006b60:	0800777c 	.word	0x0800777c
 8006b64:	0800773c 	.word	0x0800773c
 8006b68:	080075e4 	.word	0x080075e4
 8006b6c:	080075ea 	.word	0x080075ea
 8006b70:	080075ee 	.word	0x080075ee
 8006b74:	080046dd 	.word	0x080046dd
 8006b78:	080068f9 	.word	0x080068f9

08006b7c <__swbuf_r>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	460e      	mov	r6, r1
 8006b80:	4614      	mov	r4, r2
 8006b82:	4605      	mov	r5, r0
 8006b84:	b118      	cbz	r0, 8006b8e <__swbuf_r+0x12>
 8006b86:	6983      	ldr	r3, [r0, #24]
 8006b88:	b90b      	cbnz	r3, 8006b8e <__swbuf_r+0x12>
 8006b8a:	f000 f9e3 	bl	8006f54 <__sinit>
 8006b8e:	4b21      	ldr	r3, [pc, #132]	; (8006c14 <__swbuf_r+0x98>)
 8006b90:	429c      	cmp	r4, r3
 8006b92:	d12b      	bne.n	8006bec <__swbuf_r+0x70>
 8006b94:	686c      	ldr	r4, [r5, #4]
 8006b96:	69a3      	ldr	r3, [r4, #24]
 8006b98:	60a3      	str	r3, [r4, #8]
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	071a      	lsls	r2, r3, #28
 8006b9e:	d52f      	bpl.n	8006c00 <__swbuf_r+0x84>
 8006ba0:	6923      	ldr	r3, [r4, #16]
 8006ba2:	b36b      	cbz	r3, 8006c00 <__swbuf_r+0x84>
 8006ba4:	6923      	ldr	r3, [r4, #16]
 8006ba6:	6820      	ldr	r0, [r4, #0]
 8006ba8:	b2f6      	uxtb	r6, r6
 8006baa:	1ac0      	subs	r0, r0, r3
 8006bac:	6963      	ldr	r3, [r4, #20]
 8006bae:	4637      	mov	r7, r6
 8006bb0:	4283      	cmp	r3, r0
 8006bb2:	dc04      	bgt.n	8006bbe <__swbuf_r+0x42>
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 f938 	bl	8006e2c <_fflush_r>
 8006bbc:	bb30      	cbnz	r0, 8006c0c <__swbuf_r+0x90>
 8006bbe:	68a3      	ldr	r3, [r4, #8]
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	60a3      	str	r3, [r4, #8]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	701e      	strb	r6, [r3, #0]
 8006bce:	6963      	ldr	r3, [r4, #20]
 8006bd0:	4283      	cmp	r3, r0
 8006bd2:	d004      	beq.n	8006bde <__swbuf_r+0x62>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	07db      	lsls	r3, r3, #31
 8006bd8:	d506      	bpl.n	8006be8 <__swbuf_r+0x6c>
 8006bda:	2e0a      	cmp	r6, #10
 8006bdc:	d104      	bne.n	8006be8 <__swbuf_r+0x6c>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 f923 	bl	8006e2c <_fflush_r>
 8006be6:	b988      	cbnz	r0, 8006c0c <__swbuf_r+0x90>
 8006be8:	4638      	mov	r0, r7
 8006bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bec:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <__swbuf_r+0x9c>)
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d101      	bne.n	8006bf6 <__swbuf_r+0x7a>
 8006bf2:	68ac      	ldr	r4, [r5, #8]
 8006bf4:	e7cf      	b.n	8006b96 <__swbuf_r+0x1a>
 8006bf6:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <__swbuf_r+0xa0>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	bf08      	it	eq
 8006bfc:	68ec      	ldreq	r4, [r5, #12]
 8006bfe:	e7ca      	b.n	8006b96 <__swbuf_r+0x1a>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	f000 f81a 	bl	8006c3c <__swsetup_r>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d0cb      	beq.n	8006ba4 <__swbuf_r+0x28>
 8006c0c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c10:	e7ea      	b.n	8006be8 <__swbuf_r+0x6c>
 8006c12:	bf00      	nop
 8006c14:	0800775c 	.word	0x0800775c
 8006c18:	0800777c 	.word	0x0800777c
 8006c1c:	0800773c 	.word	0x0800773c

08006c20 <__ascii_wctomb>:
 8006c20:	4603      	mov	r3, r0
 8006c22:	4608      	mov	r0, r1
 8006c24:	b141      	cbz	r1, 8006c38 <__ascii_wctomb+0x18>
 8006c26:	2aff      	cmp	r2, #255	; 0xff
 8006c28:	d904      	bls.n	8006c34 <__ascii_wctomb+0x14>
 8006c2a:	228a      	movs	r2, #138	; 0x8a
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	4770      	bx	lr
 8006c34:	2001      	movs	r0, #1
 8006c36:	700a      	strb	r2, [r1, #0]
 8006c38:	4770      	bx	lr
	...

08006c3c <__swsetup_r>:
 8006c3c:	4b32      	ldr	r3, [pc, #200]	; (8006d08 <__swsetup_r+0xcc>)
 8006c3e:	b570      	push	{r4, r5, r6, lr}
 8006c40:	681d      	ldr	r5, [r3, #0]
 8006c42:	4606      	mov	r6, r0
 8006c44:	460c      	mov	r4, r1
 8006c46:	b125      	cbz	r5, 8006c52 <__swsetup_r+0x16>
 8006c48:	69ab      	ldr	r3, [r5, #24]
 8006c4a:	b913      	cbnz	r3, 8006c52 <__swsetup_r+0x16>
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f981 	bl	8006f54 <__sinit>
 8006c52:	4b2e      	ldr	r3, [pc, #184]	; (8006d0c <__swsetup_r+0xd0>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	d10f      	bne.n	8006c78 <__swsetup_r+0x3c>
 8006c58:	686c      	ldr	r4, [r5, #4]
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c60:	0719      	lsls	r1, r3, #28
 8006c62:	d42c      	bmi.n	8006cbe <__swsetup_r+0x82>
 8006c64:	06dd      	lsls	r5, r3, #27
 8006c66:	d411      	bmi.n	8006c8c <__swsetup_r+0x50>
 8006c68:	2309      	movs	r3, #9
 8006c6a:	6033      	str	r3, [r6, #0]
 8006c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	e03e      	b.n	8006cf6 <__swsetup_r+0xba>
 8006c78:	4b25      	ldr	r3, [pc, #148]	; (8006d10 <__swsetup_r+0xd4>)
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	d101      	bne.n	8006c82 <__swsetup_r+0x46>
 8006c7e:	68ac      	ldr	r4, [r5, #8]
 8006c80:	e7eb      	b.n	8006c5a <__swsetup_r+0x1e>
 8006c82:	4b24      	ldr	r3, [pc, #144]	; (8006d14 <__swsetup_r+0xd8>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	bf08      	it	eq
 8006c88:	68ec      	ldreq	r4, [r5, #12]
 8006c8a:	e7e6      	b.n	8006c5a <__swsetup_r+0x1e>
 8006c8c:	0758      	lsls	r0, r3, #29
 8006c8e:	d512      	bpl.n	8006cb6 <__swsetup_r+0x7a>
 8006c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c92:	b141      	cbz	r1, 8006ca6 <__swsetup_r+0x6a>
 8006c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c98:	4299      	cmp	r1, r3
 8006c9a:	d002      	beq.n	8006ca2 <__swsetup_r+0x66>
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f7ff fb37 	bl	8006310 <_free_r>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cac:	81a3      	strh	r3, [r4, #12]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	6063      	str	r3, [r4, #4]
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f043 0308 	orr.w	r3, r3, #8
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	b94b      	cbnz	r3, 8006cd6 <__swsetup_r+0x9a>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ccc:	d003      	beq.n	8006cd6 <__swsetup_r+0x9a>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f000 fa05 	bl	80070e0 <__smakebuf_r>
 8006cd6:	89a0      	ldrh	r0, [r4, #12]
 8006cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cdc:	f010 0301 	ands.w	r3, r0, #1
 8006ce0:	d00a      	beq.n	8006cf8 <__swsetup_r+0xbc>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60a3      	str	r3, [r4, #8]
 8006ce6:	6963      	ldr	r3, [r4, #20]
 8006ce8:	425b      	negs	r3, r3
 8006cea:	61a3      	str	r3, [r4, #24]
 8006cec:	6923      	ldr	r3, [r4, #16]
 8006cee:	b943      	cbnz	r3, 8006d02 <__swsetup_r+0xc6>
 8006cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cf4:	d1ba      	bne.n	8006c6c <__swsetup_r+0x30>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	0781      	lsls	r1, r0, #30
 8006cfa:	bf58      	it	pl
 8006cfc:	6963      	ldrpl	r3, [r4, #20]
 8006cfe:	60a3      	str	r3, [r4, #8]
 8006d00:	e7f4      	b.n	8006cec <__swsetup_r+0xb0>
 8006d02:	2000      	movs	r0, #0
 8006d04:	e7f7      	b.n	8006cf6 <__swsetup_r+0xba>
 8006d06:	bf00      	nop
 8006d08:	2000000c 	.word	0x2000000c
 8006d0c:	0800775c 	.word	0x0800775c
 8006d10:	0800777c 	.word	0x0800777c
 8006d14:	0800773c 	.word	0x0800773c

08006d18 <abort>:
 8006d18:	2006      	movs	r0, #6
 8006d1a:	b508      	push	{r3, lr}
 8006d1c:	f000 fa50 	bl	80071c0 <raise>
 8006d20:	2001      	movs	r0, #1
 8006d22:	f7fa fc78 	bl	8001616 <_exit>
	...

08006d28 <__sflush_r>:
 8006d28:	898a      	ldrh	r2, [r1, #12]
 8006d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	0710      	lsls	r0, r2, #28
 8006d30:	460c      	mov	r4, r1
 8006d32:	d457      	bmi.n	8006de4 <__sflush_r+0xbc>
 8006d34:	684b      	ldr	r3, [r1, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	dc04      	bgt.n	8006d44 <__sflush_r+0x1c>
 8006d3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dc01      	bgt.n	8006d44 <__sflush_r+0x1c>
 8006d40:	2000      	movs	r0, #0
 8006d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	d0fa      	beq.n	8006d40 <__sflush_r+0x18>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d50:	682f      	ldr	r7, [r5, #0]
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	d032      	beq.n	8006dbc <__sflush_r+0x94>
 8006d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	075a      	lsls	r2, r3, #29
 8006d5c:	d505      	bpl.n	8006d6a <__sflush_r+0x42>
 8006d5e:	6863      	ldr	r3, [r4, #4]
 8006d60:	1ac0      	subs	r0, r0, r3
 8006d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d64:	b10b      	cbz	r3, 8006d6a <__sflush_r+0x42>
 8006d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d68:	1ac0      	subs	r0, r0, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d70:	4628      	mov	r0, r5
 8006d72:	6a21      	ldr	r1, [r4, #32]
 8006d74:	47b0      	blx	r6
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	d106      	bne.n	8006d8a <__sflush_r+0x62>
 8006d7c:	6829      	ldr	r1, [r5, #0]
 8006d7e:	291d      	cmp	r1, #29
 8006d80:	d82c      	bhi.n	8006ddc <__sflush_r+0xb4>
 8006d82:	4a29      	ldr	r2, [pc, #164]	; (8006e28 <__sflush_r+0x100>)
 8006d84:	40ca      	lsrs	r2, r1
 8006d86:	07d6      	lsls	r6, r2, #31
 8006d88:	d528      	bpl.n	8006ddc <__sflush_r+0xb4>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	6062      	str	r2, [r4, #4]
 8006d8e:	6922      	ldr	r2, [r4, #16]
 8006d90:	04d9      	lsls	r1, r3, #19
 8006d92:	6022      	str	r2, [r4, #0]
 8006d94:	d504      	bpl.n	8006da0 <__sflush_r+0x78>
 8006d96:	1c42      	adds	r2, r0, #1
 8006d98:	d101      	bne.n	8006d9e <__sflush_r+0x76>
 8006d9a:	682b      	ldr	r3, [r5, #0]
 8006d9c:	b903      	cbnz	r3, 8006da0 <__sflush_r+0x78>
 8006d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8006da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006da2:	602f      	str	r7, [r5, #0]
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d0cb      	beq.n	8006d40 <__sflush_r+0x18>
 8006da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dac:	4299      	cmp	r1, r3
 8006dae:	d002      	beq.n	8006db6 <__sflush_r+0x8e>
 8006db0:	4628      	mov	r0, r5
 8006db2:	f7ff faad 	bl	8006310 <_free_r>
 8006db6:	2000      	movs	r0, #0
 8006db8:	6360      	str	r0, [r4, #52]	; 0x34
 8006dba:	e7c2      	b.n	8006d42 <__sflush_r+0x1a>
 8006dbc:	6a21      	ldr	r1, [r4, #32]
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b0      	blx	r6
 8006dc4:	1c41      	adds	r1, r0, #1
 8006dc6:	d1c7      	bne.n	8006d58 <__sflush_r+0x30>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0c4      	beq.n	8006d58 <__sflush_r+0x30>
 8006dce:	2b1d      	cmp	r3, #29
 8006dd0:	d001      	beq.n	8006dd6 <__sflush_r+0xae>
 8006dd2:	2b16      	cmp	r3, #22
 8006dd4:	d101      	bne.n	8006dda <__sflush_r+0xb2>
 8006dd6:	602f      	str	r7, [r5, #0]
 8006dd8:	e7b2      	b.n	8006d40 <__sflush_r+0x18>
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	e7ae      	b.n	8006d42 <__sflush_r+0x1a>
 8006de4:	690f      	ldr	r7, [r1, #16]
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	d0aa      	beq.n	8006d40 <__sflush_r+0x18>
 8006dea:	0793      	lsls	r3, r2, #30
 8006dec:	bf18      	it	ne
 8006dee:	2300      	movne	r3, #0
 8006df0:	680e      	ldr	r6, [r1, #0]
 8006df2:	bf08      	it	eq
 8006df4:	694b      	ldreq	r3, [r1, #20]
 8006df6:	1bf6      	subs	r6, r6, r7
 8006df8:	600f      	str	r7, [r1, #0]
 8006dfa:	608b      	str	r3, [r1, #8]
 8006dfc:	2e00      	cmp	r6, #0
 8006dfe:	dd9f      	ble.n	8006d40 <__sflush_r+0x18>
 8006e00:	4633      	mov	r3, r6
 8006e02:	463a      	mov	r2, r7
 8006e04:	4628      	mov	r0, r5
 8006e06:	6a21      	ldr	r1, [r4, #32]
 8006e08:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e0c:	47e0      	blx	ip
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	dc06      	bgt.n	8006e20 <__sflush_r+0xf8>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	e790      	b.n	8006d42 <__sflush_r+0x1a>
 8006e20:	4407      	add	r7, r0
 8006e22:	1a36      	subs	r6, r6, r0
 8006e24:	e7ea      	b.n	8006dfc <__sflush_r+0xd4>
 8006e26:	bf00      	nop
 8006e28:	20400001 	.word	0x20400001

08006e2c <_fflush_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	690b      	ldr	r3, [r1, #16]
 8006e30:	4605      	mov	r5, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	b913      	cbnz	r3, 8006e3c <_fflush_r+0x10>
 8006e36:	2500      	movs	r5, #0
 8006e38:	4628      	mov	r0, r5
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	b118      	cbz	r0, 8006e46 <_fflush_r+0x1a>
 8006e3e:	6983      	ldr	r3, [r0, #24]
 8006e40:	b90b      	cbnz	r3, 8006e46 <_fflush_r+0x1a>
 8006e42:	f000 f887 	bl	8006f54 <__sinit>
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <_fflush_r+0x6c>)
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	d11b      	bne.n	8006e84 <_fflush_r+0x58>
 8006e4c:	686c      	ldr	r4, [r5, #4]
 8006e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0ef      	beq.n	8006e36 <_fflush_r+0xa>
 8006e56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e58:	07d0      	lsls	r0, r2, #31
 8006e5a:	d404      	bmi.n	8006e66 <_fflush_r+0x3a>
 8006e5c:	0599      	lsls	r1, r3, #22
 8006e5e:	d402      	bmi.n	8006e66 <_fflush_r+0x3a>
 8006e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e62:	f000 f915 	bl	8007090 <__retarget_lock_acquire_recursive>
 8006e66:	4628      	mov	r0, r5
 8006e68:	4621      	mov	r1, r4
 8006e6a:	f7ff ff5d 	bl	8006d28 <__sflush_r>
 8006e6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e70:	4605      	mov	r5, r0
 8006e72:	07da      	lsls	r2, r3, #31
 8006e74:	d4e0      	bmi.n	8006e38 <_fflush_r+0xc>
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	059b      	lsls	r3, r3, #22
 8006e7a:	d4dd      	bmi.n	8006e38 <_fflush_r+0xc>
 8006e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e7e:	f000 f908 	bl	8007092 <__retarget_lock_release_recursive>
 8006e82:	e7d9      	b.n	8006e38 <_fflush_r+0xc>
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <_fflush_r+0x70>)
 8006e86:	429c      	cmp	r4, r3
 8006e88:	d101      	bne.n	8006e8e <_fflush_r+0x62>
 8006e8a:	68ac      	ldr	r4, [r5, #8]
 8006e8c:	e7df      	b.n	8006e4e <_fflush_r+0x22>
 8006e8e:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <_fflush_r+0x74>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	bf08      	it	eq
 8006e94:	68ec      	ldreq	r4, [r5, #12]
 8006e96:	e7da      	b.n	8006e4e <_fflush_r+0x22>
 8006e98:	0800775c 	.word	0x0800775c
 8006e9c:	0800777c 	.word	0x0800777c
 8006ea0:	0800773c 	.word	0x0800773c

08006ea4 <std>:
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8006eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eb2:	6083      	str	r3, [r0, #8]
 8006eb4:	8181      	strh	r1, [r0, #12]
 8006eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8006eb8:	81c2      	strh	r2, [r0, #14]
 8006eba:	6183      	str	r3, [r0, #24]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	305c      	adds	r0, #92	; 0x5c
 8006ec2:	f7fd fb65 	bl	8004590 <memset>
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <std+0x38>)
 8006ec8:	6224      	str	r4, [r4, #32]
 8006eca:	6263      	str	r3, [r4, #36]	; 0x24
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <std+0x3c>)
 8006ece:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ed0:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <std+0x40>)
 8006ed2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ed4:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <std+0x44>)
 8006ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ed8:	bd10      	pop	{r4, pc}
 8006eda:	bf00      	nop
 8006edc:	080071f9 	.word	0x080071f9
 8006ee0:	0800721b 	.word	0x0800721b
 8006ee4:	08007253 	.word	0x08007253
 8006ee8:	08007277 	.word	0x08007277

08006eec <_cleanup_r>:
 8006eec:	4901      	ldr	r1, [pc, #4]	; (8006ef4 <_cleanup_r+0x8>)
 8006eee:	f000 b8af 	b.w	8007050 <_fwalk_reent>
 8006ef2:	bf00      	nop
 8006ef4:	08006e2d 	.word	0x08006e2d

08006ef8 <__sfmoreglue>:
 8006ef8:	2268      	movs	r2, #104	; 0x68
 8006efa:	b570      	push	{r4, r5, r6, lr}
 8006efc:	1e4d      	subs	r5, r1, #1
 8006efe:	4355      	muls	r5, r2
 8006f00:	460e      	mov	r6, r1
 8006f02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f06:	f7ff fa6b 	bl	80063e0 <_malloc_r>
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	b140      	cbz	r0, 8006f20 <__sfmoreglue+0x28>
 8006f0e:	2100      	movs	r1, #0
 8006f10:	e9c0 1600 	strd	r1, r6, [r0]
 8006f14:	300c      	adds	r0, #12
 8006f16:	60a0      	str	r0, [r4, #8]
 8006f18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f1c:	f7fd fb38 	bl	8004590 <memset>
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}

08006f24 <__sfp_lock_acquire>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__sfp_lock_acquire+0x8>)
 8006f26:	f000 b8b3 	b.w	8007090 <__retarget_lock_acquire_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	2000037d 	.word	0x2000037d

08006f30 <__sfp_lock_release>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__sfp_lock_release+0x8>)
 8006f32:	f000 b8ae 	b.w	8007092 <__retarget_lock_release_recursive>
 8006f36:	bf00      	nop
 8006f38:	2000037d 	.word	0x2000037d

08006f3c <__sinit_lock_acquire>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__sinit_lock_acquire+0x8>)
 8006f3e:	f000 b8a7 	b.w	8007090 <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	2000037e 	.word	0x2000037e

08006f48 <__sinit_lock_release>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__sinit_lock_release+0x8>)
 8006f4a:	f000 b8a2 	b.w	8007092 <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	2000037e 	.word	0x2000037e

08006f54 <__sinit>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	4604      	mov	r4, r0
 8006f58:	f7ff fff0 	bl	8006f3c <__sinit_lock_acquire>
 8006f5c:	69a3      	ldr	r3, [r4, #24]
 8006f5e:	b11b      	cbz	r3, 8006f68 <__sinit+0x14>
 8006f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f64:	f7ff bff0 	b.w	8006f48 <__sinit_lock_release>
 8006f68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f6c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f6e:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <__sinit+0x68>)
 8006f70:	4a13      	ldr	r2, [pc, #76]	; (8006fc0 <__sinit+0x6c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f76:	42a3      	cmp	r3, r4
 8006f78:	bf08      	it	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	bf08      	it	eq
 8006f80:	61a3      	streq	r3, [r4, #24]
 8006f82:	f000 f81f 	bl	8006fc4 <__sfp>
 8006f86:	6060      	str	r0, [r4, #4]
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 f81b 	bl	8006fc4 <__sfp>
 8006f8e:	60a0      	str	r0, [r4, #8]
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 f817 	bl	8006fc4 <__sfp>
 8006f96:	2200      	movs	r2, #0
 8006f98:	2104      	movs	r1, #4
 8006f9a:	60e0      	str	r0, [r4, #12]
 8006f9c:	6860      	ldr	r0, [r4, #4]
 8006f9e:	f7ff ff81 	bl	8006ea4 <std>
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	2109      	movs	r1, #9
 8006fa6:	68a0      	ldr	r0, [r4, #8]
 8006fa8:	f7ff ff7c 	bl	8006ea4 <std>
 8006fac:	2202      	movs	r2, #2
 8006fae:	2112      	movs	r1, #18
 8006fb0:	68e0      	ldr	r0, [r4, #12]
 8006fb2:	f7ff ff77 	bl	8006ea4 <std>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	61a3      	str	r3, [r4, #24]
 8006fba:	e7d1      	b.n	8006f60 <__sinit+0xc>
 8006fbc:	080073c0 	.word	0x080073c0
 8006fc0:	08006eed 	.word	0x08006eed

08006fc4 <__sfp>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	f7ff ffac 	bl	8006f24 <__sfp_lock_acquire>
 8006fcc:	4b1e      	ldr	r3, [pc, #120]	; (8007048 <__sfp+0x84>)
 8006fce:	681e      	ldr	r6, [r3, #0]
 8006fd0:	69b3      	ldr	r3, [r6, #24]
 8006fd2:	b913      	cbnz	r3, 8006fda <__sfp+0x16>
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff ffbd 	bl	8006f54 <__sinit>
 8006fda:	3648      	adds	r6, #72	; 0x48
 8006fdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	d503      	bpl.n	8006fec <__sfp+0x28>
 8006fe4:	6833      	ldr	r3, [r6, #0]
 8006fe6:	b30b      	cbz	r3, 800702c <__sfp+0x68>
 8006fe8:	6836      	ldr	r6, [r6, #0]
 8006fea:	e7f7      	b.n	8006fdc <__sfp+0x18>
 8006fec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ff0:	b9d5      	cbnz	r5, 8007028 <__sfp+0x64>
 8006ff2:	4b16      	ldr	r3, [pc, #88]	; (800704c <__sfp+0x88>)
 8006ff4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ff8:	60e3      	str	r3, [r4, #12]
 8006ffa:	6665      	str	r5, [r4, #100]	; 0x64
 8006ffc:	f000 f847 	bl	800708e <__retarget_lock_init_recursive>
 8007000:	f7ff ff96 	bl	8006f30 <__sfp_lock_release>
 8007004:	2208      	movs	r2, #8
 8007006:	4629      	mov	r1, r5
 8007008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800700c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007010:	6025      	str	r5, [r4, #0]
 8007012:	61a5      	str	r5, [r4, #24]
 8007014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007018:	f7fd faba 	bl	8004590 <memset>
 800701c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007024:	4620      	mov	r0, r4
 8007026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007028:	3468      	adds	r4, #104	; 0x68
 800702a:	e7d9      	b.n	8006fe0 <__sfp+0x1c>
 800702c:	2104      	movs	r1, #4
 800702e:	4638      	mov	r0, r7
 8007030:	f7ff ff62 	bl	8006ef8 <__sfmoreglue>
 8007034:	4604      	mov	r4, r0
 8007036:	6030      	str	r0, [r6, #0]
 8007038:	2800      	cmp	r0, #0
 800703a:	d1d5      	bne.n	8006fe8 <__sfp+0x24>
 800703c:	f7ff ff78 	bl	8006f30 <__sfp_lock_release>
 8007040:	230c      	movs	r3, #12
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	e7ee      	b.n	8007024 <__sfp+0x60>
 8007046:	bf00      	nop
 8007048:	080073c0 	.word	0x080073c0
 800704c:	ffff0001 	.word	0xffff0001

08007050 <_fwalk_reent>:
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007054:	4606      	mov	r6, r0
 8007056:	4688      	mov	r8, r1
 8007058:	2700      	movs	r7, #0
 800705a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800705e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007062:	f1b9 0901 	subs.w	r9, r9, #1
 8007066:	d505      	bpl.n	8007074 <_fwalk_reent+0x24>
 8007068:	6824      	ldr	r4, [r4, #0]
 800706a:	2c00      	cmp	r4, #0
 800706c:	d1f7      	bne.n	800705e <_fwalk_reent+0xe>
 800706e:	4638      	mov	r0, r7
 8007070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007074:	89ab      	ldrh	r3, [r5, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d907      	bls.n	800708a <_fwalk_reent+0x3a>
 800707a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800707e:	3301      	adds	r3, #1
 8007080:	d003      	beq.n	800708a <_fwalk_reent+0x3a>
 8007082:	4629      	mov	r1, r5
 8007084:	4630      	mov	r0, r6
 8007086:	47c0      	blx	r8
 8007088:	4307      	orrs	r7, r0
 800708a:	3568      	adds	r5, #104	; 0x68
 800708c:	e7e9      	b.n	8007062 <_fwalk_reent+0x12>

0800708e <__retarget_lock_init_recursive>:
 800708e:	4770      	bx	lr

08007090 <__retarget_lock_acquire_recursive>:
 8007090:	4770      	bx	lr

08007092 <__retarget_lock_release_recursive>:
 8007092:	4770      	bx	lr

08007094 <__swhatbuf_r>:
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	460e      	mov	r6, r1
 8007098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709c:	4614      	mov	r4, r2
 800709e:	2900      	cmp	r1, #0
 80070a0:	461d      	mov	r5, r3
 80070a2:	b096      	sub	sp, #88	; 0x58
 80070a4:	da08      	bge.n	80070b8 <__swhatbuf_r+0x24>
 80070a6:	2200      	movs	r2, #0
 80070a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	061a      	lsls	r2, r3, #24
 80070b0:	d410      	bmi.n	80070d4 <__swhatbuf_r+0x40>
 80070b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070b6:	e00e      	b.n	80070d6 <__swhatbuf_r+0x42>
 80070b8:	466a      	mov	r2, sp
 80070ba:	f000 f903 	bl	80072c4 <_fstat_r>
 80070be:	2800      	cmp	r0, #0
 80070c0:	dbf1      	blt.n	80070a6 <__swhatbuf_r+0x12>
 80070c2:	9a01      	ldr	r2, [sp, #4]
 80070c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070cc:	425a      	negs	r2, r3
 80070ce:	415a      	adcs	r2, r3
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	e7ee      	b.n	80070b2 <__swhatbuf_r+0x1e>
 80070d4:	2340      	movs	r3, #64	; 0x40
 80070d6:	2000      	movs	r0, #0
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	b016      	add	sp, #88	; 0x58
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080070e0 <__smakebuf_r>:
 80070e0:	898b      	ldrh	r3, [r1, #12]
 80070e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070e4:	079d      	lsls	r5, r3, #30
 80070e6:	4606      	mov	r6, r0
 80070e8:	460c      	mov	r4, r1
 80070ea:	d507      	bpl.n	80070fc <__smakebuf_r+0x1c>
 80070ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	6123      	str	r3, [r4, #16]
 80070f4:	2301      	movs	r3, #1
 80070f6:	6163      	str	r3, [r4, #20]
 80070f8:	b002      	add	sp, #8
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	466a      	mov	r2, sp
 80070fe:	ab01      	add	r3, sp, #4
 8007100:	f7ff ffc8 	bl	8007094 <__swhatbuf_r>
 8007104:	9900      	ldr	r1, [sp, #0]
 8007106:	4605      	mov	r5, r0
 8007108:	4630      	mov	r0, r6
 800710a:	f7ff f969 	bl	80063e0 <_malloc_r>
 800710e:	b948      	cbnz	r0, 8007124 <__smakebuf_r+0x44>
 8007110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007114:	059a      	lsls	r2, r3, #22
 8007116:	d4ef      	bmi.n	80070f8 <__smakebuf_r+0x18>
 8007118:	f023 0303 	bic.w	r3, r3, #3
 800711c:	f043 0302 	orr.w	r3, r3, #2
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	e7e3      	b.n	80070ec <__smakebuf_r+0xc>
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <__smakebuf_r+0x7c>)
 8007126:	62b3      	str	r3, [r6, #40]	; 0x28
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	6020      	str	r0, [r4, #0]
 800712c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	9b00      	ldr	r3, [sp, #0]
 8007134:	6120      	str	r0, [r4, #16]
 8007136:	6163      	str	r3, [r4, #20]
 8007138:	9b01      	ldr	r3, [sp, #4]
 800713a:	b15b      	cbz	r3, 8007154 <__smakebuf_r+0x74>
 800713c:	4630      	mov	r0, r6
 800713e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007142:	f000 f8d1 	bl	80072e8 <_isatty_r>
 8007146:	b128      	cbz	r0, 8007154 <__smakebuf_r+0x74>
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	f023 0303 	bic.w	r3, r3, #3
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	81a3      	strh	r3, [r4, #12]
 8007154:	89a0      	ldrh	r0, [r4, #12]
 8007156:	4305      	orrs	r5, r0
 8007158:	81a5      	strh	r5, [r4, #12]
 800715a:	e7cd      	b.n	80070f8 <__smakebuf_r+0x18>
 800715c:	08006eed 	.word	0x08006eed

08007160 <_malloc_usable_size_r>:
 8007160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007164:	1f18      	subs	r0, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	bfbc      	itt	lt
 800716a:	580b      	ldrlt	r3, [r1, r0]
 800716c:	18c0      	addlt	r0, r0, r3
 800716e:	4770      	bx	lr

08007170 <_raise_r>:
 8007170:	291f      	cmp	r1, #31
 8007172:	b538      	push	{r3, r4, r5, lr}
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	d904      	bls.n	8007184 <_raise_r+0x14>
 800717a:	2316      	movs	r3, #22
 800717c:	6003      	str	r3, [r0, #0]
 800717e:	f04f 30ff 	mov.w	r0, #4294967295
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007186:	b112      	cbz	r2, 800718e <_raise_r+0x1e>
 8007188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800718c:	b94b      	cbnz	r3, 80071a2 <_raise_r+0x32>
 800718e:	4620      	mov	r0, r4
 8007190:	f000 f830 	bl	80071f4 <_getpid_r>
 8007194:	462a      	mov	r2, r5
 8007196:	4601      	mov	r1, r0
 8007198:	4620      	mov	r0, r4
 800719a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800719e:	f000 b817 	b.w	80071d0 <_kill_r>
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d00a      	beq.n	80071bc <_raise_r+0x4c>
 80071a6:	1c59      	adds	r1, r3, #1
 80071a8:	d103      	bne.n	80071b2 <_raise_r+0x42>
 80071aa:	2316      	movs	r3, #22
 80071ac:	6003      	str	r3, [r0, #0]
 80071ae:	2001      	movs	r0, #1
 80071b0:	e7e7      	b.n	8007182 <_raise_r+0x12>
 80071b2:	2400      	movs	r4, #0
 80071b4:	4628      	mov	r0, r5
 80071b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071ba:	4798      	blx	r3
 80071bc:	2000      	movs	r0, #0
 80071be:	e7e0      	b.n	8007182 <_raise_r+0x12>

080071c0 <raise>:
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <raise+0xc>)
 80071c2:	4601      	mov	r1, r0
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	f7ff bfd3 	b.w	8007170 <_raise_r>
 80071ca:	bf00      	nop
 80071cc:	2000000c 	.word	0x2000000c

080071d0 <_kill_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	2300      	movs	r3, #0
 80071d4:	4d06      	ldr	r5, [pc, #24]	; (80071f0 <_kill_r+0x20>)
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	602b      	str	r3, [r5, #0]
 80071de:	f7fa fa0a 	bl	80015f6 <_kill>
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	d102      	bne.n	80071ec <_kill_r+0x1c>
 80071e6:	682b      	ldr	r3, [r5, #0]
 80071e8:	b103      	cbz	r3, 80071ec <_kill_r+0x1c>
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	bf00      	nop
 80071f0:	20000378 	.word	0x20000378

080071f4 <_getpid_r>:
 80071f4:	f7fa b9f8 	b.w	80015e8 <_getpid>

080071f8 <__sread>:
 80071f8:	b510      	push	{r4, lr}
 80071fa:	460c      	mov	r4, r1
 80071fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007200:	f000 f894 	bl	800732c <_read_r>
 8007204:	2800      	cmp	r0, #0
 8007206:	bfab      	itete	ge
 8007208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800720a:	89a3      	ldrhlt	r3, [r4, #12]
 800720c:	181b      	addge	r3, r3, r0
 800720e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007212:	bfac      	ite	ge
 8007214:	6563      	strge	r3, [r4, #84]	; 0x54
 8007216:	81a3      	strhlt	r3, [r4, #12]
 8007218:	bd10      	pop	{r4, pc}

0800721a <__swrite>:
 800721a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721e:	461f      	mov	r7, r3
 8007220:	898b      	ldrh	r3, [r1, #12]
 8007222:	4605      	mov	r5, r0
 8007224:	05db      	lsls	r3, r3, #23
 8007226:	460c      	mov	r4, r1
 8007228:	4616      	mov	r6, r2
 800722a:	d505      	bpl.n	8007238 <__swrite+0x1e>
 800722c:	2302      	movs	r3, #2
 800722e:	2200      	movs	r2, #0
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	f000 f868 	bl	8007308 <_lseek_r>
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	4632      	mov	r2, r6
 800723c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	4628      	mov	r0, r5
 8007244:	463b      	mov	r3, r7
 8007246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800724a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800724e:	f000 b817 	b.w	8007280 <_write_r>

08007252 <__sseek>:
 8007252:	b510      	push	{r4, lr}
 8007254:	460c      	mov	r4, r1
 8007256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725a:	f000 f855 	bl	8007308 <_lseek_r>
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	bf15      	itete	ne
 8007264:	6560      	strne	r0, [r4, #84]	; 0x54
 8007266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800726a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800726e:	81a3      	strheq	r3, [r4, #12]
 8007270:	bf18      	it	ne
 8007272:	81a3      	strhne	r3, [r4, #12]
 8007274:	bd10      	pop	{r4, pc}

08007276 <__sclose>:
 8007276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727a:	f000 b813 	b.w	80072a4 <_close_r>
	...

08007280 <_write_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	4611      	mov	r1, r2
 8007288:	2200      	movs	r2, #0
 800728a:	4d05      	ldr	r5, [pc, #20]	; (80072a0 <_write_r+0x20>)
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7fa f9e8 	bl	8001664 <_write>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_write_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_write_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	20000378 	.word	0x20000378

080072a4 <_close_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	2300      	movs	r3, #0
 80072a8:	4d05      	ldr	r5, [pc, #20]	; (80072c0 <_close_r+0x1c>)
 80072aa:	4604      	mov	r4, r0
 80072ac:	4608      	mov	r0, r1
 80072ae:	602b      	str	r3, [r5, #0]
 80072b0:	f7fa f9f4 	bl	800169c <_close>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_close_r+0x1a>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_close_r+0x1a>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	20000378 	.word	0x20000378

080072c4 <_fstat_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	2300      	movs	r3, #0
 80072c8:	4d06      	ldr	r5, [pc, #24]	; (80072e4 <_fstat_r+0x20>)
 80072ca:	4604      	mov	r4, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	f7fa f9ee 	bl	80016b2 <_fstat>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d102      	bne.n	80072e0 <_fstat_r+0x1c>
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	b103      	cbz	r3, 80072e0 <_fstat_r+0x1c>
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	bd38      	pop	{r3, r4, r5, pc}
 80072e2:	bf00      	nop
 80072e4:	20000378 	.word	0x20000378

080072e8 <_isatty_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	2300      	movs	r3, #0
 80072ec:	4d05      	ldr	r5, [pc, #20]	; (8007304 <_isatty_r+0x1c>)
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	f7fa f9ec 	bl	80016d0 <_isatty>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d102      	bne.n	8007302 <_isatty_r+0x1a>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	b103      	cbz	r3, 8007302 <_isatty_r+0x1a>
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	20000378 	.word	0x20000378

08007308 <_lseek_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	4611      	mov	r1, r2
 8007310:	2200      	movs	r2, #0
 8007312:	4d05      	ldr	r5, [pc, #20]	; (8007328 <_lseek_r+0x20>)
 8007314:	602a      	str	r2, [r5, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	f7fa f9e4 	bl	80016e4 <_lseek>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_lseek_r+0x1e>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_lseek_r+0x1e>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	20000378 	.word	0x20000378

0800732c <_read_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4604      	mov	r4, r0
 8007330:	4608      	mov	r0, r1
 8007332:	4611      	mov	r1, r2
 8007334:	2200      	movs	r2, #0
 8007336:	4d05      	ldr	r5, [pc, #20]	; (800734c <_read_r+0x20>)
 8007338:	602a      	str	r2, [r5, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	f7fa f975 	bl	800162a <_read>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_read_r+0x1e>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_read_r+0x1e>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	20000378 	.word	0x20000378

08007350 <_init>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr

0800735c <_fini>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr
